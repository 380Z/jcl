<DECL>--------------------------------------------------------------------------
[Declaration]
TJclSmartCompOptions = set of TJclSmartCompOption;
TJclSmartCompOption = (scSimpleCompare, scIgnoreCase);
[ShortDescr]
TJclSmartCompOptions is a set of flags which determine how comparison of function
names within the TJclPeImage module is performed. Using these options you can
specify, for example, whether such a comparison should be case sensitive or not.
[Enumeration]
Count=2
1=scSimpleCompare=Many Win32 dynamic link libraries export functions in two forms,
one for ansi and one for unicode, and distinquish between these functions using a
single letter suffix, A and W respectively. The name without this suffix is refered
to as the base name. Ommiting the scSimpleCompare flag specifies that name comparison
should perform the comparison based on the base name only. As such it ignores the
suffix and considers, for example, CharUpper, CharUpperA and CharUpperW as the same
function. If the flag is included each of these functions are considered different.
2=scIgnoreCase=Specifies that the comparison should be case insensitive. By default
all comparisons are case sensitive.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Smart Name Comparison
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=PeSmartFunctionNameSame;..\PeSmartFunctionNameSame
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeStripFunctionAW(const FunctionName: string): string;
[ShortDescr]
Returns the base name of the supplied function name.
[Description]
Many Win32 dynamic link libraries export functions in two forms, one for ansi and
one for unicode, and distinquish between these functions using a single letter
suffix, A and W respectively. The name without this suffix is refered to as the
base name. The PeStripFunctionAW accepts a function name and returns the base name,
stripping of the suffix character if necessary.
[Parameters]
Count=1
1=FunctionName:string=Name of a function as it appears in the import or export
section of an image file.
[Result]
The base name of the supplied function.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Smart Name Comparison
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=PeSmartFunctionNameSame
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeSmartFunctionNameSame(const ComparedName, FunctionName: string; Options: TJclSmartCompOptions = []): Boolean;
[ShortDescr]
Compares two function names.
[Description]
The PeSmartFunctionNameSame function compares two function names and returns
whether they are equal observing the comparison rules specified through the
options parameter.
[Parameters]
Count=3
1=ComparedName:string=First function name to be compared.
2=FunctionName:string=Second function name to be compared.
3=Options:<REF Target"Types\TJclSmartCompOptions>TJclSmartCompOptions</REF>=A set
of options which determine how the names are compared. See TJclSmartCompOptions
for more information.
[Result]
If the two function names are considered equal the function returns True, otherwise
it returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Smart Name Comparison
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=PeStripFunctionAW
<DECL>--------------------------------------------------------------------------
[Declaration]
EJclPeImageError = class (EJclError);
[ShortDescr]
Base exception class for exceptions raised by the JclPeImage module.
[Description]
EJclPeImageError is the base exception class for exception raised by the JclPeImage
module. EJclPeImageError does not introduce any new methods or properties and
merely serves to identify exceptions raised explicitly by the JclPeImage module.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImageBaseList = class (TObjectList)
[ShortDescr]
Baseclass for list-like classes which require a TJclPeImage instance reference.
[Description]
TJclPeImageBaseList is the baseclass for all list classes in the JclPeImage module
which require a reference to the TJclPeImage instance for which they were created.
TJclPeImageBaseList does not introduce any new behaviours and serves merely as a
baseclass, you'll likely never need to instantiate a TJclPeImageBaseList class
explicitly.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImageBaseList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(AImage: TJclPeImage);
[ShortDescr]
Instantiates a TJclPeImageBaseList class.
[Description]
Creates an instance of the TJclPeImageBaseList class and stores the reference
to AImage in the Image property for later use. The constructor calls the inherited
constructor specifying True for the AOwnsObjects parameter and as such the list
will own any objects stored in it. See TObjectList in the Delphi VCL help for
more information. Note that the TJclPeImageBaseList does not assume ownership of
the specified TJclPeImage instance. It merely stored a reference to it and as
such it remains the responsibility of the caller to free that instance eventually.
[Parameters]
Count=1
1=AImage:TJclPeImage=Reference to a TJclPeImage instance for which the class is
created. The reference will be available for later use through the Image property.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImageBaseList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=TJclPeImage
<DECL>--------------------------------------------------------------------------
[Declaration]
property Image: <REF>TJclPeImage</REF> read FImage;
[ShortDescr]
Reference to the TJclPeImage specified during construction.
[Description]
Reference to the TJclPeImage instance for which the class was instantiated. This
is a direct copy of the AImage parameter as specified when the constructor was
called.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImageBaseList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImagesCache = class (TObject)
[ShortDescr]
Cahce for TJclPeImage objects.
[Description]
Provides a cache for TJclPeImage instances. The cache is used internally (though
you can also use it outside of the module) by the JclPeImage module to prevent
frequent loading and unloading of image files, thereby increasing performance.
Note that the TJclPeImagesCache class is not inherently thread safe. 
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImagesCache
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Clear;
[ShortDescr]
Clears the list of image objects
[Description]
Clears the list of image objects. Before the list is cleared all instances are
freed first. Therefore you should make sure not to use any cached references to
any of image objects retrieved from the cache earlier.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImagesCache
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Images[const FileName: TFileName]: TJclPeImage read GetImages; default;
[ShortDescr]
Returns a TJclPeImage instance for the specified image file.
[Description]
The Images property returns an TJclPeImage object for the image file specified
by the FileName index. If there is already an object for that image in the cache
the property returns a reference to it. If there isn't an object in the cache yet
the property creates the object first and then returns a reference to this newly
created object. The FileName index should be the fully qualified name of the
image file for which you need a TJclPeImage instance. If the filename is not
fully qualified and can't be found in the usually directories (path, system etc)
an exception is raised. Note that any references to TJclPeImage instances retrieved
through the cache become invalid when the TJclPeImagesCache object is destroyed
or when it's Clear method is called.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImagesCache
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Count: Integer read GetCount;
[ShortDescr]
Returns the number of TJclPeImage instances currently in the cache.
[Description]
Returns the number of TJclPeImage instances currently in the cache.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImagesCache
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImportSort = (isName, isOrdinal, isHint, isLibImport);
[ShortDescr]
Enumeration used by the various import section related classes to determine how
a list of imported functions should be sorted. Usually the method called to perform
the sort operation allows for further options such as whether the sort should be
ascending or descending.
[Enumeration]
Count=4
1=isName=The list is sorted on the name of the imported function.
2=isOrdinal=The list is sorted on the ordinal by which the function was imported.
3=isHint=The list is sorted on the hint of the imported function.
4=isLibImport=The list is sorted by the name of the image from which the functions were imported.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImportLibSort = (ilName, ilIndex);
[ShortDescr]
Enumeration used by the TJclPeImportList which determines how the list of import
library items is sorted.
[Enumeration]
Count=2
1=ilName=The list is sorted by name (TJclPeImportLibItem.Name property).
2=ilIndex=The list is sorted by index (TJclPeImportLibItem.ImportDirectoryIndex property).
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImportKind = (ikImport, ikDelayImport, ikBoundImport);
[ShortDescr]
Specifies how a function was imported. 
This does not include whether or not the function was imported by name or ordinal.
[Enumeration]
Count=3
1=ikImport=Standard implicit import.
2=ikDelayImport=Delay load import.
3=ikBoundImport=Bound import.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeResolveCheck = (icNotChecked, icResolved, icUnresolved);
[ShortDescr]
Both the classes that wrap the import section as well as the class that wraps
the export section have methods to perform a resolve check. This means slightly
different things for an import section than it does for an export section. For
example, for the import section it means that the method tries to resolve all
imported function by looking them up in the exports section of the image from
which the function is imported. If the function is found there the import is
considered resolved, otherwise it is unresolved. This latter case would indicate
that the OS loader would probably also be unable to resolve the import and loading
of the image would fail. The TJclPeResolveCheck type is used by the imports and
exports classes to specify whether a function could be resolved. Note that all
items start off begin unchecked, you have to request function resolving explicitly
through the appropriate method call.
[Enumeration]
Count=3
1=icNotChecked=The function was not checked yet. Initial state of all items.
2=icResolved=The function could be resolved.
3=icUnresolved=The function could not be resolved. This would indicate an error
in the image file evantually causing the OS loader to fail loading the image.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeLinkerProducer = (lrBorland, lrMicrosoft);
[ShortDescr]
Specifies the manufacturer of the linker that produced an image file. The function
uses a heauristic which is not perfect and is only capable of recognizing Borland
Delphi, C++ Builder and Microsoft Visual Studio linkers.
[Enumeration]
Count=2
1=lrBorland=The image was produced by the Borland Delphi linker.
2=lrMicrosoft=The image was produced by the Borland C++ Builder or Microsoft Visual C++ linker.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImportFuncItem = class (TObject)
[ShortDescr]
Represents a single imported function.
[Description]
The TJclPeImportFuncItem class represents a single imported function from some
image file. The class provides detailed information about how the function was
imported such as it's name or ordinal. You'll normally won't instantiate this
class directly but instead retrieve a reference to it through the Items property
of the TJclPeImportLibItem class.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Ordinal: Word read FOrdinal;
[ShortDescr]
The ordinal value by which the function was imported.
[Description]
If the function was imported by ordinal the property reads the ordinal value by
which it was imported, otherwise it reads 0. You can determine whether the function
was imported by ordinal or name through the IsByOrdinal property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Hint: Word read FHint;
[ShortDescr]
Hint of the imported function.
[Description]
Returns the hint value of the function. The hint is an index into the exports
table of the image from which the function is imported which allows the OS loader
to find the correct export a little faster. Note that the hint value may be
incorrect. In those situations the OS loader itself uses a binary search on the
exports table to find the correct export. 
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImportLib: TJclPeImportLibItem read FImportLib;
[ShortDescr]
Reference to the TJclPeImportLibItem which owns this TJclPeImportFuncItem.
[Description]
Reference to the TJclPeImportLibItem which owns this TJclPeImportFuncItem. See
the description of TJclPeImportFunctItem for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IndirectImportName: Boolean read FIndirectImportName;
[ShortDescr]
Returns the name of a function which was imported by ordinal (if available).
[Description]
If the function was imported by ordinal the IndirectImportName property returns
the name of the function. The JclPeImage module has to look up this name from the
exports section of the image from which the function is imported. Since an image
file does not always provide the name of an export, the IndirectImportName can
be empty. You have to explicitly request this look up through the
TryGetNamesForOrdinalImports method of the TJclPeImportList or TJclPeImage class
that owns the TJclPeImportFuncItem.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IsByOrdinal: Boolean read GetIsByOrdinal;
[ShortDescr]
Specifies whether the function was imported by ordinal.
[Description]
Specifies whether the function was imported by ordinal. If the function is imported
by Ordinal the property reads True, otherwise it reads False (and as such the
function was imported by name).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string read GetName;
[ShortDescr]
Returns the name of the imported function.
[Description]
The Name property returns the name of the imported function. If the function
was imported by name the property simply returns that name. If the function was
imported by ordinal the property returns the value of the IndirectImportName
property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ResolveCheck: TJclPeResolveCheck read FResolveCheck;
[ShortDescr]
Specifies whether the function could be resolved.
[Description]
Specifies whether the function could be resolved. The intial value of this property
will be icNotChecked. You have to request function resolving explicitly through
the CheckImports method of the TJclPeImportList class.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImportLibItem = class (TJclPeImageBaseList)
[ShortDescr]
Abstraction of an import descriptor.
[Description]
The import section of an image file consists of a variable number of entries
named import descriptors. Each individual import descriptor is basically a table
that describes the imports from one specific image. The TJclPeImportLibItem is
a class which abstracts such an import descriptor and provides properties to read
the information contained within it, most importantly the functions imported from
the image. You'll normally won't create an instance of this class but instead
retrieve a reference to it through the Items property of the TJclPeImportList class.
Note that there can, and often will, exist multiple TJclPeImportLibItem entries
for one image.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SortList(SortType: TJclPeImportSort; Descending: Boolean = False);
[ShortDescr]
Sorts the list of imports.
[Description]
Sorts the list of imports in this import descriptor according to the supplied
parameters. You can sort the list on things such as the name of the imports
and specify an ascending or descending sort.
[Parameters]
Count=2
1=SortType:TJclPeImportSort=Specifies on which field the list should be sorted.
See TJclPeImportSort for a description of the allowed values and their meaning.
2=Descending:Boolean=If True the list is sorted in descending order, if False
the list is sorted in ascending order.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Count: Integer read GetCount;
[ShortDescr]
Returns the number of items in the Items property.
[Description]
Returns the number of items in the Items property. As such it returns the number
of imports described by, or contained in, this import descriptor.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileName: TFileName read GetFileName;
[ShortDescr]
Returns the fully qualified filename of the image described by this entry.
[Description]
Returns the fully qualified name of the image file from which the functions
described by this import descriptor are imported.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImportDescriptor: Pointer read FImportDescriptor;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImportDirectoryIndex: Integer read FImportDirectoryIndex;
[ShortDescr]
Position within the Items list of the TJclImportList class.
[Description]
Zero based index into the Items property of the TJclImportList class at which
this TJclPeImportLibItem is positioned.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImportKind: TJclPeImportKind read FImportKind;
[ShortDescr]
Specifies the kind of import.
[Description]
Specifies the kind of import. It can be either a normal import, a bound import
or a delay loaded import. See the description of TJclPeImportKind for more information.
Note that this has nothing to do with the method by which a function is imported,
such as by name or by ordinal. To find out about that use the IsByOrdinal property. 
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Items[Index: Integer]: TJclPeImportFuncItem read GetItems; default;
[ShortDescr]
Provides indexed access to the items in the list.
[Description]
Provides (zero based) indexed access to the items contained in the import
descriptor. Each entry in the list is a reference to a TJclPeImportFuncItem
which describes a single imported function from the image described by this
import descriptor. The number of items in the list can be found by reading the
Count property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string read GetName;
[ShortDescr]
Returns the lowercase filename of the image described by this entry.
[Description]
Returns the filename of the image file from which the functions described by this
import descriptor are imported. The returned filename is returned as it appears
in the image file, except that it's converted to lowercase before it's returned.
Like the OriginalName property, the returned name is often without path or drive
indication.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property OriginalName: string read GetOriginalName;
[ShortDescr]
Returns the filename of the image described by this entry.
[Description]
Returns the filename of the image file from which the functions described by this
import descriptor are imported. The returned filename is returned as it appears
in the image file, often uppercase and without path or drive indication.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ThunkData: PImageThunkData read FThunkData;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property TotalResolveCheck: TJclPeResolveCheck read FTotalResolveCheck;
[ShortDescr]
Specifies whether all imported functions in this import directory could be resolved.
[Description]
Specifies whether all imported functions in this import directory could be resolved.
If as little as one function could not be resolved, the property returns icUnresolved.
This property starts out with the icNotChecked value indicating that resolvement
wasn't checked yet. You have the explicitly request function resolving through the
CheckImports method of the TJclPeImportList class. 
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportLibItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImportList = class (TJclPeImageBaseList)
[ShortDescr]
Represents the import section of an image file.
[Description]
The TJclPeImportList class represents the import section of an image file. The
import section contains a list of import descriptors (represented by the
TJclPeImportLibItem class) each of which in turn contain all imports from a
specific image file. Therefore the import section can be viewed as a two-level
tree structure. For convenience the TJclPeImportList class also allows direct
access to the complete list of imported functions, thus bypassing the import
directories level.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure CheckImports(PeImageCache: TJclPeImagesCache = nil);
[ShortDescr]
Determines whether all imported functions can be resolved.
[Description]
This method determines whether all imported functions can be resolved  by looking
them up in the exports section of the image from which the function is imported.
If the function is found there the import is considered resolved, otherwise it is
unresolved. This latter case would indicate that the OS loader would probably also
be unable to resolve the import and loading of the image would fail.
[Parameters]
Count=1
1=PeImageCache:TJclPeImagesCache=Allows you to specify a TJclPeImagesCache to be
used by the method. This can significantly increase performance because it may
prevent a lot of loading and unloading of image files (especially when the image
is imports functions from a lot of different images). If you are using an image
cache in your application it is recommended you use it here. That way the method
can reuse your already loaded images. Note though that if the method needs to
load additional images, it will do so using the cache. Those images will not be
removed upon method exit.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function SmartFindName(const CompareName, LibName: string; Options: TJclSmartCompOptions = []): TJclPeImportFuncItem;
[ShortDescr]
Searches the import section for a specific function.
[Description]
The SmartFindName method searches through the all the import directories that apply
to the specified image name (LibName parameter) for the specified function
name (CompareName). Through the Options parameter you can specify whether the
search should be case-sensitive and/or base the comparison on the full name or
only the basename of the function.
[Parameters]
Count=3
1=CompareName:string=Name of the function to search for.
2=LibName:string=Image from which the function should be imported. If you specify
an empty string the search includes all images.
3=Options:TJclSmartCompOptions=Set of options that influence the name comparison
such as whether it's case-sensitive. See the description of TJclSmartCompOptions
for more information.
[Result]
If the specified function was found SmartFindName returns a reference to the
TJclPeImportFuncItem that represents the found imported function. This reference
remains owned by the class so you shouldn't free it. It also remains valid only
as long as the TJclPeImportList isn't destroyed. If the function couldn't be
found the return value is nil.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SortAllItemsList(SortType: TJclPeImportSort; Descending: Boolean = False);
[ShortDescr]
Sorts the list of imported functions as accesible through the AllItems property.
[Description]
Sorts the list of imported functions as accesible through the AllItems property.
[Parameters]
Count=2
1=SortType:TJclPeImportSort=Specifies by which property the list is sorted. You
can sort on Name, Ordinal, Hint or Image name. See the description of TJclPeImportSort
for more information.
2=Descending:Boolean=Specifies whether the sort should be in ascending (False) or
descending (True) order.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SortList(SortType: TJclPeImportLibSort);
[ShortDescr]
Sorts the list of import directories (the Items property).
[Description]
Sorts the list of import directories (the Items property) according to the property
specified by the SortType parameter. You can sort either on Index or Name.
[Parameters]
Count=1
1=SortType:TJclPeImportLibSort=Specifies on which property the list should be
sorted. You can sort either on Index or Name. See the description of TJclPeImportLibSort
for more information.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure TryGetNamesForOrdinalImports;
[ShortDescr]
Attempts to resolve the names of functions that were imported by ordinal.
[Description]
The TryGetNamesForOrdinalImports method searches the export sections of each image
that is linked against in an attempt to find the names of those functions that
were imported by ordinal instead of by name. See also the description of the
IndirectImportName property of the TJclPeImportFuncItem class.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property AllItems[Index: Integer]: TJclPeImportFuncItem read GetAllItems;
[ShortDescr]
Provides indexed access to all imported functions.
[Description]
Provides (zero-based) indexed access to all imported functions, bypassing the
import directories. Note that this list is initially empty and has to be explicitly
initialized either by reading the AllItemsCount property (which subsequently returns
the number of items in the list) or by setting the FilterModuleName property. In
addition, the items in the AllItems list can be filtered by that same FilterModuleName
property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property AllItemCount: Integer read GetAllItemCount;
[ShortDescr]
Returns the number of items in the AllItems list.
[Description]
Returns the number of items in the AllItems list. Note that if the list is empty
the property read method will first trigger the initialisation of the list before
returning the count.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FilterModuleName: string read FFilterModuleName write SetFilterModuleName;
[ShortDescr]
Filters the items that are included in the AllItems list.
[Description]
Allows you to filter the items that are included in the AllItems list. Setting
this property to a non-empty string will cause only those functions to be added
that are imported from the specified image.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Items[Index: Integer]: TJclPeImportLibItem read GetItems; default;
[ShortDescr]
Provides indexed access to the import directories list.
[Description]
Provides (zero-based) indexed access to the import directories list. Read the
Count property to determine the number of items in the list. Each item in the
list represents a single import directory but multiple items may exist for one
single image file.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property LinkerProducer: TJclPeLinkerProducer read FLinkerProducer;
[ShortDescr]
Returns the manufacturer of the linker that produced the image.
[Description]
Returns the manufacturer of the linker that produced the image. See the
description of TJclPeLinkerProducer for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property UniqueLibItemCount: Integer read GetUniqueLibItemCount;
[ShortDescr]
Returns the number of items in the UniqueLibItems list.
[Description]
Returns the number of items in the UniqueLibItems list.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property UniqueLibItemFromName[const Name: string]: TJclPeImportLibItem read GetUniqueLibItemFromName;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property UniqueLibItems[Index: Integer]: TJclPeImportLibItem read GetUniqueLibItems;
[ShortDescr]
List of unique import directories.
[Description]
As you may recall, an import section may contain multiple import directories for
one and the same image (for example, it may contains two or more import directories
for the user32.dll image). The UniqueLibItems list provides (zero-based) indexed
access to a list of import directories that are unique across the import section.
You can use this list to find out exactly from which images functions are imported,
including some details about those images, but you shouldn't use, for example,
the Items property to determine which functions are imported from that image
because there may exist other import directories which import additional functions.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property UniqueLibNames[Index: Integer]: string read GetUniqueLibNames;
[ShortDescr]
List of image names from which functions are imported.
[Description]
As you may recall, an import section may contain multiple import directories for
one and the same image (for example, it may contains two or more import directories
for the user32.dll image). The UniqueLibNames list provides (zero-based) indexed
access to a list of image names that are unique across the import section.
You can use this list to find out the names of the images from which functions
are imported.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Import Section\TJclPeImportList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeExportSort = (esName, esOrdinal, esHint, esAddress, esForwarded, esAddrOrFwd);
[ShortDescr]
Enumeration used to determine on which field a list of exported functions is sorted.
[Enumeration]
Count=6
1=esName=Sorted on the name by which the function is exported.
2=esOrdinal=Sorted on the ordinal by which the function is exported.
3=esHint=Sorted on the hint.
4=esAddress=Sorted on the address of the exported function.
5=esForwarded=Sorted on the name of the function to which the export is forwarded.
6=esAddrOrFwd=Sorted on address or name of the function to which the export is
forwarded depending on whether the function is forwarded or not. 
[Quick Info]
Kind=Type
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeExportFuncItem = class (TObject)
[ShortDescr]
Represents a single exported function.
[Description]
The TJclPeExportFuncItem represents a single exported function in the exports
section of an image. The class provides all the details about the function such
as the name or ordinal by which it is exported.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Address: DWORD read FAddress;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property AddressOrForwardStr: string read GetAddressOrForwardStr;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IsForwarded: Boolean read GetIsForwarded;
[ShortDescr]
Specifies whether the export is a function forwarder.
[Description]
If the export is a function forwarder the IsForwarded property returns True, if
it is not forwarded the property returns False.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ForwardedName: string read GetForwardedName;
[ShortDescr]
Name of the image and function to which the export is forwarded.
[Description]
If the export is a function forwarder, as can be determined by reading the
IsForwarded property, the ForwardedName property returns the name of the image
to which the function is forwarded and the name of that function, separated with
a single dot.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ForwardedLibName: string read GetForwardedLibName;
[ShortDescr]
Returns the name of the image to which the export is forwarded.
[Description]
Returns the name of the image, including extension, to which the export is forwarded.
If the export isn't forwarded the property returns an empty string. You can
determine whether the export is forwarded by reading the IsForwarded property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ForwardedFuncOrdinal: DWORD read GetForwardedFuncOrdinal;
[ShortDescr]
Returns the ordinal of the function to which the export is forwarded.
[Description]
If the export is forwarded the ForwardedFuncOrdinal property returns the ordinal
of the function to which the export is forwarded. If the export is not forwarded
the property returns 0. You can determine whether the export is
forwarded by reading the IsForwarded property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ForwardedFuncName: string read GetForwardedFuncName;
[ShortDescr]
Returns the name of the function to which the export is forwarded.
[Description]
If the export is forwarded the ForwardedFuncOrdinal property returns the name
of the function to which the export is forwarded. If the export is not forwarded
the property returns an empty string. You can determine whether the export is
forwarded by reading the IsForwarded property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Hint: Word read FHint;
[ShortDescr]
Contains the index into TJclPeExportFuncList.Items property at which the function is located.
[Description]
The Hint property contains the (zero based) index into Items property of the
TJclPeExportFuncList at which this function is located. This is also the position
in the export table at which the function is located.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string read GetName;
[ShortDescr]
Returns the name by which the function is exported.
[Description]
If the function is exported by name the Name property returns the name by which
the function is exported. If the function is not exported by name the property
returns an empty string.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Ordinal: DWORD read FOrdinal;
[ShortDescr]
Returns the ordinal value by which the function is exported.
[Description]
If the function is exported by ordinal the Ordinal property returns the ordinal
value by which  the function is exported. If the function is not exported by
ordinal the property returns 0.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ResolveCheck: TJclPeResolveCheck read FResolveCheck;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeExportFuncList = class (TJclPeImageBaseList)
[ShortDescr]
The TJclPeExportFuncList class represents the export section of an image file.
[Description]
The TJclPeExportFuncList class represents the export section of an image file.
As such it allowsaccess to the list of exported functions in various ways and
provides some information about the exports section itself.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure CheckForwards(PeImageCache: TJclPeImagesCache = nil);
[ShortDescr]
Determines the validity of all forwarded function exports.
[Description]
CheckForwards determines whether all forwarded function exports are valid. That is,
it determines whether the function which is forwarded to atually exist. When the
method returns the TotalResolveCheck property indicates whether or not all function
forwards are valid. You can also use the ResolveCheck property of the individual
TJclPeExportFuncItem items to determine the result on a per function basis.
[Parameters]
Count=1
1=PeImageCache:TJclPeImagesCache=Allows you to specify a TJclPeImagesCache to be
used by the method. This can significantly increase performance because it may
prevent a lot of loading and unloading of image files. If you are using an image
cache in your application it is recommended you use it here. That way the method
can reuse your already loaded images. Note though that if the method needs to
load additional images, it will do so using the cache. Those images will not be
removed upon method exit.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function ItemName(Item: TJclPeExportFuncItem): string;
[ShortDescr]
Returns the Name propery of a function item.
[Description]
Helper class methods which returns the name of the specified item (it's name
property) if the Item is valid (non-nil) or an empty string if the Item parameter
is nil.
[Parameters]
Count=1
1=Item:TJclPeExportFuncItem=The Item for which to retrieve the Name property. Can be nil.
[Result]
If Item is non-nil the method returns the Name property of the Item, otherwise
it returns an empty string.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function OrdinalValid(Ordinal: DWORD): Boolean;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Ordinal:DWORD=TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure PrepareForFastNameSearch;
[ShortDescr]
Prepares the list for fast name searching.
[Description]
Prepares the list for fast name searching. It does so basically by sorting the
list in ascending order on the Name property of the individual function exports.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function SmartFindName(const CompareName: string; Options: TJclSmartCompOptions = []): TJclPeExportFuncItem;
[ShortDescr]
Searches the list of function exports for a specific function.
[Description]
The SmartFindName method searches the list of function exports for the specified function.
[Parameters]
Count=2
1=CompareName:string=The name of the function to search for.
2=Options:TJclSmartCompOptions=Set of options which determine how the method performs
the name comparison. You can specify, for example, that the comparison should be
case insensitive. See the description of TJclSmartCompOptions for more information.
[Result]
If the method finds the specified export it returns a reference to a TJclPeExportFuncItem
instance which represents the found export. You can use this instance to find out more
details about it. The instance remains owned by the class so never free it.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SortList(SortType: TJclPeExportSort; Descending: Boolean = False);
[ShortDescr]
Sorts the exported functions list.
[Description]
Sorts the exported functions list.
[Parameters]
Count=2
1=SortType:TJclPeExportSort=Determines the key on which the list is sorted. An
example is sorting based on the name by which the functions are exported. See the
description of TJclPeExportSort for more information.
2=Descending:Boolean=Determines whether the sort is in ascending or descending order.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property AnyForwards: Boolean read FAnyForwards;
[ShortDescr]
AnyFowards determines whether the image contains any function forwarderes.
[Description]
AnyFowards determines whether the image contains any function forwarderes. It
reads True if there is at least one function forwarder, otherwise it reads False.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Base: DWORD read FBase;
[ShortDescr]
The starting ordinal number for exports in this image. Will usually be 1.
[Description]
The starting ordinal number for exports in this image. Will usually be 1.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ExportDir: PImageExportDirectory read FExportDir;
[ShortDescr]
Pointer to a TImageExportDirectory record which describes the Export Directory Table.
[Description]
Pointer to a TImageExportDirectory record which describes the Export Directory Table.
The Export Directory Table contains address information that is used to resolve
fix-up references to the entry points within this image.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ForwardedLibsList: TStrings read GetForwardedLibsList;
[ShortDescr]
Returns a list containing the names of forwarded functions.
[Description]
Returns a list containing the names of forwarded functions, if any. The list
remains owned by the class so never free it.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FunctionCount: DWORD read FFunctionCount;
[ShortDescr]
Returns the number of items in the Items property.
[Description]
Returns the number of items in the Items property. In other words, it returns the
number of function exports in this image.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Items[Index: Integer]: TJclPeExportFuncItem read GetItems; default;
[ShortDescr]
Provides indexed access to the items contained in the export table.
[Description]
Provides (zero based) indexed access to the items contained in the export table.
As such it contains all exported funtions in the image. Initially the list is
in the same order as the functions appear in the export table but they may be
sorted afterwards.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ItemFromAddress[Address: DWORD]: TJclPeExportFuncItem read GetItemFromAddress;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ItemFromName[const Name: string]: TJclPeExportFuncItem read GetItemFromName;
[ShortDescr]
Provides, name based, indexed access to the list of exported functions.
[Description]
Provides indexed access to the list of exported functions where the index is the
name by which the function is exported. If a function by the specified name is
exported from the image the property returns a reference to a TJclPeExportFuncItem
which represents that function. Note that the returned reference remains owned by
the class so never free it. If no function is exported by the specified name the
property returns nil.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ItemFromOrdinal[Ordinal: DWORD]: TJclPeExportFuncItem read GetItemFromOrdinal;
[ShortDescr]
Provides, ordinal based, indexed access to the list of exported functions.
[Description]
Provides indexed access to the list of exported functions where the index is the
ordinal value by which the function is exported. If a function by the orindal value
is exported from the image the property returns a reference to a TJclPeExportFuncItem
which represents that function. Note that the returned reference remains owned by
the class so never free it. If no function is exported by the specified ordinal
value the property returns nil.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string read GetName;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property TotalResolveCheck: TJclPeResolveCheck read FTotalResolveCheck;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Export Section\TJclPeExportFuncList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclResourceType = (rtUnknown0..rtUserDefined);
[ShortDescr]
TODO
[Enumeration]
Count=25
1=rtUnknown0=TODO
2=rtCursorEntry=TODO
3=rtBitmap=TODO
4=rtIconEntry=TODO
5=rtMenu=TODO
6=rtDialog=TODO
7=rtString=TODO
8=rtFontDir=TODO
9=rtFont=TODO
10=rtAccelerators=TODO
11=rtRCData=TODO
12=rtMessageTable=TODO
13=rtCursor=TODO
14=rtUnknown13=TODO
15=rtIcon=TODO
16=rtUnknown15=TODO
17=rtVersion=TODO
18=rtDlgInclude=TODO
19=rtUnknown18=TODO
20=rtPlugPlay=TODO
21=rtVxd=TODO
22=rtAniCursor=TODO
23=rtAniIcon=TODO
24=rtHmtl=TODO
25=rtUserDefined=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeResourceRawStream = class (TCustomMemoryStream)
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceRawStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(AResourceItem: TJclPeResourceItem);
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=AResourceItem:TJclPeResourceItem=TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceRawStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Write(const Buffer; Count: Longint): Longint; override;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=2
1=Buffer:Untyped=TODO
2=Count:Longint=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceRawStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeResourceItem = class (TObject)
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
constructor Create(AImage: TJclPeImage; AParentItem: TJclPeResourceItem; AEntry: PImageResourceDirectoryEntry);
[Declaration]
TJclPeResourceItem = class (TObject)
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=3
1=AImage:TJclPeImage=TODO
2=AParentItem:TJclPeResourceItem=TODO
3=AEntry:PImageResourceDirectoryEntry=TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property DataEntry: PImageResourceDataEntry read GetDataEntry;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Entry: PImageResourceDirectoryEntry read FEntry;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Image: TJclPeImage read FImage;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IsDirectory: Boolean read GetIsDirectory;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IsName: Boolean read GetIsName;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property List: TJclPeResourceList read GetList;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Level: Byte read FLevel;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string read GetName;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ParameterName: string read GetParameterName;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ParentItem: TJclPeResourceItem read FParentItem;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property RawEntryDataSize: Integer read GetRawEntryDataSize;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property RawEntryData: Pointer read GetRawEntryData;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ResourceType: TJclResourceType read GetResourceType;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ResourceTypeStr: string read GetResourceTypeStr;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeResourceList = class (TJclPeImageBaseList)
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(ADirectory: PImageResourceDirectory; AImage: TJclPeImage; AParentItem: TJclPeResourceItem);
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=3
1=ADirectory:PImageResourceDirectory=TODO
2=AImage:TJclPeImage=TODO
3=AParentItem:TJclPeResourceItem=TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Directory: PImageResourceDirectory read FDirectory;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Items[Index: Integer]: TJclPeResourceItem read GetItems; default;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ParentItem: TJclPeResourceItem read FParentItem;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeResourceList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeRootResourceList = class (TJclPeResourceList)
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeRootResourceList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function FindResource(ResourceType: TJclResourceType; const ResourceName: string = ''): TJclPeResourceItem;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=2
1=ResourceType:TJclResourceType=TODO
2=ResourceName:string=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Resource Section\TJclPeRootResourceList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeRelocation = record
  Address: Word;
  RelocType: Byte;
  VirtualAddress: DWORD;
end;
[ShortDescr]
TODO
[Description]
The TJclPeRelocation record represents a single address fix up in the relocation
table of the imagefile.
[RecordFields]
Count=3
1=Address:Word=The relocation offset which, when added to the VirtualAddress
property of the relocation block, specifies the address which needs to be fixed up.
2=RelocType:Byte=The relocation type which indicates how the fix up is to be
performed. Common values on Intel platforms are IMAGE_REL_BASED_HIGHLOW and
IMAGE_REL_BASED_ABSOLUTE. Delcarations for the complete list is includedin the
JclWin32 file. Search the Platform SDK and/or MSDN library for details about all
these possible relocation types. 
3=VirtualAddress:DWORD=The relative virtual address specifying the memory address
which needs to be fixed up (equal to Address + TJclPeRelocEntry.VirtualAddress).
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeRelocEntry = class (TObject)
[ShortDescr]
Represents a block of relocation entries.
[Description]
The TJclPeRelocEntry class represents a block of relocation entries. Each such
block specifies the address fix-ups for a single 4KB block within the image file.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocEntry
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Count: Integer read FCount;
[ShortDescr]
Returns the number of elements in the Relocations property.
[Description]
Returns the number of elements in the Relocations property. That is, it returns
the number of address fix-ups defined in this block.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocEntry
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Relocations[Index: Integer]: TJclPeRelocation read GetRelocations; default;
[ShortDescr]
Provides indexed access to the address fix-ups defined in this block.
[Description]
The Relocations property provides (zero-based) indexed access to the address
fix-ups defined in this block. To learn the number of entries in the list read
the Count property. Each entry defines a single address fix-up as it appears in
the relocations table.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocEntry
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Size: DWORD read GetSize;
[ShortDescr]
The Size property returns the size, in bytes, occupied by the relocation block.
[Description]
The Size property returns the size, in bytes, occupied by the relocation block.
Since each block is a variable length structure representing a single 4KB of the
image file, each block may need a different ammount of memory to hold all necessary
fixups. 
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocEntry
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property VirtualAddress: DWORD read GetVirtualAddress;
[ShortDescr]
Returns the starting relative virtual address (RVA) for this block of relocations.
[Description]
The VirtualAddress property returns the starting relative virtual address (RVA)
for this block of relocations. The offset of each relocation (the Address field
of the TJclPeRelocation record) is added to this value to form the actual RVA
where the relocation needs to be applied.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocEntry
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeRelocList = class (TJclPeImageBaseList)
[ShortDescr]
The TJclPeRelocList class represents the fix-up table of the image.
[Description]
The TJclPeRelocList class represents the fix-up table of the image. The fix-up
table contains entries for all fixups in the image. The fixup table is broken into
blocks of fixups. Each block represents the fixups for a 4K page. Each block is
represented as an instance of TJclPeRelocEntry in the Items property.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property AllItems[Index: Integer]: TJclPeRelocation read GetAllItems;
[ShortDescr]
Provides indexed access to the complete list of individual address fix ups.
[Description]
The AllItems property provides (zero based) indexed access to the complete list
of individual address fix ups. See the description of TJclPeRelocation for more
information on how to interpret the returned record.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property AllItemCount: Integer read FAllItemCount;
[ShortDescr]
Contains the number of entries in the Items property.
[Description]
Contains the number of entries in the Items property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Items[Index: Integer]: TJclPeRelocEntry read GetItems; default;
[ShortDescr]
Provides indexed access to the fixup blocks.
[Description]
The Items property provides (zero-based) indexed access to the fixup blocks. Each
entry represents a 4 KB block within the image and contains a list of address
fix-ups. To directly access these individual fix-up use the AllItems property. To
learn the number of items in the list readthe Count property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Relocation Section\TJclPeRelocList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeDebugList = class (TJclPeImageBaseList)
[ShortDescr]
The TJclPeDebugList represent the debug section of an image file.
[Description]
The TJclPeDebugList represent the debug section of an image file.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Debug Section\TJclPeDebugList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Items[Index: Integer]: TImageDebugDirectory read GetItems; default;
[ShortDescr]
Provides indexed access to the list of debug directories.
[Description]
The Items property provides (zero based) indexed access to the list of debug
directories maintained by the class. Each entry in the list describes a single
debug directory including it's locations, size and the type of debug information
it contains. For details about the contents of the returned TImageDebugDirectory
record look up IMAGE_DEBUG_DIRECTORY in the Platform SDK. To learn the number of
items in the list read the Count property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Debug Section\TJclPeDebugList
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeHeader = (JclPeHeader_Signature...JclPeHeader_NumberOfRvaAndSizes);
[ShortDescr]
TODO
[Enumeration]
Count=34
1=JclPeHeader_Signature=TODO
2=JclPeHeader_Machine=TODO
3=JclPeHeader_NumberOfSections=TODO
4=JclPeHeader_TimeDateStamp=TODO
5=JclPeHeader_PointerToSymbolTable=TODO
6=JclPeHeader_NumberOfSymbols=TODO
7=JclPeHeader_SizeOfOptionalHeader=TODO
8=JclPeHeader_Characteristics=TODO
9=JclPeHeader_Magic=TODO
10=JclPeHeader_LinkerVersion=TODO
11=JclPeHeader_SizeOfCode=TODO
12=JclPeHeader_SizeOfInitializedData=TODO
13=JclPeHeader_SizeOfUninitializedData=TODO
14=JclPeHeader_AddressOfEntryPoint=TODO
15=JclPeHeader_BaseOfCode=TODO
16=JclPeHeader_BaseOfData=TODO
17=JclPeHeader_ImageBase=TODO
18=JclPeHeader_SectionAlignment=TODO
19=JclPeHeader_FileAlignment=TODO
20=JclPeHeader_OperatingSystemVersion=TODO
21=JclPeHeader_ImageVersion=TODO
22=JclPeHeader_SubsystemVersion=TODO
23=JclPeHeader_Win32VersionValue=TODO
24=JclPeHeader_SizeOfImage=TODO
25=JclPeHeader_SizeOfHeaders=TODO
26=JclPeHeader_CheckSum=TODO
27=JclPeHeader_Subsystem=TODO
28=JclPeHeader_DllCharacteristics=TODO
29=JclPeHeader_SizeOfStackReserve=TODO
30=JclPeHeader_SizeOfStackCommit=TODO
31=JclPeHeader_SizeOfHeapReserve=TODO
32=JclPeHeader_SizeOfHeapCommit=TODO
33=JclPeHeader_LoaderFlags=TODO
34=JclPeHeader_NumberOfRvaAndSize=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclLoadConfig = (JclLoadConfig_Characteristics...JclLoadConfig_Reserved);
[ShortDescr]
TODO
[Enumeration]
Count=17
1=JclLoadConfig_Characteristics=TODO
2=JclLoadConfig_TimeDateStamp=TODO
3=JclLoadConfig_Version=TODO
4=JclLoadConfig_GlobalFlagsClear=TODO
5=JclLoadConfig_GlobalFlagsSet=TODO
6=JclLoadConfig_CriticalSectionDefaultTimeout=TODO
7=JclLoadConfig_DeCommitFreeBlockThreshold=TODO
8=JclLoadConfig_DeCommitTotalFreeThreshold=TODO
9=JclLoadConfig_LockPrefixTable=TODO
10=JclLoadConfig_MaximumAllocationSize=TODO
11=JclLoadConfig_VirtualMemoryThreshold=TODO
12=JclLoadConfig_ProcessHeapFlags=TODO
13=JclLoadConfig_ProcessAffinityMask=TODO
14=JclLoadConfig_CSDVersion=TODO
15=JclLoadConfig_Reserved1=TODO
16=JclLoadConfig_EditList=TODO
17=JclLoadConfig_Reserved=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeFileProperties = record
  Size: DWORD;
  CreationTime: TDateTime;
  LastAccessTime: TDateTime;
  LastWriteTime: TDateTime;
  Attributes: Integer;
end;
[ShortDescr]
Record which contains some common attributes of an image file.
[Description]
Record which contains some common attributes of an image file.
[RecordFields]
Count=5
1=Size:DWORD=Size, in bytes, of the image file.
2=CreationTime:TDateTime=Date when the image file was created.
3=LastAccessTime:TDateTime=Date when the image file was last accessed.
4=LastWriteTime:TDateTime=Date when the image file was last written to.
5=Attributes:Integer=Attributes of the image file.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImageStatus = (stNotLoaded, stOk, stNotPE, stNotFound, stError);
[ShortDescr]
TJclPeImageStatus defines the various states a TJclPeImage instance can be in.
[Description]
TJclPeImageStatus defines the various states a TJclPeImage instance can be in.
[Enumeration]
Count=5
1=stNotLoaded=No image file is loaded. This is the status after creation and after clearing the instance.
2=stOk=An image file was succesfully loaded.
3=stNotPE=The most recently loaded file was not a valid PE image file.
4=stNotFound=The file coudln't be found.
5=stError=An unexpected error occured while loading a PE image file.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeImage = class (TObject)
[ShortDescr]
Abstraction of a portable executable file.
[Description]
The TJclPeImage class provides an abstraction of a portable executable (PE) file,
referred to throughout this documentation as simply image or PE file. PE is
the standard format for executable files on the Windows platform. This includes
files such as .exe, .dll and so forth. TJclPeImage allow you to easily read all
information contained in a PE file such as the functions it imports and/or exports.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(ANoExceptions: Boolean = False);
[ShortDescr]
Creates an instance of the TJclPeImage class.
[Description]
Creates an instance of the TJclPeImage class. Use the FileName property or
AttachLoadedModule method to attach the class to a specific image.
[Parameters]
Count=1
1=ANoExceptions:Boolean=Determines whether certain methods raise exceptions when
they encounter a failure. Currently this applies only to setting the FileName
property to an invalid filename or calling the AttachLoadedModule method with
an invalid parameter. 
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure AttachLoadedModule(const Handle: HMODULE);
[ShortDescr]
Attaches the TJclPeImage instance to an already loaded image.
[Description]
Attaches the TJclPeImage instance to an already loaded image. This causes the
currently loaded image to be discarded and the class to reinitialize itself to
the image specified by the Handle parameter.
[Parameters]
Count=1
1=Handle:HMODULE=Handle to the image you want to attach to.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CalculateCheckSum: DWORD;
[ShortDescr]
TODO
[Description]
TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function DirectoryEntryToData(Directory: Word): Pointer;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Directory:Word=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetSectionHeader(const SectionName: string; var Header: PImageSectionHeader): Boolean;
[ShortDescr]
Returns a pointer to the section header of the specified named section in the image.
[Description]
Returns a pointer to the section header of the specified named section in the image.
[Parameters]
Count=2
1=SectionName:string=Name of the section for which to retrieve the section header.
2=Header:PImageSectionHeader=Receives a pointer to a TImageSectionHeader record which
describes the section header of the requested section. If the method fails the
contents of this parameter are undefined.
[Result]
If the function succeeds it returns True, otherwise it returns False. 
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetSectionName(const Header: PImageSectionHeader): string;
[ShortDescr]
Returns the name of the section specified by the Header parameter.
[Description]
Returns the name of the section specified by the Header parameter.
[Parameters]
Count=1
1=Header:PImageSectionHeader=Pointer to the section header record for which you
want to retrieve the name.
[Result]
If the function succeeds it returns the name of the specified section, otherwise
it returns an empty string.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function IsSystemImage: Boolean;
[ShortDescr]
Returns True if the image is a kernel mode executable.
[Description]
Returns True if the image is a kernel mode executable.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function RawToVa(Raw: DWORD): Pointer;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Raw:DWORD=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function RvaToSection(Rva: DWORD): PImageSectionHeader;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Rva:DWORD=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function RvaToVa(Rva: DWORD): Pointer;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Rva:DWORD=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function StatusOK: Boolean;
[ShortDescr]
Indicates whether the object is correctly initialized.
[Description]
Indicates whether the object is correctly initialized. That is, if it was
succesfully attached to a valid image file. If this poperty returns False you
should not use any of it's properties or methods until reinitialized using the
FileName property or the AttachLoadedModule method.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure TryGetNamesForOrdinalImports;
[ShortDescr]
Looks up the names of functions that we're imported by ordinal.
[Description]
The TryGetNamesForOrdinalImports method searches the export sections of each image
that it is linked against in an attempt to find the names of those functions that
were imported by ordinal instead of by name. See also the description of the
IndirectImportName property of the TJclPeImportFuncItem class and the same named
method in the TJclPeImportList class.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function VerifyCheckSum: Boolean;
[ShortDescr]
Verifies the checksum of a portable executable file.
[Description]
VerifyCheckSum verifies the correctness of the checksum of the image file.
[Result]
If the checksum is valid the method returns True, otherwise it returns False. Note
that 0 is considered a valid checksum.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function DebugTypeNames(DebugType: DWORD): string;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=DebugType:DWORD=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function DirectoryNames(Directory: Word): string;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Directory:Word=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function ExpandBySearchPath(const ModuleName, BasePath: string): TFileName;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=2
1=ModuleName:string=TODO
2=BasePath:string=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function HeaderNames(Index: TJclPeHeader): string;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Index:TJclPeHeader=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function LoadConfigNames(Index: TJclLoadConfig): string;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Index:TJclLoadConfig=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function ShortSectionInfo(Characteristics: DWORD): string;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=Characteristics:DWORD=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function StampToDateTime(TimeDateStamp: DWORD): TDateTime;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=TimeDateStamp:DWORD=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property AttachedImage: Boolean read FAttachedImage;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property DebugList: TJclPeDebugList read GetDebugList;
[ShortDescr]
Allows access to the debug section of the file.
[Description]
The DebugList property returns a TJclPeDebugList instance which allows access
to the debug section (.debug) of the loaded PE image file.
See <REF Target"Types\TJclPeDebugList">TJclPeDebugList</REF> for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Description: string read GetDescription;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Directories[Directory: Word]: TImageDataDirectory read GetDirectories;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property DirectoryExists[Directory: Word]: Boolean read GetDirectoryExists;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ExportList: TJclPeExportFuncList read GetExportList;
[ShortDescr]
Allows access to the export section of the image file.
[Description]
The ExportList property returns a TJclPeExportFuncList instance which allows
access to the export section (.edata) of the loaded PE image file.
See <REF Target"Types\TJclPeExportFuncList">TJclPeExportFuncList</REF> for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=TJclPeExportFuncList;Types\TJclPeExportFuncList
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileName: TFileName read FFileName write SetFileName;
[ShortDescr]
Name of the loaded PE image file.
[Description]
Read the FileName property to determine which PE image file is currently loaded.
Set FileName to load different image file. Note that depending on how the TJclPeImage
instance was constructed, loading an invalid image file may either raise an
exception or not. In any case the <REF>Status</REF> is updated to reflect success
or failure.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=Status
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileProperties: TJclPeFileProperties read GetFileProperties;
[ShortDescr]
Returns standard information about the file.
[Description]
The FileProperties property returns a TJclPeFileProperties record containing
standard (non PE specific) information about the loaded image file. This includes
it's size, creation time and attributes.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property HeaderValues[Index: TJclPeHeader]: string read GetHeaderValues;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImageSectionCount: Integer read GetImageSectionCount;
[ShortDescr]
Returns the number of sections in the PE image.
[Description]
The ImageSectionCount property returns the number of sections in the loaded
PE image file. The returned Count minus one, is the highest valid index into
the <REF>ImageSectionHeader</REF> and <REF>ImageSectionNames</REF> properties.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=2
1=ImageSectionNames
2=ImageSectionHeaders
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImageSectionHeaders[Index: Integer]: TImageSectionHeader read GetImageSectionHeaders;
[ShortDescr]
Returns the image section header of a specific section.
[Description]
The ImageSectionHeaders array property returns the section header of the section
indicated by the specified index. Valid indices are from 0 to <REF>ImageSectionCount</REF> - 1.
To retrieve the name of a section use the <REF>ImageSectionNames</REF> property.
For the interpretation of the fields in the returned header see the Platform SDK
and "Portable Executable and Common Object File Format Specification"
Revision 6.0 February 1999 in the MSDN library.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=2
1=ImageSectionCount
2=ImageSectionNames
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImageSectionNames[Index: Integer]: string read GetImageSectionNames;
[ShortDescr]
Returns the name of a specific section.
[Description]
The ImageSectionNames array property returns the name of the section indicated
by the index. Valid indices are from 0 to <REF>ImageSectionCount</REF> - 1. Returned names
are always 8 characters or shorter. Common names are ".reloc", ".text" and ".data".
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=2
1=ImageSectionCount
2=ImageSectionHeaders
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImageSectionNameFromRva[const Rva: DWORD]: string read GetImageSectionNameFromRva;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImportList: TJclPeImportList read GetImportList;
[ShortDescr]
Allows access to the import section.
[Description]
The ImportList property returns a TJclPeImportList instance which allows access
to the import section (.idata) of the loaded PE image file.
See <REF Target"..\Import Section\TJclPeImportList">TJclPeImportList</REF> for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property LoadConfigValues[Index: TJclLoadConfig]: string read GetLoadConfigValues;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property LoadedImage: TLoadedImage read FLoadedImage;
[ShortDescr]
Returns information about the loaded image.
[Description]
Returns a TLoadedImage record which contains information about the loaded PE image
file. See the LOADED_IMAGE topic in the Platform SDK for a description of this
record.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property MappedAddress: DWORD read GetMappedAddress;
[ShortDescr]
Returns the base address at which the file was loaded.
[Description]
The MappedAddress property returns the (virtual) base address at which the PE
file was loaded. The returned value is identical to <REF>LoadedImage</REF>.MappedAddress
and is only provided for convenience (it's often used field).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=LoadedImage
<DECL>--------------------------------------------------------------------------
[Declaration]
property OptionalHeader: TImageOptionalHeader read GetOptionalHeader;
[ShortDescr]
Allows access to the image optional header.
[Description]
Read OptionalHeader to gain access to the optional header of the loaded PE file.
The optional header contains fields standard to all COFF implementations, Windows
specific fields such as the target subsytem and allows access to all data
directories. Generally speaking, it provides all information for the Windows
loader to successfully load the image. Note that not all valid PE image files
have an optional header. Specifically an object file (.obj) doesn't necessarily
have one (that's why it's called optional). See "Portable Executable and Common
Object File Format Specification" Revision 6.0 February 1999 in the MSDN library
for a description of the fields in the returned record.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property RelocationList: TJclPeRelocList read GetRelocationList;
[ShortDescr]
Allows access to the relocations section of the PE file.
[Description]
The RelocationList property returns a TJclPeRelocList instance which allows
access to the relocations section (.reloc) of the loaded PE file. This is also
known as the fix up table.
See REF Target"..\Relocations section\TJclPeRelocList">TJclPeRelocList</REF> for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ResourceList: TJclPeRootResourceList read GetResourceList;
[ShortDescr]
Allows access to the resource section of the PE file.
[Description]
Returns a TJclPeRootResourceList instance which allows access to the resource
section (.rsrc) of the loaded PE file.
See <REF Target"..\Resource Section\TJclPeRootResourceList">TJclPeRootResourceList</REF> for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Status: TJclPeImageStatus read FStatus;
[ShortDescr]
Returns the status of the TJclPeImage instance.
[Description]
Read status to determine the state of the TJclPeImage instance. Valid states include
not loaded, ok, not a valid PE file and so forth. Depending on the NoExceptions
parameter of the constructor, methods of the TJclPeImage may or may not raise
exceptions. Therefor unless you check this property it is unknown whether or not
the TJclPeImage contains valid data.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property UnusedHeaderBytes: TImageDataDirectory read GetUnusedHeaderBytes;
[ShortDescr]
Returns the offset and size of the part of the PE header which is currently unused.
[Description]
Returns the offset and size of the part of the PE header which is currently unused.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property VersionInfo: TJclFileVersionInfo read GetVersionInfo;
[ShortDescr]
Returns file version information.
[Description]
VersionInfo returns a TJclFileVersionInfo instance which allows you to read the
version information, if any, of the image file. If the file doesn't have a file
version resource reading this property returns nil.
See <REF Target"..\..\..\Files and IO\Files and Directories\TJclFileVersionInfo">TJclFileVersionInfo</REF> for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property VersionInfoAvailable: Boolean read GetVersionInfoAvailable;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\TJclPeImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPePackageInfo = class (TObject)
[ShortDescr]
Allows you to obtain information about Delphi packages.
[Description]
The TJclPackageInfo class allows you to obtain information about Delphi packages
such as which units it contains and which packages it requires.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(ALibHandle: THandle);
[ShortDescr]
Creates and initializes an instance of TJclPePackageInfo.
[Description]
Creates and initializes an instance of TJclPePackageInfo.
[Parameters]
Count=1
1=ALibHandle:THandle=Handle to a loaded package. For example, the handle returned
by the LoadPackage RTL function.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function PackageModuleTypeToString(Flags: Integer): string;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function PackageOptionsToString(Flags: Integer): string;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function ProducerToString(Flags: Integer): string;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function UnitInfoFlagsToString(UnitFlags: Byte): string;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Contains: TStrings read FContains;
[ShortDescr]
Returns a list containing the names of all units contained in the package.
[Description]
Returns a list containing the names of all units contained in the package.
Note that the returned TStrings instance remains owned by the class so you should
never free it.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ContainsCount: Integer read GetContainsCount;
[ShortDescr]
Returns the number of items in the ContainsNames property.
[Description]
Returns the number of items in the ContainsNames property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ContainsNames[Index: Integer]: string read GetContainsNames;
[ShortDescr]
Provides indexed access to the list of unit names contained in the package.
[Description]
The ContainsNames property provides (zero based) indexed access to the list of
unit names contained in the package. To learn the number of items in the list
read the ContainsCount property. To read the flags associated with the contained
unit read ContainsFlags property using the same index.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ContainsFlags[Index: Integer]: Byte read GetContainsFlags;
[ShortDescr]
Flags associated with a particular contained unit.
[Description]
The ContainsFlags property provides (zero based) indexed access to the list of
flags associated with the list of units contained in the package. This list is
parallel to the ContainsNames property; to determine the flags associated with
ContainsNames[I] read ContainsFalgs[I]. The valid values are defined in SysUtils<br>
  <table>
  <tr valign="top"><th align=left width=25%>Flag</th><th align=left width=75%>Description</th></tr>
  <tr valign="top"><td width=25%>ufMainUnit</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>ufPackageUnit</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>ufWeakUnit</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>ufOrgWeakUnit</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>ufImplicitUnit</td><td width=25%>TODO</td></tr>
  </table>
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Description: string read FDescription;
[ShortDescr]
Returns the description string for the package as it appears in the package resource.
[Description]
Returns the description string for the package as it appears in the package resource.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Flags: Integer read FFlags;
[ShortDescr]
Returns a set of flags for the package encoded as a set of bits.
[Description]
Returns a set of flags for the package. The valid values for this property are
defined in SysUtils<br>
  <table>
  <tr valign="top"><th align=left width=25%>Flag</th><th align=left width=75%>Description</th></tr>
  <tr valign="top"><td width=25%>pfNeverBuild</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfDesignOnly</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfRunOnly</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfIgnoreDupUnits</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfModuleTypeMask</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfExeModule</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfPackageModule</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfProducerMask</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfV3Produced</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfProducerUndefined</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfBCB4Produced</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfDelphi4Produced</td><td width=25%>TODO</td></tr>
  <tr valign="top"><td width=25%>pfLibraryModule</td><td width=25%>TODO</td></tr>
  </table>
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Requires: TStrings read FRequires;
[ShortDescr]
Returns a list of package names that the package requires.
[Description]
Returns a list of package names that the package requires. Note that the returned
TStrings object remains owned by the class so you should never free it.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property RequiresCount: Integer read GetRequiresCount;
[ShortDescr]
Returns the number of items in the RequiresNames property.
[Description]
Returns the number of items in the RequiresNames property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property RequiresNames[Index: Integer]: string read GetRequiresNames;
[ShortDescr]
Provides indexed access to the list of package names that are required by the package.
[Description]
The RequiresNames property provides (zero based) indexed access to the list of
package names that are required by the package. To learn the number of items in
the list read the RequiresCount property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPePackageInfo
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeBorImage = class (TJclPeImage)
[ShortDescr]
Specialisation of TJclPeImage for Borland produced images.
[Description]
The TJclPeBorImage class is a specialisation of TJclPeImage which allows access
to information contained in the image file which is specific, and therefore unique,
to images produced by a Borland linker.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPeBorImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function FreeLibHandle: Boolean;
[ShortDescr]
Closes the library handle as returned by the LibHandle property.
[Description]
Closes the library handle as returned by the LibHandle property.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPeBorImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IsTD32DebugPresent: Boolean read GetIsTD32DebugPresent;
[ShortDescr]
Returns whether or not the image contains TD32 symbolic debugging information.
[Description]
The IsTD32DebugPresent returns whether or not the image contains TD32 symbolic
debugging information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPeBorImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IsBorlandImage: Boolean read FIsBorlandImage;
[ShortDescr]
Returns whether or not the image is an image produced by a Borland linker.
[Description]
Returns whether or not the image is an image produced by a Borland linker.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPeBorImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property IsPackage: Boolean read FIsPackage;
[ShortDescr]
Returns whether the image is Borland package file.
[Description]
Returns whether the image is Borland package file.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPeBorImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property LibHandle: THandle read GetLibHandle;
[ShortDescr]
Returns a handle to the loaded library (image).
[Description]
The LibHandle property loads the image file as a datafile (if necessary) and
returns a handle to the loaded image. Use the FreeLibHandle method when you no
longer need the handle.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPeBorImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property PackageInfo: TJclPePackageInfo read GetPackageInfo;
[ShortDescr]
Returns an object which provides additional information about a package.
[Description]
Returns an instance of TJclPePackageInfo which provides additional information
about the image such as the units contained in it. This property is only valid
if the image is a package.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Borland Delphi Specific\TJclPeBorImage
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeNameSearchOptions = set of TJclPeNameSearchOption;
TJclPeNameSearchOption = (seImports, seDelayImports, seBoundImports, seExports);
[ShortDescr]
Flags that determine which parts of an image is searched.
[Description]
TJclPeNameSearchOptions is a set of flags used by the TJclPeNameSearch class to
determine the scope of the search. In other word, these flags determine which
parts of an image is searched.
[Enumeration]
Count=4
1=seImports=Searches the import section of the image.
2=seDelayImports=Searches the delay loaded imports.
3=seBoundImports=Searches the bound imports.
4=seExports=Searches the export section of the image.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeNameSearchNotifyEvent = procedure (Sender: TObject; PeImage: TJclPeImage; var Process: Boolean) of object;
[ShortDescr]
Event which is fired immediately before a new image is searched.
[Description]
Event exposed by the TJclPeNameSearch class which is fired each time the search
continues it search in a new image. The event is fired immediately before the
image is searched and you can use it, for example, to display user progress
information or to exclude certain images from being searched.
[Parameters]
Count=3
1=Sender:TObject=Reference to the TJclPeNameSearch instance for which the event is fired.
2=PeImage:TJclPeImage=Reference to a TJclPeImage instance which is used to perform the search.
3=Process:Boolean=Determines whether or not to process the image file. If you set Process to
False the image is skipped, if you set it to True the image is searched.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeNameSearchFoundEvent = procedure (Sender: TObject; const FileName: TFileName;
  const FunctionName: string; Option: TJclPeNameSearchOption) of object;
[ShortDescr]
Event which is fired each time a name is found.
[Description]
Event exposed by the TJclPeNameSearch class which is fired each time the class
finds the name it's searching for.
[Parameters]
Count=4
1=Sender:TObject=Reference to the TJclPeNameSearch instance for which the event is fired.
2=FileName:TFileName=Name of the image file in which the function was found.
3=FunctionName:string=The name of the function as it was found in the image file.
Depending on which options you specified this name may be slightly different than
the one being searched for (for example, in case).
4=Option:TJclPeNameSearchOption=Indicates in which section of the image file the
function was found(for example, import or export section). This is quarenteed to
be one of the options you specified when you started the search.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeNameSearch = class (TThread)
[ShortDescr]
Searches a set of image files for occurences of a specific function.
[Description]
TJclPeNameSearch is a thread class which allows you to search through a set of
image files for occurences of a specific function. You can search through both
the import and export section ofthe image files and through a mask specify
exactly which image files are to be searched. Occurences are reported back through
an event. 
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search\TJclPeNameSearch
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(const FunctionName, Path: string; Options: TJclPeNameSearchOptions = [seImports, seExports]);
[ShortDescr]
Creates and initializes an instance of the TJclPeNameSearch class.
[Description]
Creates and initializes an instance of the TJclPeNameSearch class. The thread
starts off in the suspended state and has to be explicitly resumed using the
Start method to actually start the search.
[Parameters]
Count=3
1=FunctionName:string=The name of the function you want to search for.
2=Path:string=The Path parameter is the directory and file name mask, including
wildcard characters that define the image files to be searched.
For example, 'c:\winnt\system32\*.dll' specifies all dynamic link libraries
in the c:\winnt\system32 directory. Using the OnProcessFile event you can perform
additional filtering of image files.
3=Options:TJclPeNameSearchOptions=Set of options specifying which sections of
the image files are to be searched (for example, import and/or export sections).
See the description of TJclPeNameSearchOptions for more information.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search\TJclPeNameSearch
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Start;
[ShortDescr]
Starts the search operation.
[Description]
Starts the search operation. To temporarily pause the search set the Suspended
property to True. To cancel the search set the Terminated property to True.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search\TJclPeNameSearch
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property OnFound: TJclPeNameSearchFoundEvent read FOnFound write FOnFound;
[ShortDescr]
Event fired whenever an occurence of the specified function is found.
[Description]
Event which is fired whenever an occurence of the specified function is found.
Note that the event is automatically synchronized with the main thread by firing
it through the standard TThread method Synchronize.
See the description of TJclPeNameSearchFoundEvent for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search\TJclPeNameSearch
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property OnProcessFile: TJclPeNameSearchNotifyEvent read FOnProcessFile write FOnProcessFile;
[ShortDescr]
Event which is fired whenever the class is about to search an image file.
[Description]
Event which is fired whenever the class is about to search an image file.
Note that the event is automatically synchronized with the main thread by firing
it through the standard TThread method Synchronize.
See the description of TJclPeNameSearchNotifyEvent for more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Threaded Search\TJclPeNameSearch
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclRebaseImageInfo = record
  OldImageSize: DWORD;
  OldImageBase: DWORD;
  NewImageSize: DWORD;
  NewImageBase: DWORD;
end;
[ShortDescr]
Record used by the PeRebaseImage function to return information about a rebase operation.
[Description]
Record used by the PeRebaseImage function to return information about
a rebase operation.
[RecordFields]
Count=4
1=OldImageSize:DWORD=Size of the image before the rebase.
2=OldImageBase:DWORD=Base address of the image before the rebase.
3=NewImageSize:DWORD=Size of the image after the rebase.
4=NewImageBase:DWORD=Base address of the image after the rebase.
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=PeRebaseImage;..\PeRebaseImage
<DECL>--------------------------------------------------------------------------
[Declaration]
function IsValidPeFile(const FileName: TFileName): Boolean;
[ShortDescr]
Determines whether a file is a valid portable executable file.
[Description]
IsValidPeFile determines whether the specified file is a valid portable executable file.
Examples of valid PE files are Win32 .exe, .dll and .obj files as generated by
Delphi or any other Win32 compiler.
[Parameters]
Count=1
1=FileName:TFileName=Fully qualified filename of the executable image file to test.
[Result]
If the specified file is a valid portable executable file the function returns
True, otherwise it returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Miscellaneous
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeCreateNameHintTable(const FileName: TFileName): Boolean;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=FileName:TFileName=TODO
[Result]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Miscellaneous
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeRebaseImage(const ImageName: TFileName; NewBase: DWORD = 0; TimeStamp: DWORD = 0; MaxNewSize: DWORD = 0): <REF Target"Types\TJclRebaseImageInfo">TJclRebaseImageInfo</REF>;
[ShortDescr]
Rebases an image.
[Description]
PeRebaseImage modifies the load address of the specified image. Rebasing all the
images an application uses in such a manner that they can all be loaded at their
preferred base address (load address) can dramatically reduce the load time of
your application. This function rebases only a single image but it can easily be
extended to allow rebasing of an entire application. Note that this function can
take a long time to complete. Also, this function is not thread-safe.
[Parameters]
Count=4
1=ImageName:TFileName=Filename of the image file to rebase.
2=NewBase:DWORD=New base address for the executable module. If 0 is specified (the
default) the base address is calculated according to the suggestion in the Platform SDK
documentation for the RebaseImage API (address is selected based on the first
character of the module name). Note that in this case if you rebase multiple
images with the same initial character they will all be rebased to the same address.
3=TimeStamp:DWORD=Specifies the new time stamp for the image. The value must be
represented in the number of seconds elapsed since midnight (00:00:00),
January 1, 1970, Universal Coordinated Time, according to the system clock.
4=MaxNewSize:DWORD=Maximum allowed size of the rebased image. If 0 is
specified (the default) the maximum size is unlimited.
[Result]
The function returns a <REF Target"Types\TJclRebaseImageInfo">TJclRebaseImageInfo</REF>
record which contains information about the rebase such as the new base address
and image size. If the function fails it raises an EWin32Error exception.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Miscellaneous
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=TJclRebaseImageInfo;Types\TJclRebaseImageInfo
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure PeUpdateCheckSum(const AFileName: TFileName);
[ShortDescr]
Updates the image checksum.
[Description]
PeUpdateCheckSum updates the specified image's checksum value. If the routine
succeeds it writes the calculated checksum back to the image file. If it fails
it raises an exception.
[Parameters]
Count=1
1=AFileName:TFileName=The name of the image file for which to update the checksum.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Miscellaneous
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeDoesExportFunction(const FileName: TFileName; const FunctionName: string; Options: TJclSmartCompOptions = []): Boolean;
[ShortDescr]
Tests whether an image exports a specific fuction.
[Description]
PeDoesExportFunction determines whether the specified image file exports a function
by the specified name. The Options parameter allows you to fine tune the search.
[Parameters]
Count=3
1=FileName:TFileName=Filename of the image file to test.
2=FunctionName:string=Name of the function to search for.
3=Options:TJclSmartCompOptions=Optional parameter which determine various aspects
of the search such as case sensitivity.
See <REF Target"Smart Name Comparison\Types\TJclSmartCompOptions">TJclSmartCompOptions</REF>
for more detailed information.
[Result]
If the image exports the specified function the function returns True, otherwise
it returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
[SeeAlso]
Count=1
1=TJclSmartCompOptions;Smart Name Comparison\Types\TJclSmartCompOptions
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeIsExportFunctionForwardedEx(const FileName: TFileName; const FunctionName: string; var ForwardedName: string; Options: TJclSmartCompOptions = []): Boolean;
[ShortDescr]
Tests whether a function is forwarded.
[Description]
PeIsExportFunctionForwardedEx detemines whether the specified function is forwarded
to another image/function or not. If it is forwarded the ForwardedName parameter
receives the location to which the function is forwarded.
[Parameters]
Count=4
1=FileName:TFileName=Filename of the image file to test.
2=FunctionName:string=Name of the function to test.
3=ForwardedName:string=If the specified function is forwarded this parameters
receives a string of the format DLL.FunctionName which is where the function is
forwarded to.
4=Options:TJclSmartCompOptions=Optional parameters which determine various aspects
of the functionname matching such as case sensitivity.
See <REF Target"Smart Name Comparison\Types\TJclSmartCompOptions">TJclSmartCompOptions</REF>
for more detailed information.
[Result]
If the specified function is forwarded to another module the function returns True,
otherwise it returns False. In the latter case the contents of the ForwardedName
parameter is undefined.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeIsExportFunctionForwarded(const FileName: TFileName; const FunctionName: string; Options: TJclSmartCompOptions = []): Boolean;
[ShortDescr]
Tests whether a function is forwarded.
[Description]
PeIsExportFunctionForwardedEx detemines whether the specified function is forwarded
to another image/function or not.
[Parameters]
Count=3
1=FileName:TFileName=Filename of the image file to test.
2=FunctionName:string=Name of the function to test.
3=Options:TJclSmartCompOptions=Optional parameters which determine various aspects
of the functionname matching such as case sensitivity.
See <REF Target"Smart Name Comparison\Types\TJclSmartCompOptions">TJclSmartCompOptions</REF>
for more detailed information.
[Result]
If the specified function is forwarded to another module the function returns True,
otherwise it returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeDoesImportFunction(const FileName: TFileName; const FunctionName: string;
  const LibraryName: string = ''; Options: TJclSmartCompOptions = []): Boolean;
[ShortDescr]
Tests whether an image imports a specific function.
[Description]
PeDoesImportFunction determines whether the specified image imports the specified
function from a specific library. If LibraryName is left empty the function test
if the image imports the function from any library.
[Parameters]
Count=4
1=FileName:TFileName=Filename of the image to test.
2=FunctionName:string=Name of the function to test.
3=LibraryName:string=Filename of the library from FunctionName is supposedly imported.
If this parameter is left empty the function simply tests if the function is imported
at all from any library. If however this parameter is specified the function only
returns True if the function is actually imported from the specified library.
4=Options:TJclSmartCompOptions=Optional parameter which determine various aspects
of the functionname matching such as case sensitivity.
See <REF Target"Smart Name Comparison\Types\TJclSmartCompOptions">TJclSmartCompOptions</REF>
for more detailed information.
[Result]
If the function is imported (optionally from the specified library) the function
returns True, otherwise ut returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeDoesImportLibrary(const FileName: TFileName; const LibraryName: string; Recursive: Boolean = False): Boolean;
[ShortDescr]
Tests whether an image is implicitly linked against a library.
[Description]
PeDoesImportLibrary determines whether the specified image implicitly links
against the specified library. Thus it tests whether the image imports anything
from the library.
[Parameters]
Count=3
1=FileName:TFileName=Filename of the image to test.
2=LibraryName:string=Name of the library to test against.
3=Recursive:Boolean=If False the function only tests for direct imports (library
A links directly against lbrary B). If True the function performs the test
recursively and therefore includes indirect imports (library A links against
library B which links against library C therefore library A links against library
C).
[Result]
If the image directly imports the library the function returns True, otherwise it
returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeImportedLibraries(const FileName: TFileName; LibrariesList: TStrings; Recursive: Boolean = False; FullPathName: Boolean = False): Boolean;
[ShortDescr]
Returns a list of all libraries an image imports.
[Description]
PeImportedLibraries returns a list of all libraries which the specified image
imports (implicitly links against).
[Parameters]
Count=4
1=FileName:TFileName=Filename of the image for which to retrieve an import list.
2=LibrariesList:TStrings=Receives the list of imported libraries.
3=Recursive:Boolean=If False the function only includes direct imports. If True
the function includes indirect imports as well (library A imports library B which
in turn imports library C and therefore library A indirectly imports library C).
4=FullPathName:Boolean=Determines whether the list of libraries includes the full
path of the image files.
[Result]
If the function succeeds it returns True, otherwise it returns False. In the
latter case the contents of the list is undefined.
[Notes]
Count=1
1=This function preserves the contents of the libraries list.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeImportedLibrariesArray(const FileName: TFileName; var LibrariesList: TJclStringArray; Recursive: Boolean = False; FullPathName: Boolean = False): Boolean;
[ShortDescr]
Returns a list of all libraries an image imports.
[Description]
PeImportedLibrariesArray returns a list of all libraries which the specified image
imports (implicitly links against). Note that the list only includes direct imports.
If Lib1 imports Lib2 and Lib2 imports Lib3 then Lib3 will not be included in the
listing for Lib1.
[Parameters]
Count=4
1=FileName:TFileName=Filename of the image for which to retrieve an import list.
2=LibrariesList:TJclStringArray=Receives the list of imported libraries.
3=Recursive:Boolean=If False the function only includes direct imports. If True
the function includes indirect imports as well (library A imports library B which
in turn imports library C and therefore library A indirectly imports library C).
4=FullPathName:Boolean=Determines whether the list of libraries includes the full
path of the image files.
[Result]
If the function succeeds it returns True, otherwise it returns False. In the
latter case the contents of the list is undefined.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeImportedFunctions(const FileName: TFileName; FunctionsList: TStrings;
  const LibraryName: string = ''; IncludeLibNames: Boolean = False: Boolean;
[ShortDescr]
Returns a list of all directly imported functions for an image.
[Description]
PeImportedFunctions returns a list of all directly imported functions by the
specified image.
[Parameters]
Count=4
1=FileName:TFileName=Filename of the image for which to list the imports.
2=FunctionsList:TStrings=Receives the list of imported functions. Note that the
contents of the list on entry are preserved.
3=LibraryName:string=Name of the from which to list imports. If this parameters
is empty (the default) all imports from all libraries are included. If on the
other hand a library is specified only imports from that library are included.
Note that the library name must include the extension.
4=IncludeLibNames:Boolean=If True the imported functions are prefixed by the name
of the library from which they are imported. The library and function name are
separated by a dot ('.').
[Result]
If the function succeeds it returns True, otherwise it returns False. In the
latter case the contents of the list are undefined. Note that even in the case
of success, the list may not contain any entries (the image may not import anything).
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeImportedFunctionsArray(const FileName: TFileName; var FunctionsList: TJclStringArray;
  const LibraryName: string = ''; IncludeLibNames: Boolean= False): Boolean;
[ShortDescr]
Returns a list of all directly imported functions for an image.
[Description]
PeImportedFunctions returns a list of all directly imported functions by the
specified image.
[Parameters]
Count=4
1=FileName:TFileName=Filename of the image for which to list the imports.
2=FunctionsList:TJclStringArrqay=Receives the list of imported functions.
3=LibraryName:string=Name of the from which to list imports. If this parameters
is empty (the default) all imports from all libraries are included. If on the
other hand a library is specified only imports from that library are included.
Note that the library name must include the extension.
4=IncludeLibNames:Boolean=If True the imported functions are prefixed by the name
of the library from which they are imported. The library and function name are
separated by a dot ('.').
[Result]
If the function succeeds it returns True, otherwise it returns False. Note that in
the case of success, the list may not contain any entries (the image may not import
anything).
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeExportedFunctions(const FileName: TFileName; FunctionsList: TStrings): Boolean;
[ShortDescr]
Returns a list of exported function from an image.
[Description]
PeExportedFunctions returns a list of functions exported from the specified image.
[Parameters]
Count=2
1=FileName:TFileName=FileName of the image for which to receive a list of exports.
2=FunctionsList:TStrings=Receives the list of exported functions. Note that the
contents of the list upon entry are preserved.
[Result]
If the function succeeds it returns True, otherwise it returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeExportedFunctionsArray(const FileName: TFileName; var FunctionsList: TJclStringArray): Boolean;
[ShortDescr]
Returns a list of exported function from an image.
[Description]
PeExportedFunctions returns a list of functions exported from the specified image.
[Parameters]
Count=2
1=FileName:TFileName=FileName of the image for which to receive a list of exports.
2=FunctionsList:TJclStringArray=Receives the list of exported functions.
[Result]
If the function succeeds it returns True, otherwise it returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeGetNtHeaders(const FileName: TFileName; var NtHeaders: TImageNtHeaders): Boolean;
[ShortDescr]
Returns a TImageNtHeaders record for an image.
[Description]
PeGetNtHeaders returns a TImageNtHeaders record for the specified image. A TImageNtHeaders
record contains a lot of standard information about the image included in all
valid portable executable files. For information about the interpretation of this
record see "Portable Executable and Common Object File Format Specification",
Revision 6.0 February 1999 in the MSDN library.
[Parameters]
Count=2
1=FileName:TFileName=Filename of the image for which to retrieve the TImageNtHeader.
2=NtHeaders:TImageNtHeaders=Receives the TImageNtHeaders record.
[Result]
If the function succeeds it returns True, otherwise it returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeVerifyCheckSum(const FileName: TFileName): Boolean;
[ShortDescr]
Verifies the checksum of a portable executable file.
[Description]
PeVerifyCheckSum verifies the correctness of the checksum of the specified image.
The image must be a valid portable executable file. Note that 0 is considered a
valid checksum.
[Parameters]
Count=1
1=FileName:TFileName=Filename of the image whose checksum to verify.
[Result]
If the image's checksum is correct the function returns True, otherwise it
returns False.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Simple PE Helpers
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeMapImgNtHeaders(const BaseAddress: Pointer): PImageNtHeaders;
[ShortDescr]
Returns a pointer to the TImageNtHeaders record.
[Description]
Returns a pointer to the TImageNtHeaders record for the image whose address is
specified as the BaseAddress parameter. This record contains a signature for the
PE image ('PE#0#0') and two subrecords for the COFF header and optional header.
[Parameters]
Count=1
1=BaseAddress:Pointer=Base address at which the image file for which you want
to retrieve the TImageNtHeader record is mapped. This address is returned by
the MapAndLoad and LoadLibrary API functions.
[Result]
If the function succeeds it returns a pointer to the requested TImageNtHeaders
record. If the function fails it returns nil. Note that the returned pointer is
only valid as long as the image file remains mapped in memory.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeMapImgLibraryName(const BaseAddress: Pointer): string;
[ShortDescr]
Returns the name of the image file mapped at the specified address.
[Description]
Returns the name of the image file mapped at the specified address.
[Parameters]
Count=1
1=BaseAddress:Pointer=Base address at which the image file for which you want
to retrieve the name is mapped. This address is returned by the MapAndLoad and
LoadLibrary API functions.
[Result]
If the function succeeds it returns the name of the image mapped at the specified
address. If the function fails it returns an empty string.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeMapImgSections(const NtHeaders: PImageNtHeaders): PImageSectionHeader;
[ShortDescr]
Returns a pointer to the header of the first section in an image.
[Description]
The PeMapImgSections function returns a pointer to a TImageSectionHeader record
which describes the first section in the image file specified (indirectly) by the
NtHeaders parameter. That pointer can be retrieved, for example, by using the
PeMapImgNtHeaders function. For an example of how to use this function to traverse
all the ections in an image see the implementation of the PeMapImgFindSection
function.
[Parameters]
Count=1
1=NtHeader:PImageNtHeaders=Pointer to the TImageNtHeaders record which specifies
the mapped image for which to retrieve the header of the first section.
[Result]
If the function succeeds it returns a pointer to the TImageSectionHeader of the
first section in the image. If the function fails it returns nil. Note that the
returned pointer is valid only as long as the image remains mapped in memory.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeMapImgFindSection(const NtHeaders: PImageNtHeaders; const SectionName: string): PImageSectionHeader;
[ShortDescr]
Searches the image, specified by NtHeaders, for a specific named section.
[Description]
Searches the image, specified by NtHeaders, for a specific named section.
[Parameters]
Count=2
1=NtHeaders:PImageNtHeaders=Pointer to the TImageNtHeaders record which specifies
the mapped image in which to search for a specific section.
2=SectionName:string=Name of the section to search for. Note that the search is
case insensitive.
[Result]
If the function finds the specified named section it returns a pointer to the
section header. If the function doesn't find the named section it returns nil.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeSectionStream = class (TCustomMemoryStream)
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines\TJclPeSectionStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(Instance: HMODULE; const ASectionName: string);
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=2
1=TODO:TODO=TODO
2=TODO:TODO=TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines\TJclPeSectionStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Write(const Buffer; Count: Longint): Longint; override;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=2
1=TODO:TODO=TODO
2=TODO:TODO=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines\TJclPeSectionStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Instance: HMODULE read FInstance;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines\TJclPeSectionStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property SectionHeader: TImageSectionHeader read FSectionHeader;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Mapped Image Routines\TJclPeSectionStream
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeMapImgHookItem = class (TObject)
[ShortDescr]
The TJclPeMapImgHookItem represents a single hooked API function.
[Description]
The TJclPeMapImgHookItem represents a single hooked API function. The class
provides detailed information about the hooked function, such as it's name and
the image it resides in, as well as methods to unhook the function. You perform
the initial hooking itself using the TJclPeMapImgHooks class.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHookItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Unhook: Boolean;
[ShortDescr]
Unhooks the function.
[Description]
Call the UnHook method to unhook the function represented by this TJclPeMapImgHookItem
instance. This will cause the import to revert to the state before the hooking took
place and will destroy the TJclPeMapImgHookItem instance on which the method was
invoked.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHookItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property BaseAddress: Pointer read FBaseAddress;
[ShortDescr]
Base address at which the image in which the hooked function resides, is mapped.
[Description]
Base address at which the image in which the hooked function resides, is mapped.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHookItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FunctionName: string read FFunctionName;
[ShortDescr]
Name of the hooked function.
[Description]
Name of the hooked function.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHookItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ModuleName: string read FModuleName;
[ShortDescr]
Name of the image in which the hooked function resides.
[Description]
Name of the image in which the hooked function resides.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHookItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property NewAddress: Pointer read FNewAddress;
[ShortDescr]
Address of the function that replaced the original, hooked function.
[Description]
Address of the function that replaced the original, hooked function.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHookItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property OriginalAddress: Pointer read FOriginalAddress;
[ShortDescr]
Address of the original, hooked funcion.
[Description]
Address of the original, hooked funcion.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHookItem
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeMapImgHooks = class (TObjectList)
[ShortDescr]
Provides hooking and unhooking of API functions.
[Description]
The TJclPeMapImgHooks provides the functionality to hook and unhook API functions
as well as manage a set of those hooks. The class automatically unhooks all functions
it manages when it is destroyed. The class does not allow you to hook a single
function more than once.
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function HookImport(Base: Pointer; const ModuleName, FunctionName: string; NewAddress: Pointer; var OriginalAddress: Pointer): Boolean;
[ShortDescr]
Hooks a imported function.
[Description]
The HookImports method hooks the specified function. That is, it replaces the
imported function with the one supplied. Thereafter all calls to the original
function anywhere in the application automatically call this new function. When
the hook is no longer needed you should unhook the function. Destroying the
TJclPeMapImgHooks instance automatically unhooks all functions it manages.
[Parameters]
Count=5
1=Base:Pointer=Base address at which the image, in which the function you want to
hook resides, is mapped.
2=ModuleName:string=Name of the image in which the function you want to hook resides.
3=FunctionName:string=Name of the function you want to hook.
4=NewAddress:Pointer=Address of the new function which should replace the original function.
5=OriginalAddress:Pointer=Upon success receives the address of the function which was hooked.
[Result]
If the function succeeds it returns True and adds an item representing the hooked
function to the list.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function IsWin9xDebugThunk(P: Pointer): Boolean;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=P:Pointer=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
class function ReplaceImport(Base: Pointer; ModuleName: string; FromProc, ToProc: Pointer): Boolean;
[ShortDescr]
Hooks an imported function by replacing it with the new function.
[Description]
Hooks an imported function by replacing it with the new function. Unlike the
HookImport function this class method does not add an entry representing the
hooked function to the list (how could it, being a class method!).
[Parameters]
Count=4
1=Base:Pointer=Base address at which the image, in which the function you want to
hook resides, is mapped.
2=ModuleName:string=Name of the image in which the function you want to hook resides.
3=FromProc:Pointer=Address of the function you want to hook.
4=ToProc:Pointer=Address of the function that is to replace the original function.
[Result]
If the function succeeds it returns True, otherwise it returns False.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Hallvard Vassbotn;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function UnhookByNewAddress(NewAddress: Pointer): Boolean;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=NewAddress:Pointer=TODO
[Result]
TODO
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Items[Index: Integer]: TJclPeMapImgHookItem read GetItems; default;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ItemFromOriginalAddress[OriginalAddress: Pointer]: TJclPeMapImgHookItem read GetItemFromOriginalAddress;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ItemFromNewAddress[NewAddress: Pointer]: TJclPeMapImgHookItem read GetItemFromNewAddress;
[ShortDescr]
TODO
[Description]
TODO
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\API Hooking\TJclPeMapImgHooks
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeDbgImgNtHeaders(ProcessHandle: THandle; BaseAddress: Pointer; var NtHeaders: TImageNtHeaders): Boolean;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=TODO:TODO=TODO
[Result]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Image access under debugger
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeDbgImgLibraryName(ProcessHandle: THandle; BaseAddress: Pointer; var Name: string): Boolean;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=TODO:TODO=TODO
[Result]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Image access under debugger
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclBorUmDescription = record
  Kind: TJclBorUmSymbolKind;
  Modifiers: TJclBorUmSymbolModifiers;
end;
[ShortDescr]
TODO
[Description]
TODO
[RecordFields]
Count=2
1=Kind:TJclBorUmSymbolKind=TODO
2=Modifiers:TJclBorUmSymbolModifiers=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclBorUmSymbolKind = (skData, skFunction, skConstructor, skDestructor, skRTTI, skVTable);
[ShortDescr]
TODO
[Description]
TODO
[Enumeration]
Count=6
1=skData=TODO
2=skFunction=TODO
3=skConstructor=TODO
4=skDestructor=TODO
5=skRTTI=TODO
6=skVTable=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclBorUmSymbolModifier = (smQualified, smLinkProc);
TJclBorUmSymbolModifiers = set of TJclBorUmSymbolModifier;
[ShortDescr]
TODO
[Description]
TODO
[Enumeration]
Count=2
1=smQualified=TODO
2=smLinkProc=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclBorUmResult = (urOk, urNotMangled, urMicrosoft, urError);
[ShortDescr]
TODO
[Description]
TODO
[Enumeration]
Count=4
1=urOk=TODO
2=urNotMangled=TODO
3=urMicrosoft=TODO
4=urError=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPeUmResult = (umNotMangled, umBorland, umMicrosoft);
[ShortDescr]
TODO
[Description]
TODO
[Enumeration]
Count=3
1=umNotMangled=TODO
2=umBorland=TODO
3=umMicrosoft=TODO
[Quick Info]
Kind=Type
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeBorUnmangleName(const Name: string; var Unmangled: string; var Description: TJclBorUmDescription; var BasePos: Integer): TJclBorUmResult; overload;
function PeBorUnmangleName(const Name: string; var Unmangled: string; var Description: TJclBorUmDescription): TJclBorUmResult; overload;
function PeBorUnmangleName(const Name: string; var Unmangled: string): TJclBorUmResult; overload;
function PeBorUnmangleName(const Name: string): string; overload;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=TODO:TODO=TODO
[Result]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeIsNameMangled(const Name: string): TJclPeUmResult;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=TODO:TODO=TODO
[Result]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PeUnmangleName(const Name: string; var Unmangled: string): TJclPeUmResult;
[ShortDescr]
TODO
[Description]
TODO
[Parameters]
Count=1
1=TODO:TODO=TODO
[Result]
TODO
[Quick Info]
Unit=JclPeImage
Category=Libraries, Processes and Threads
SubCat=Portable Executable File Format\Name unmangling
Author=Petr Vones;petr.v@mujmail.cz
Delphi=4,5