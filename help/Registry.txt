<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegDeleteKey(const Key: string);
[ShortDescr]
Deletes a registry key.
[Description]
RegDeleteKey deletes the specified key under HKEY_CLASSES_ROOT. Note that under
Windows 95 this also deletes al subkeys. On Windows NT however, the specified key
must be empty or the function will fail.
[Parameters]
Count=1
1=Key:string=Subkey of HKEY_CLASSES_ROOT to delete.
[Result]
If the function succeeds it returns ERROR_SUCCESS as defined in Windows.pas. If
it fails it returns a non-zero error code. You can use the Windows FormatMessage
API call to get a description for the error code.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegCreateKey(const Key, Value: string): Longint;
[ShortDescr]
Creates and initializes a key.
[Description]
RegCreateKey creates the specified key under the HKEY_CLASSES root and writes
the specified value to the default value of this key.
[Parameters]
Count=2
1=Key:string=Subkey of HKEY_CLASSES_ROOT to create.
2=Value:string=The value to write to the default value of the specified key.
[Result]
If the function succeeds it returns ERROR_SUCCESS as defined in Windows.pas. If
it fails it returns a non-zero error code. You can use the Windows FormatMessage
API call to get a description for the error code.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadBoolDef(RootKey: HKEY; const Key, Name: string; Def: Boolean): Boolean;
[ShortDescr]
Reads a boolean key from the registry.
[Description]
RegReadBool reads a single boolean value from the registry. If the function fails
it returns the value specified by Def.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Def:Boolean=The value to return in case of failure.
[Result]
The value of the specified key, or the specified default value in case of failure.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegReadIntegerDef
2=RegReadStringDef
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadIntegerDef(RootKey: HKEY; const Key, Name: string; Def: Integer): Integer;
[ShortDescr]
Reads an integer key from the registry.
[Description]
RegReadInteger reads a single integer value from the registry. If the function fails
it returns the specified default value.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Def:Integer=The value to return in case of failure.
[Result]
The value of the specified key, or the specified default value in case of failure.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegReadBoolDef
2=RegReadStringDef
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadStringDef(RootKey: HKEY; const Key, Name, Def: string): string;
[ShortDescr]
Reads a string key from the registry.
[Description]
RegReadString reads a single string value from the registry. If the function fails
it raises an ERegistryException exception.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Def:string=Value to return in case of failure.
[Result]
The value of the specified key, or the specified default value on failure.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegReadBool
2=RegReadIntegerDef
3=RegWriteBoolDef
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegDeleteEntry(RootKey: HKEY; const Key, Name: string);
[ShortDescr]
Deletes an entry from the registry.
[Description]
RegDeleteEntry deletes a single value from the registry.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to delete.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegWriteBool(RootKey: HKEY; const Key, Name: string; Value: Boolean);
[ShortDescr]
Writes a boolean key to the registry.
[Description]
RegWriteBool writes a single boolean value to the registry. If the function fails
it raises an ERegistryException exception. The specified Key must already exist.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to write.
4=Value:Boolean=Value to write.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=RegReadBool
2=RegReadInteger
3=RegReadString
4=RegWriteInteger
5=RegWriteString
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegWriteInteger(RootKey; HKEY; const Name: string; Value: Integer);
[ShortDescr]
Writes an integer key to the registry.
[Description]
RegWriteInteger writes a single integer value to the registry. If the function fails
it raises an ERegistryException exception. The specified Key must already exist.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to write.
4=Value:Integer=Value to write.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=RegReadBool
2=RegReadInteger
3=RegReadString
4=RegWriteBool
5=RegWriteString
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegWriteString(RootKey: HKEY; const Key, Name, Value: string);
[ShortDescr]
Writes a string key to the registry.
[Description]
RegWriteString writes a single string value to the registry. If the function fails
it raises an ERegistryException exception. The specified Key must already exist.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to write.
4=Value:string=Value to write.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=RegReadBool
2=RegReadInteger
3=RegReadString
4=RegWriteBool
5=RegWriteInteger
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadBool(RootKey: HKEY; const Key, Name: string): Boolean;
[ShortDescr]
Reads a boolean key from the registry.
[Description]
RegReadBool reads a single boolean value from the registry. If the function fails
it raises an ERegistryException exception.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
[Result]
The value of the specified key.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=RegReadInteger
2=RegReadString
3=RegWriteBool
4=RegWriteInteger
5=RegWriteString
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadInteger(RootKey: HKEY; const Key, Name: string): Integer;
[ShortDescr]
Reads an integer key from the registry.
[Description]
RegReadInteger reads a single integer value from the registry. If the function fails
it raises an ERegistryException exception.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
[Result]
The value of the specified key.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=RegReadBool
2=RegReadString
3=RegWriteBool
4=RegWriteInteger
5=RegWriteString
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadString(RootKey: HKEY; const Key, Name: string): string;
[ShortDescr]
Reads a string key from the registry.
[Description]
RegReadString reads a single string value from the registry. If the function fails
it raises an ERegistryException exception.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
[Result]
The value of the specified key.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=RegReadBool
2=RegReadInteger
3=RegWriteBool
4=RegWriteInteger
5=RegWriteString
<DECL>--------------------------------------------------------------------------
[Declaration]
function UnregisterAutoExec(ExecKind: TExecKind; const Path: string): Boolean;
[ShortDescr]
Unregisters the specified application for execution at logon.
[Description]
UnregisterAutoExec unregisters an application that was previously registered
for autoexecution with <REF>RegisterAutoExec</REF>. You can use this function
to remove an application that was registered as run always, or 'run once' if
you change your mind (before reboot). If a file is registered as 'run once' and
the system was rebooted there is no need to unregister because the system automatically
removes the entry from the registry.
[Parameters]
Count=2
1=ExecKind:TExecKind=Specifies how the file was registered. See <REF>TExecKind</REF> for more information.
2=Path:string=Fully qualified name of the executable file to unregister.
[Result]
If the function succeeds it returns True, otherwise it returns False. Note that
if the specified file does not exist in the registry the function returns True and
calling UnregisterAutoExec with ekServiceRun or ekServiceRunOnce on Windows NT/2000
always causes the function to return False (the file was not registered).
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegisterAutoExec
2=TExecKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegisterAutoExec(ExecKind: TExecKind; const Path: string): Boolean;
[ShortDescr]
Registers the specified application for execution at logon.
[Description]
RegisterAutoExec registers the file specified by Path in the system registry so
that it will automatically be executed by the system at the next logon. The
ExecKind parameter specifies the details about user vs. machine and once vs. always.
You can have an application executed once at the next logon (ekMachineRunOnce,
ekUserRunOnce) or at each logon (ekMachineRun, ekUserRun). The Machine and User
specify for 'all users' or the 'current user only' respectively. Note that except
for ekMachineRun and ekMachineRunOnce, all registered executables execute
asynchronously. The ekServiceRun and ekServiceRunOnce exist to simulate NT services
on Windows 9x and are probably of not much use. You can use the <REF>UnRegisterAutoExec</REF>
function to remove the entry for the registry when autoexecution is no longer
desired.
[Parameters]
Count=2
1=ExecKind:TExecKind=Specifies how to register the executable. See <REF>TExecKind</REF> for more information.
2=Path:string=Fully qualified name of an executable file to register for auto execution.
[Result]
If the function succeeds it returns True, otherwise it returns False. Note that
calling RegisterAutoExec with ekServiceRun or ekServiceRunOnce on Windows NT/2000
always causes the function to return False (the file is not registered).
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=UnregisterAutoExec
2=TExecKind
<DECL>--------------------------------------------------------------------------
[Declaration]
TExecKind = (ekMachineRun, ekMachineRunOnce, ekUserRun, ekUserRunOnce, ekServiceRun, ekServiceRunOnce);
[ShortDescr]
Enumeration used by <REF>RegisterAutoExec</REF> to specify the desired autoexec kind.
[Enumeration]
Count=6
1=ekMachineRun=Register under HKLM\..\Run. This will execute the specified file each time at logon for each user, until it is unregistered.
2=ekMachineRunOnce=Register under HKLM\..\RunOnce. This will execute the specified file once at the next logon independent of which user logs on.
3=ekUserRun=Register under HKCU\..\Run. This will execute the specified file each time at logon for the current user, until it is unregistered.
4=ekUserRunOnce=Register under HKCU\..\RunOnce. This will execute the specified file once at the next logon for the current user.
5=ekServiceRun=Register under HKCU\..\RunServices. Not supported on NT - simulates services on Windows 9x. The specified file is executed before each logon untl it is unregistered.
6=ekServiceRunOnce=Register under HKCU\..\RunServicesOnce. Not supported on NT - simulates services on Windows 9x. The specified file is executed once before the next logon.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=UnregisterAutoExec
2=RegisterAutoExec
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegGetValueNames(const RootKey: HKEY; const Key: string; const List: TStrings): Boolean;
[ShortDescr]
Reads a list of value names from the registry.
[Description]
Use RegGetValueNames to obtain a list of values contained in the specified registry key. 
If the function fails it raises an ERegistryException exception.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value list is located, relative to RootKey.
3=List:TStrings=This string list will contain the names of the values.
[Result]
If the function succeeds it returns TRUE. If it fails it returns FALSE.
[Example]
ValueNames := TStringList.Create;
try
  RegGetValueNames(HKEY_LOCAL_MACHINE, '\Software\Borland\Delphi\5.0\Compiling', ValueNames);
  for I := 0 to SubKeys.Count - 1 do 
    ShowMessage(ValueNames[I]);
finally
  ValueNames.Free;
end;
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Peter Friese;freter@gmx.net
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=RegGetKeyNames
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegGetKeyNames(const RootKey: HKEY; const Key: string; const List: TStrings): Boolean;
[ShortDescr]
Reads a list of key names from the registry.
[Description]
RegGetKeyNames returns a list of the specified key's subkeys.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value list is located, relative to RootKey.
3=List:TStrings=On exit, this string list will contain the names of the values. The caller 
is responsible for creating and destroying this list.
[Result]
If the function succeeds it returns TRUE. If it fails it returns FALSE.
[Example]
SubKeys := TStringList.Create;
try
  RegGetKeyNames(HKEY_LOCAL_MACHINE, '\Software\Borland\Delphi\5.0', SubKeys);
  for I := 0 to SubKeys.Count - 1 do 
    ShowMessage(SubKeys[I]);
finally
  SubKeys.Free;
end;
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Peter Friese;freter@gmx.net
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegGetValueNames
2=RegHasSubKeys
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegHasSubKeys(const RootKey: HKEY; const Key: string): Boolean;
[ShortDescr]
Checks whether the specified key has any children.
[Description]
RegHasSubKeys checks whether the subkey specified by Key has any subkeys. Use this 
function when you want to browse the registry hierarchically.
[Parameters]
Count=2
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) that is to be checked, relative to RootKey.
[Result]
If there are any children of the specified key, the function will return true. If 
there  are no children, it will return false.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Peter Friese;freter@gmx.net
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=RegGetKeyNamesNames