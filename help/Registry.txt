<DECL>--------------------------------------------------------------------------
[Declaration]
function RegDeleteKeyTree(const RootKey: HKEY; const Key: string): Boolean;
[ShortDescr]
Deletes a registry key including all subkeys.
[Description]
RegDeleteKeyTree deletes the specified key under RootKey. This function deletes
all subkeys first thus working also on Windows NT.
[Parameters]
Count=2
1=RootKey:HKEY=The rootkey from which to delete, one of the HKEY_XXX constants.
2=Key:string=Subkey of rootkey to delete.
[Result]
If the function succeeds it returns True else False.
The failure may happen somewhere in the recursive deletion leaving you with
only some remaining keys.
Think twice before using this function. It will happily delete vital parts
of the registry without complaining.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegCreateKey(const Key, Value: string): Longint;
[ShortDescr]
Creates and initializes a key.
[Description]
RegCreateKey creates the specified key under the HKEY_CLASSES_ROOT and writes
the specified value to the default value of this key.
[Parameters]
Count=2
1=Key:string=Subkey of HKEY_CLASSES_ROOT to create.
2=Value:string=The value to write to the default value of the specified key.
[Result]
If the function succeeds it returns ERROR_SUCCESS as defined in Windows.pas. If
it fails it returns a non-zero error code. You can use the Windows FormatMessage
API call to get a description for the error code.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadBoolDef(const RootKey: HKEY; const Key, Name: string; Def: Boolean): Boolean;
[ShortDescr]
Reads a boolean key from the registry.
[Description]
RegReadBool reads a single boolean value from the registry. If the function fails
it returns the value specified by Def. The function only accepts key values
of type REG_DWORD.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Def:Boolean=The value to return in case of failure.
[Result]
The value of the specified key, or the specified default value in case of failure.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadIntegerDef
2=RegReadStringDef
3=RegReadBinaryDef
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadIntegerDef(const RootKey: HKEY; const Key, Name: string; Def: Integer): Integer;
[ShortDescr]
Reads an integer key from the registry.
[Description]
RegReadInteger reads a single integer value from the registry. If the function fails
it returns the specified default value. The function accepts only key values of type
REG_DWORD.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Def:Integer=The value to return in case of failure.
[Result]
The value of the specified key, or the specified default value in case of failure.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadBoolDef
2=RegReadStringDef
3=RegReadBinaryDef
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadStringDef(const RootKey: HKEY; const Key, Name, Def: string): string;
[ShortDescr]
Reads a string key from the registry.
[Description]
RegReadStringDef reads a single string value from the registry. If the function fails
it returns the value specified by Def. The function accepts only key values of type
REG_SZ.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Def:string=Value to return in case of failure.
[Result]
The value of the specified key, or the specified default value on failure.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadBoolDef
2=RegReadIntegerDef
3=RegReadBinaryDef
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadBinaryDef(const RootKey: HKEY; const Key, Name: string; var Value; const ValueSize: Cardinal; const Def: Byte): Cardinal;
[ShortDescr]
Reads binary data from the registry.
[Description]
RegReadBinaryDef reads binary data from the registry. If the function fails
it fills all ValueSize bytes of Value with the specified default value.
Value is untyped to allow to hand in a variable of any type. ValueSize should
give the size of Value in bytes. The function accepts only key values of type
REG_BINARY.
[Parameters]
Count=6
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Value=Destination for the data of any type.
5=ValueSize:Cardinal=Size of Value in bytes.
6=Def:Byte=Value to fill value with in case of failure.
[Result]
The return value is not the data itself but the amount of data read.
The value is never bigger than ValueSize.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Stephane Fillon;sfillon@ifrance.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadBoolDef
2=RegReadIntegerDef
3=RegReadStringDef
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegDeleteEntry(const RootKey: HKEY; const Key, Name: string): Boolean;
[ShortDescr]
Deletes an entry from the registry.
[Description]
RegDeleteEntry deletes a single value from the registry.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to delete.
[Result]
The function return True if it succeeds else False. The most probable
failure reasons are a nonexistent key or name or insufficient permissions
on Windows NT.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegWriteBool(const RootKey: HKEY; const Key, Name: string; Value: Boolean);
[ShortDescr]
Writes a boolean key to the registry.
[Description]
RegWriteBool writes a single boolean value to the registry. If the function fails
it raises an EJclRegistryError exception. The specified Key must already exist.
The value is written as REG_DWORD of either 0 or 1.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to write.
4=Value:Boolean=Value to write.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegWriteInteger
2=RegWriteString
3=RegWriteBinary
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegWriteInteger(const RootKey; HKEY; const Name: string; Value: Integer);
[ShortDescr]
Writes an integer key to the registry.
[Description]
RegWriteInteger writes a single integer value to the registry. If the function fails
it raises an EJclRegistryError exception. The specified Key must already exist.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to write.
4=Value:Integer=Value to write.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegWriteBool
2=RegWriteString
3=RegWriteBinary
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegWriteString(const RootKey: HKEY; const Key, Name, Value: string);
[ShortDescr]
Writes a string key to the registry.
[Description]
RegWriteString writes a single string value to the registry. If the function fails
it raises an EJclRegistryError exception. The specified Key must already exist.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to write.
4=Value:string=Value to write.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegWriteBool
2=RegWriteInteger
3=RegWriteBinary
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RegWriteBinary(const RootKey: HKEY; const Key, Name: string; var Value; const ValueSize: Cardinal);
[ShortDescr]
Writes binary data to the registry.
[Description]
RegWriteBinary writes binary data to the registry. If the function fails
it raises an EJclRegistryError exception. The specified Key must already exist.
[Parameters]
Count=5
1=RootKey:HKEY=The rootkey which to write to, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to write.
4=Value=Value of any type to write.
5=ValueSize:Cardinal=Size of data to write.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Stephane Fillon;sfillon@ifrance.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegWriteBool
2=RegWriteInteger
3=RegWriteString
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadBool(const RootKey: HKEY; const Key, Name: string): Boolean;
[ShortDescr]
Reads a boolean key from the registry.
[Description]
RegReadBool reads a single boolean value from the registry. If the function fails
it raises an EJclRegistryError exception.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
[Result]
The value of the specified key.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadInteger
2=RegReadString
3=RegReadBinary
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadInteger(const RootKey: HKEY; const Key, Name: string): Integer;
[ShortDescr]
Reads an integer key from the registry.
[Description]
RegReadInteger reads a single integer value from the registry. If the function fails
it raises an EJclRegistryError exception.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
[Result]
The value of the specified key.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadBool
2=RegReadString
3=RegReadBinary
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadString(const RootKey: HKEY; const Key, Name: string): string;
[ShortDescr]
Reads a string key from the registry.
[Description]
RegReadString reads a single string value from the registry. If the function fails
it raises an EJclRegistryError exception.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
[Result]
The value of the specified key.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadBool
2=RegReadInteger
3=RegReadBinary
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegReadBinary(const RootKey: HKEY; const Key, Name: string; var Value; const ValueSize: Cardinal): Cardinal;
[ShortDescr]
Reads binary data from the registry.
[Description]
RegReadBinary reads binary data from the registry. 
Value is untyped to allow to hand in a variable of any type. ValueSize should
give the size of Value in bytes. The function accepts only key values of type
REG_BINARY. If the function fails it raises an EJclRegistryError exception.
[Parameters]
Count=5
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value is located, relative to RootKey.
3=Name:string=Name of the value to read.
4=Value=Destination for the data of any type.
5=ValueSize:Cardinal=Size of Value in bytes.
[Result]
The return value is not the data itself but the amount of data read.
The value is never bigger than ValueSize.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Stephane Fillon;sfillon@ifrance.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=RegReadBool
2=RegReadInteger
3=RegReadString
<DECL>--------------------------------------------------------------------------
[Declaration]
function UnregisterAutoExec(ExecKind: TExecKind; const Name: string): Boolean;
[ShortDescr]
Unregisters the specified application for execution at logon.
[Description]
UnregisterAutoExec unregisters an application that is registered for autoexecution.
You can use this function to remove an application that was registered as run always,
or 'run once' if you change your mind (before reboot). If a file is registered
as 'run once' and the system was rebooted there is no need to unregister because the
system automatically removes the entry from the registry.
[Parameters]
Count=2
1=ExecKind:TExecKind=Specifies how the file was registered. See <REF>TExecKind</REF> for more information.
2=Name:string=Name of registry value to delete.
[Result]
The return value is that of a <REF>RegDeleteEntry</REF> except for
calling UnregisterAutoExec with ekServiceRun or ekServiceRunOnce on Windows NT/2000
which causes the function to return False and do nothing.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegisterAutoExec
2=TExecKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegisterAutoExec(ExecKind: TExecKind; const Name, Path: string): Boolean;
[ShortDescr]
Registers the specified application for execution at logon.
[Description]
RegisterAutoExec registers the file specified by Path in the system registry so
that it will automatically be executed by the system at the next logon. The
ExecKind parameter specifies the details about user vs. machine and once vs. always.
You can have an application executed once at the next logon (ekMachineRunOnce,
ekUserRunOnce) or at each logon (ekMachineRun, ekUserRun). The Machine and User
specify for 'all users' or the 'current user only' respectively. Note that except
for ekMachineRun and ekMachineRunOnce, all registered executables execute
asynchronously. The ekServiceRun and ekServiceRunOnce exist to simulate NT services
on Windows 9x and are probably of not much use. You can use the <REF>UnregisterAutoExec</REF>
function to remove the entry for the registry when autoexecution is no longer
desired.
[Parameters]
Count=3
1=ExecKind:TExecKind=Specifies how to register the executable. See <REF>TExecKind</REF> for more information.
2=Name:string=Name of the registry value to add.
3=Path:string=The command line of an executable file including command line parameters to register for auto execution.
[Result]
If the function succeeds it returns True, otherwise it returns False. Note that
calling RegisterAutoExec with ekServiceRun or ekServiceRunOnce on Windows NT/2000
always causes the function to return False (the file is not registered).
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=UnregisterAutoExec
2=TExecKind
<DECL>--------------------------------------------------------------------------
[Declaration]
TExecKind = (ekMachineRun, ekMachineRunOnce, ekUserRun, ekUserRunOnce, ekServiceRun, ekServiceRunOnce);
[ShortDescr]
Enumeration used by <REF>RegisterAutoExec</REF> to specify the desired autoexec kind.
[Enumeration]
Count=6
1=ekMachineRun=Register under HKLM\..\Run. This will execute the specified file each time at logon for each user, until it is unregistered.
2=ekMachineRunOnce=Register under HKLM\..\RunOnce. This will execute the specified file once at the next logon independent of which user logs on.
3=ekUserRun=Register under HKCU\..\Run. This will execute the specified file each time at logon for the current user, until it is unregistered.
4=ekUserRunOnce=Register under HKCU\..\RunOnce. This will execute the specified file once at the next logon for the current user.
5=ekServiceRun=Register under HKCU\..\RunServices. Not supported on NT - simulates services on Windows 9x. The specified file is executed before each logon untl it is unregistered.
6=ekServiceRunOnce=Register under HKCU\..\RunServicesOnce. Not supported on NT - simulates services on Windows 9x. The specified file is executed once before the next logon.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=UnregisterAutoExec
2=RegisterAutoExec
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegGetValueNames(const RootKey: HKEY; const Key: string; const List: TStrings): Boolean;
[ShortDescr]
Reads a list of value names from the registry.
[Description]
Use RegGetValueNames to obtain a list of values contained in the specified registry key.
The string list is cleared before the values are added.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value list is located, relative to RootKey.
3=List:TStrings=This string list will contain the names of the values.
[Result]
If the function succeeds it returns True. If it fails it returns False.
Failure is normally caused by either a nonexistent key or insufficient
permissions on Windows NT.
No values gives success not failure.
[Example]
ValueNames := TStringList.Create;
RegGetValueNames(HKEY_LOCAL_MACHINE, '\Software\Borland\Delphi\5.0\Compiling', ValueNames);
for I := 0 to SubKeys.Count - 1 do 
  ShowMessage(ValueNames[I]);
ValueNames.Free;
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Peter Friese;freter@gmx.net
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=RegGetKeyNames
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegGetKeyNames(const RootKey: HKEY; const Key: string; const List: TStrings): Boolean;
[ShortDescr]
Reads a list of key names from the registry.
[Description]
RegGetKeyNames returns a list of the specified key's subkeys.
The string list is cleared before the values are added.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) where the desired value list is located, relative to RootKey.
3=List:TStrings=On exit, this string list will contain the names of the values. The caller 
is responsible for creating and destroying this list.
[Result]
If the function succeeds it returns True. If it fails it returns False.
Failure is normally caused by either a nonexistent key or insufficient
permissions on Windows NT.
No subkeys gives success not failure.
[Example]
SubKeys := TStringList.Create;
RegGetKeyNames(HKEY_LOCAL_MACHINE, '\Software\Borland\Delphi\5.0', SubKeys);
for I := 0 to SubKeys.Count - 1 do 
  ShowMessage(SubKeys[I]);
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Peter Friese;freter@gmx.net
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegGetValueNames
2=RegHasSubKeys
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegHasSubKeys(const RootKey: HKEY; const Key: string): Boolean;
[ShortDescr]
Checks whether the specified key has any children.
[Description]
RegHasSubKeys checks whether the subkey specified by Key has any subkeys. Use this 
function when you want to browse the registry hierarchically.
[Parameters]
Count=2
1=RootKey:HKEY=The rootkey from which to read, one of the HKEY_XXX constants.
2=Key:string=The key (path) that is to be checked, relative to RootKey.
[Result]
If there are any children of the specified key, the function will return True. 
If there are no children, it will return False.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Peter Friese;freter@gmx.net
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegGetKeyNames
2=RegGetValueNames
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegSaveList(const RootKey: HKEY; const Key: string; const ListName: string; const Items: TStrings): Boolean;
[ShortDescr]
Saves a stringlist to the registry.
[Description]
The list of strings is saved in the registry as under the key 
"RootKey\Key\ListName" with each string stored as registry value named 
"1", "2", etc. The number of items in the list is stored as DWORD value 
'Items'.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey to write the list to, one of the HKEY_XXX constants.
2=Key:string=The key (path) to write the list to, relative to RootKey.
3=ListName:string=Name of the subkey relative to Key to write the list to.
4=Items:TStrings=List of the items to store in the registry.
[Result]
The function returns True if the key "RootKey\Key\ListName" could be
created False otherwise.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=RegLoadList
2=RegDelList
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegLoadList(const RootKey: HKEY; const Key: string; const ListName: string; const SaveTo: TStrings): Boolean;
[ShortDescr]
Reads a stringlist from the registry.
[Description]
RegLoadList reads a list of strings from the registry which was stored 
with <REF>RegSaveList</REF>. The function expects to find a DWORD value
named 'Items' under the key "RootKey\Key\ListName" and reads in the amount 
of entries stored therein.
[Parameters]
Count=4
1=RootKey:HKEY=The rootkey to read the list from, one of the HKEY_XXX constants.
2=Key:string=The key (path) to read the list from, relative to RootKey.
3=ListName:string=Name of the subkey relative to Key to read the list from.
4=SaveTo:TStrings=List of the items to load from the registry.
[Result]
The function returns True if a list with at least one element is read in.
If 'Items' does not exist the function throws an exception.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegSaveList
2=RegDelList
<DECL>--------------------------------------------------------------------------
[Declaration]
function RegDelList(const RootKey: HKEY; const Key: string; const ListName: string): Boolean;
[ShortDescr]
Deletes a stringlist from the registry.
[Description]
RegDelList deletes a list of strings from the registry which was stored 
with <REF>RegSaveList</REF>. The function expects to find a DWORD value
named 'Items' under the key "RootKey\Key\ListName" and deletes the values 
named "1", "2", etc.
If 'Items' is negative then nothing is deleted.
[Parameters]
Count=3
1=RootKey:HKEY=The rootkey to delete the list from, one of the HKEY_XXX constants.
2=Key:string=The key (path) to delete the list from, relative to RootKey.
3=ListName:string=Name of the subkey relative to Key to delete the list from.
[Result]
The function returns True if it finds a value named 'Items' and all the 
values of the list False otherwise. If the number of items is 0 then
'Items' is deleted, but the function returns False.
[Quick Info]
BCB=3,4,5
Unit=JclRegistry
Category=Registry and Ini files
SubCat=Registry
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=RegSaveList
2=RegLoadList
