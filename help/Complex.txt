<DECL>--------------------------------------------------------------------------
[Declaration]
TJclComplex = class (TObject)
[ShortDescr]
TJclComplex implements various operations with complex numbers.
[Description]
TJclComplex is designated to provide complex numbers computations for your
applications. It supports both rectangular and polar number representations.
All the operations are divided into groups as follow:
  <li>basic arithmetics;
  <li>natural logarithmic and exponential functions;
  <li>trigonometric functions;
  <li>hyperbolic trigonometric functions;
  <li>complex Bessel functions;
  <li>various miscellaneous routines.<br>
All the methods could be used in two ways. Firstly you can use the methods 
with the prefix "C", like CAdd or CLn to perform the operation over the
object itself, i.e. after using such methods the value of the object itself
will be changed. Using these methods gives you the opportunity to use quite a
convenient method of coding the sequential calculations like this:
  MyComplex.Add(4,3).Mul(2,5).Ln.AsString;
The other way is two use the subset of methods with "CNew" prefix. They do the
same computations but as the result they create a new object of TComplex type.
It might be useful in situations when you'd like to remain your object intact
and get ther result in a separate object. Please note that such an approach
requires a very attentive coding style when you need to destroy every object
after every "CNew*" method invocation.
[Quick Info]
Kind=Object
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TComplexKind = (crRectangular, crPolar)
[ShortDescr]
Enumeration specifies the way of representing a complex numer using either
rectangular representation or polar coordinates.
[Enumeration]
Count=2
1=crRectangular=the parameters specified in a constructor or any other method
are of the rectangular representation.
2=crPolar=the parameters specified in a constructor or any other method
represent the number in polar coordinates.
[Quick Info]
Kind=Type
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FracLength: Byte;
[ShortDescr]
Determines the precision used in formatting the value of the complex number.
[Description]
Use FracLength to set the number of digits beyond the decimal point that
the value should be formatted to before rounding begins. FracLength affects
the format of the floating-point value when it is displayed using properties <REF>AsString</REF> or <REF>AsPolarString</REF>,
not the actual floating-point
value that is stored in the complex number structures.
The default value of FracLength is 8 decimal places.<br>
[Notes]
Count=1
1=FracLength must be greater less or equal to 18.
Trying to set FracLength to a value greater than 18 changes the value of
FracLength to 18.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create;
constructor Create(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]);
[ShortDescr]
Creates a new TComplex object.
[Description]
Call create to construct a complex number object either equal to (0,0) or
filled with the values provided in X and Y parameters.
[Parameters]
Count=3
1=X:Float=The real part in the rectangular representation or radius in polar coordinates.
2=Y:Float=The imaginary part in the rectangular representation or angle (in grads) in polar coordinates.
3=ComplexType:TComplexKind=<I>Optional.</I> Represents the type of the complex number to be create.
[Notes]
Count=2
1=All the calculations with complex numbers are performed with their rectangular
representation members, except those that requires polar coordinates instead
like exponential functions for instance.
2=The results of the calculations as well as the value of the complex number
itself might be obtained in either rectangular or polar representation at any
time using <REF Target"..\Properties\AsString">AsString</REF> or <REF Target"..\Properties\AsString">AsPolarString</REF> respectively.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=1
1=TComplexKind;..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
property RealPart: Float;
[ShortDescr]
Specifies the value of the real part of the complex number i.e. X value
in the pair of (X;Y).
[Description]
Use RealPart property to obtain the value of the real part of the
complex number i.e. X value in the pair of (X;Y).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=3
1=ImaginaryPart
2=Radius
3=Angle
<DECL>--------------------------------------------------------------------------
[Declaration]
property ImaginaryPart: Float;
[ShortDescr]
Specifies the value of the imaginary part of the complex number i.e. Y value
in the pair of (X;Y).
[Description]
Use ImaginaryPart property to obtain the value of the imaginary part of the
complex number i.e. Y value in the pair of (X;Y).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=3
1=RealPart
2=Radius
3=Angle
<DECL>--------------------------------------------------------------------------
[Declaration]
property Radius: Float;
[ShortDescr]
Specifies the value of the radius in polar coordinates representation i.e. r value
in the pair of (r;theta).
[Description]
Use Radius property to obtain the value of the radius in polar coordinates
representation of the complex number, i.e. r value in the pair of (r;theta).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=3
1=RealPart
2=ImaginaryPart
3=Angle
<DECL>--------------------------------------------------------------------------
[Declaration]
property Angle: Float;
[ShortDescr]
Specifies the value of the angle in polar coordinates representation of the
complex number, i.e. theta value in the pair of (r;theta).
[Description]
Use Angle property to obtain the value of the angle in polar coordinates
representation of the complex number, i.e. theta value in the pair of (r;theta).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=3
1=RealPart
2=ImaginaryPart
3=Radius
<DECL>--------------------------------------------------------------------------
[Declaration]
property AsString: Float;
[ShortDescr]
AsString converts the value of the complex number to a string.
[Description]
Use AsString property to obtain a string representation of the complex number
formatted according to the canonical form of complex numbers in rectangular
representation. <REF>FracLength</REF> property is used to determine the
precision of float parts of the complex number. For example if your complex
number is (5.2345355; -3.599) and FracLength=2 you will get the
following string as the result of calling AsString:<br><p align=center>5.23-3.60i</p>
Also you might use this property to assign the value of a
string to the complex number object like this:<p align=center>
MyComplex.AsString := '-5.3453-3.543i'</p> The string provided should be represent
a complex number in its canonical rectangular form like this: x+yi, where
x and y are either positive or negative or zero floating values and i is the
constant text part. If eiter x or y is equal to zero, the corresponding part
of the complex number can be omitted.<br>If the object is unable to parse the
string provided then EJclMathError exception will be raised.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=2
1=AsPolarString
2=FracLength;..\Properties\FracLength
<DECL>--------------------------------------------------------------------------
[Declaration]
property AsPolarString: Float;
[ShortDescr]
AsPolarString converts the value of the complex number to a string with a pair
of complex number's polar coordinates.
[Description]
Use AsPolarString property to obtain a string representation of the complex number
formatted according to the canonical form of complex numbers in polar coordinates
representation. <REF>FracLength</REF> property is used to determine the
precision of float parts of the complex number. For example if your complex
number is (5.2345355; -3.599) and FracLength=2 you will get the
following string as the result of calling AsString:<br><p align=center>5.23-CIS(3.60)</p>
Here CIS(theta) = COS(theta) + SIN(theta)*i<br>
Also you might use this property to assign the value of a
string to the complex number object like this:<p align=center>
MyComplex.AsPolarString := '-5.3453-CIS(3.543)'</p>
The string provided should be represent
a complex number in its canonical polar coordinates form like this: r+CIS(theta), where
r and theta are either positive or negative or zero floating values.
If eiter r or theta is equal to zero, the corresponding part
of the complex number can be omitted.<br>If the object is unable to parse the
string provided then EJclMathError exception will be raised.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=2
1=AsString
2=FracLength;..\Properties\FracLength
<DECL>--------------------------------------------------------------------------
[Declaration]
function Assign(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Assign the value of (X;Y) to the complex number object using ComplexType
representation.
[Description]
Use Assing method to set the value of your complex number object to (X;Y). ComplexType
parameter is used to determine whether floating-point parameters represents (X;Y)
or (r;theta) pair of values.
[Parameters]
Count=3
1=X:Float=The real part in the rectangular representation or radius in polar coordinates.
2=Y:Float=The imaginary part in the rectangular representation or angle (in grads) in polar coordinates.
3=ComplexType:TComplexKind=<I>Optional.</I> Represents the type the floating-point parameters above.
[Result]
Method Assing returns complex number object itself.
[Notes]
Count=2
1=To assign a complex number the value of zero use <REF>AssignZero</REF> method instead.
2=To assign a complex number the value of 1 ("complex unit") use <REF>AssignOne</REF> method instead.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=3
1=TComplexKind;..\..\Types\TComplexKind
2=AssignZero
3=AssignOne
<DECL>--------------------------------------------------------------------------
[Declaration]
function AssignOne: TJclComplex;
[ShortDescr]
Assign the value of (1;0) to the complex number object.
[Description]
Use AssingOne method to set the value of your complex number object to 1
("complex unit"). The call to AssignOne is equal to the following: Assign(1, 0).
[Result]
Method AssingOne returns the complex number object itself.
[Notes]
Count=2
1=To assign a complex number the value of zero use <REF>AssignZero</REF> method instead.
2=To assign a complex number any value that differs from 1 or 0 use <REF>Assign</REF> method instead.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=3
1=TComplexKind;..\..\Types\TComplexKind
2=Assign
3=AssignZero
<DECL>--------------------------------------------------------------------------
[Declaration]
function AssignZero: TJclComplex;
[ShortDescr]
Assign the value of (0;0) to the complex number object.
[Description]
Use AssingOne method to set the value of your complex number object to zero
The call to AssignZero is equal to the following: Assign(0, 0). Also if you
call the constructor <REF>Create</REF> omitting the parameters this method
will be invoked automatically.
[Result]
Method AssingZero returns the complex number object itself.
[Notes]
Count=2
1=To assign a complex number the value of 1 ("complex unit") use <REF>AssignOne</REF> method instead.
2=To assign a complex number any value that differs from 1 or 0 use <REF>Assign</REF> method instead.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
[SeeAlso]
Count=4
1=Create
2=TComplexKind;..\..\Types\TComplexKind
3=Assign
4=AssignOne
<DECL>--------------------------------------------------------------------------
[Declaration]
function Duplicate: TJclComplex;
[ShortDescr]
Creates a new object of TJclComplex type and assign the value of the calling object to it.
[Description]
Use Duplicate method to create a new object of TJclComplex type and assign
the value of the calling object to it.
[Result]
Method Duplicate returns the newly created complex number object.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Alexei Koudinov;kudinov@vlink.ru
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CAdd(AddValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CAdd(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Adds the value given by AddValue or X and Y parameters to the value
of the current complex number object.
[Parameters]
Count=4
1=AddValue:TJclComplex=The complex number that should be added to the value
of the object.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that should be added to the value
of the object.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that should be added to the value
of the object.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CAdd method to add the value of the complex number provided to the
value of the calling object itself. The complex number to be added could be
set either as an object of TJclComplex type or a pair of its values (X;Y).
[Notes]
Count=2
1=The addition of the complex numbers is performed according to the following
formula: <I>(X<sub>1</sub>;Y<sub>1</sub>) + (X<sub>2</sub>;Y<sub>2</sub>) = (X<sub>1</sub>+X<sub>2</sub>;Y<sub>1</sub>+Y<sub>2</sub>)</I>.
2=For leaving the value of the calling object intact use <REF>CNewAdd</REF>
method to create a new resulting object of TJclComplex type.
[Result]
Method CAdd returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CNewAdd
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CDiv(DivValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CDiv(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Divide the value of the current complex number object by the value given by
DivValue or X and Y parameters.
[Parameters]
Count=4
1=DivValue:TJclComplex=The complex number that is the denominator for the operation.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the denominator for the operation.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the denominator for the operation.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CDiv method to perform a division operation where the cureent complex
number object is a numerator and the value provided through either X and Y
or DivValue parameters is a denominator. The complex number to be divided by could be
set either as an object of TJclComplex type or a pair of its values (X;Y).
[Notes]
Count=2
1=The division of the complex numbers is performed according to the following
formula: <I>
(X<sub>1</sub>;Y<sub>1</sub>) / (X<sub>2</sub>;Y<sub>2</sub>) = [(X<sub>1</sub>
*X<sub>2</sub>+Y<sub>1</sub>*Y<sub>2</sub>)/(X<sub>2</sub><sup>2</sup>+Y<sub>2</sub><sup>2</sup>);
(Y<sub>1</sub>*X<sub>2</sub>-X<sub>1</sub>*Y<sub>2</sub>)/
(X<sub>2</sub><sup>2</sup>+Y<sub>2</sub><sup>2</sup>)]</I>.
2=For leaving the value of the calling object intact use <REF>CNewDiv</REF>
method to create a new resulting object of TJclComplex type.
[Result]
Method CDiv returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CNewDiv
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CMul(MulValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CMul(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Multiply the value of the current complex number object by the value given by
MulValue or X and Y parameters.
[Parameters]
Count=4
1=MulValue:TJclComplex=The complex number that is the second multiplier.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the second multiplier.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the second multiplier.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CMul method to perform a multiplication operation where the cureent complex
number object is the first and the value provided through either X and Y
or DivValue parameters is the second multiplier. The complex number to be
multiplied by could be set either as an object of TJclComplex type or a pair
of its values (X;Y).
[Notes]
Count=3
1=The multiplication of the complex numbers is performed according to the following
formula: <I>
(X<sub>1</sub>;Y<sub>1</sub>) * (X<sub>2</sub>;Y<sub>2</sub>) = (X<sub>1</sub>
*X<sub>2</sub>-Y<sub>1</sub>*Y<sub>2</sub>;
X<sub>1</sub>*Y<sub>2</sub>+Y<sub>1</sub>*X<sub>2</sub>)</I>.
2=Note that for complex numbers the operations <I>Z<sub>1</sub>*Z<sub>2</sub></I> and <I>Z<sub>2</sub>*Z<sub>1</sub></I>
give different results and cannot substitute each other.
3=For leaving the value of the calling object intact use <REF>CNewMul</REF>
method to create a new resulting object of TJclComplex type.
[Result]
Method CMul returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CNewMul
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CSub(SubValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CSub(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Subtract the value given by MulValue or X and Y parameters from the value of
the current complex number object.
[Parameters]
Count=4
1=SubValue:TJclComplex=The complex number that is the subtrahend.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the subtrahend.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the subtrahend.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CSub method to perform a subtraction operation where the cureent complex
number object is the minuend and the value provided through either X and Y
or DivValue parameters is the subtrahend. The complex number to be
subtracted could be set either as an object of TJclComplex type or a pair
of its values (X;Y).
[Notes]
Count=2
1=The subtraction of the complex numbers is performed according to the following
formula: <I>(X<sub>1</sub>;Y<sub>1</sub>) - (X<sub>2</sub>;Y<sub>2</sub>) = (X<sub>1</sub>-X<sub>2</sub>;Y<sub>1</sub>-Y<sub>2</sub>)</I>.
2=For leaving the value of the calling object intact use <REF>CNewSub</REF>
method to create a new resulting object of TJclComplex type.
[Result]
Method CSub returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CNewSub
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewAdd(AddValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CNewAdd(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Adds the value given by AddValue or X and Y parameters to the value
of the current complex number object and creates a new resulting object of TJclComplex type.
[Parameters]
Count=4
1=AddValue:TJclComplex=The complex number that should be added to the value
of the object.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that should be added to the value
of the object.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that should be added to the value
of the object.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CNewAdd method to add the value of the complex number provided to the
value of the calling object and to create a new resulting object of
TJclComplex type. The complex number to be added could be
set either as an object of TJclComplex type or a pair of its values (X;Y).
[Notes]
Count=2
1=The addition of the complex numbers is performed according to the following
formula: <I>(X<sub>1</sub>;Y<sub>1</sub>) + (X<sub>2</sub>;Y<sub>2</sub>) = (X<sub>1</sub>+X<sub>2</sub>;Y<sub>1</sub>+Y<sub>2</sub>)</I>.
2=For changing the value of the calling object instead of creating a new object
of TJclComplex type use <REF>CAdd</REF> method.
[Result]
Method CNewAdd returns a newly created object of TJclComplex type that contains
the value of the addition.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CAdd
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewDiv(DivValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CNewDiv(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Divide the value of the current complex number object by the value given by
DivValue or X and Y parameters and creates a new resulting object of TJclComplex type.
[Parameters]
Count=4
1=DivValue:TJclComplex=The complex number that is the denominator for the operation.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the denominator for the operation.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the denominator for the operation.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CDiv method to perform a division operation where the cureent complex
number object is a numerator and the value provided through either X and Y
or DivValue parameters is a denominator and to create a resulting object of
TJclComplex type. The complex number to be divided by could be
set either as an object of TJclComplex type or a pair of its values (X;Y).
[Notes]
Count=2
1=The division of the complex numbers is performed according to the following
formula: <I>
(X<sub>1</sub>;Y<sub>1</sub>) / (X<sub>2</sub>;Y<sub>2</sub>) = [(X<sub>1</sub>
*X<sub>2</sub>+Y<sub>1</sub>*Y<sub>2</sub>)/(X<sub>2</sub><sup>2</sup>+Y<sub>2</sub><sup>2</sup>);
(Y<sub>1</sub>*X<sub>2</sub>-X<sub>1</sub>*Y<sub>2</sub>)/
(X<sub>2</sub><sup>2</sup>+Y<sub>2</sub><sup>2</sup>)]</I>.
2=For changing the value of the calling object instead of creating a resulting
object of TJclComplex type use <REF>CDiv</REF> method.
[Result]
Method CNewDiv returns a newly created object of TJclComplex type that contains
the value of the division.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CDiv
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewMul(MulValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CNewMul(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Multiply the value of the current complex number object by the value given by
MulValue or X and Y parameters and creates a new resulting object of TJclComplex type.
[Parameters]
Count=4
1=MulValue:TJclComplex=The complex number that is the second multiplier.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the second multiplier.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the second multiplier.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CMul method to perform a multiplication operation where the cureent complex
number object is the first and the value provided through either X and Y
or DivValue parameters is the second multiplier and to create a resulting object of
TJclComplex type. The complex number to be multiplied by could be set either as
an object of TJclComplex type or a pair of its values (X;Y).
[Notes]
Count=3
1=The multiplication of the complex numbers is performed according to the following
formula: <I>
(X<sub>1</sub>;Y<sub>1</sub>) * (X<sub>2</sub>;Y<sub>2</sub>) = (X<sub>1</sub>
*X<sub>2</sub>-Y<sub>1</sub>*Y<sub>2</sub>;
X<sub>1</sub>*Y<sub>2</sub>+Y<sub>1</sub>*X<sub>2</sub>)</I>.
2=Note that for complex numbers the operations <I>Z<sub>1</sub>*Z<sub>2</sub></I> and <I>Z<sub>2</sub>*Z<sub>1</sub></I>
give different results and cannot substitute each other.
3=For changing the value of the calling object instead of creating a resulting
object of TJclComplex type use <REF>CMul</REF> method.
[Result]
Method CNewMul returns a newly created object of TJclComplex type that contains
the value of the multiplication.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CMul
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewSub(SubValue: <REF Target"..\TJclComplex">TJclComplex</REF>): TJclComplex;
function CNewSub(X, Y: Float; [ComplexType: <REF Target"..\..\Types\TComplexKind">TComplexKind</REF>]): TJclComplex;
[ShortDescr]
Subtract the value given by MulValue or X and Y parameters from the value of
the current complex number object and creates a new resulting object of TJclComplex type.
[Parameters]
Count=4
1=SubValue:TJclComplex=The complex number that is the subtrahend.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the subtrahend.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the subtrahend.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Description]
Use CSub method to perform a subtraction operation where the cureent complex
number object is the minuend and the value provided through either X and Y
or DivValue parameters is the subtrahend and to create a resulting object of
TJclComplex type. The complex number to be subtracted could be set either as
an object of TJclComplex type or a pair of its values (X;Y).
[Notes]
Count=2
1=The subtraction of the complex numbers is performed according to the following
formula: <I>(X<sub>1</sub>;Y<sub>1</sub>) - (X<sub>2</sub>;Y<sub>2</sub>) = (X<sub>1</sub>-X<sub>2</sub>;Y<sub>1</sub>-Y<sub>2</sub>)</I>.
2=For changing the value of the calling object instead of creating a resulting
object of TJclComplex type use <REF>CSub</REF> method.
[Result]
Method CNewSub returns a newly created object of TJclComplex type that contains
the value of the subtraction.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=3
1=CSub
2=TJclComplex; ..\TJclComplex
3=TCompexType; ..\..\Types\TComplexKind
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNeg: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Multiply the current value of the complex number object by a complex negative one.
[Description]
Use CNeg method to perform a negative transformation of the value of the current complex
number object i.e. to multiply it by a complex negative one. The method changes
the value of the current object, returning its reference.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewNeg</REF> method.
[Result]
Method CNeg returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=2
1=CNewNeg
2=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewNeg: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Multiply the current value of the complex number object by a complex negative one
and creates a new resulting complex number object.
[Description]
Use CNewNeg method to perform a negative transformation of the value of the current complex
number object i.e. to multiply it by a complex negative one and create a new resulting
object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling complex number object instead of creating
a new one use <REF>CNeg</REF> method.
[Result]
Method CNewNeg returns a newly created object of TJclComplex type that contains
the value of the negation.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=2
1=CNeg
2=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CConjugate: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Transform the value of the calling object of TJclComplex type into a conjugated
complex number value.
[Description]
Use CConjugate method to obtain a conjugate to the current value of the complex number object
complex number. The method changes the value of the current object, returning its reference.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewConjugate</REF> method.
[Result]
Method CConjugate returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=2
1=CNewConjugate
2=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewConjugate: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Transform the value of the calling object of TJclComplex type into a conjugated
complex number value and creates a new resulting complex number object.
[Description]
Use CNewConjugate method to obtain a conjugate to the current value of the complex number object
complex number.
[Notes]
Count=1
1=For changing the value of the calling complex number object instead of creating
a new one use <REF>CNewConjugate</REF> method.
[Result]
Method CNewConjugate returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=2
1=CConjugate
2=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CLn: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the natural logarithm of the value of the current complex number object.
[Description]
Use CLn method to evaluate the natural logarithm of the value of the current
complex number object and change the value of the object accordingly.
[Notes]
Count=2
1=Complex number natural logarithm is evaluated according to the following
formula: <I>Ln(Z) = (Ln(r); theta)</I>, where Z = (r; theta). Please note
that the calculation is performed using polar coordinates and all the
transformations between rectangular and polar coordinates are performed
automatically.
2=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewLn</REF> method.
[Result]
Method CLn returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewLn
2=CExp
3=CPwr
4=CIntPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewLn: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the natural logarithm of the value of the current complex number
object and creates a new resulting complex number object.
[Description]
Use CLn method to evaluate the natural logarithm of the value of the current
complex number object and get a new resulting object of TJclComplex type.
[Notes]
Count=2
1=Complex number natural logarithm is evaluated according to the following
formula: <I>Ln(Z) = (Ln(r); theta)</I>, where Z = (r; theta). Please note
that the calculation is performed using polar coordinates and all the
transformations between rectangular and polar coordinates are performed
automatically.
2=For changing the value of the calling object instead of creating a new
resulting object use <REF>CLn</REF> method.
[Result]
Method CNewLn returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CLn
2=CExp
3=CPwr
4=CIntPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CExp: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the exponential curve for the value of the current complex number object.
[Description]
Use CExp method to evaluate the exponential curve for the value of the current
complex number object and change the value of the object accordingly.
[Notes]
Count=2
1=Complex number exponential curve is evaluated according to the following
formula: <I>Exp(Z) = [Exp(x)*Cos(y); Exp(x)*Sin(y)]</I>, where Z = (x; y).
2=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewExp</REF> method.
[Result]
Method CExp returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewExp
2=CLn
3=CPwr
4=CIntPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewExp: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the exponential curve for the value of the current complex number
object and creates a new resulting complex number object.
[Description]
Use CExp method to evaluate the exponential curve for the value of the current
complex number object and get a new resulting object of TJclComplex type.
[Notes]
Count=2
1=Complex number exponential curve is evaluated according to the following
formula: <I>Exp(Z) = [Exp(x)*Cos(y); Exp(x)*Sin(y)]</I>, where Z = (x; y).
2=For changing the value of the calling object instead of creating a new
resulting object use <REF>CExp</REF> method.
[Result]
Method CNewExp returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewExp
2=CLn
3=CPwr
4=CIntPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CPwr(PwrValue: TJclComplex): <REF Target"..\TJclComplex">TJclComplex</REF>;
function CPwr(X, Y: Float; [ComplexType: <REF Target="..\..\Types\TComplexKind">TComplexKind</REF>]): <REF Target="..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Raise the value of the current complex number object to the PwrValue power.
[Description]
Use CPwr method to raise the value of the current complex number object to the
PwrValue power and change the value of the object accordingly. The complex number
that is the exponent for the operation is set either as an object of TJclComplex
type or as a pair of its values (X;Y).
[Parameters]
Count=4
1=PwrValue:TJclComplex=The complex number that is the exponent for the operation.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the exponent for the operation.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the exponent for the operation.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewPwr</REF> method.
[Result]
Method CPwr returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewPwr
2=CLn
3=CExp
4=CIntPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewPwr(PwrValue: TJclComplex): <REF Target"..\TJclComplex">TJclComplex</REF>;
function CNewPwr(X, Y: Float; [ComplexType: <REF Target="..\..\Types\TComplexKind">TComplexKind</REF>]): <REF Target="..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Raise the value of the current complex number object to the PwrValue power
and creates a new resulting complex number object.
[Description]
Use CNewPwr method to raise the value of the current complex number object to the
PwrValue power and get a new resulting object of TJclComplex type. The complex number
that is the exponent for the operation is set either as an object of TJclComplex
type or as a pair of its values (X;Y).
[Parameters]
Count=4
1=PwrValue:TJclComplex=The complex number that is the exponent for the operation.
2=X:Float=The real part in the rectangular representation or radius in
polar coordinates of the complex number that is the exponent for the operation.
3=Y:Float=The imaginary part in the rectangular representation or angle in
polar coordinates of the complex number that is the exponent for the operation.
4=ComplexType:TComplexKind=<I>Optional.</I> Defines whether X and Y parameters
are stated in rectangular representation or in polar coordinates.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CPwr</REF> method.
[Result]
Method CNewPwr returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CPwr
2=CLn
3=CExp
4=CIntPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CIntPwr(Pwr: Integer): <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Raise the value of the current complex number object to the Pwr power that is
represented by an integer value.
[Description]
Use CIntPwr method to raise the value of the current complex number object to the
Pwr power that is represented by an integer value and change the value of the
calling object accordingly.
[Parameters]
Count=1
1=Pwr:Integer=The exponent, that the value of the calling object should be raised to.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewIntPwr</REF> method.
[Result]
Method CIntPwr returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewIntPwr
2=CLn
3=CExp
4=CPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewIntPwr(Pwr: Integer): <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Raise the value of the current complex number object to the Pwr power that is
represented by an integer value and creates a new resulting complex number object.
[Description]
Use CNewIntPwr method to raise the value of the current complex number object to the
Pwr power that is represented by an integer value and get a new resulting object
of TJclComplex type.
[Parameters]
Count=1
1=Pwr:Integer=The exponent, that the value of the calling object should be raised to.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CIntPwr</REF> method.
[Result]
Method CNewIntPwr returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CIntPwr
2=CLn
3=CExp
4=CPwr
5=CRealPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CRealPwr(Pwr: Float): <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Raise the value of the current complex number object to the Pwr power that is
represented by a floating-point value.
[Description]
Use CRealPwr method to raise the value of the current complex number object to the
Pwr power that is represented by a floating-point value and change the value of the
calling object accordingly.
[Parameters]
Count=1
1=Pwr:Float=The exponent, that the value of the calling object should be raised to.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewRealPwr</REF> method.
[Result]
Method CRealPwr returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewRealPwr
2=CLn
3=CExp
4=CPwr
5=CIntPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewRealPwr(Pwr: Float): <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Raise the value of the current complex number object to the Pwr power that is
represented by a floating-point value and creates a new resulting complex number object.
[Description]
Use CNewRealPwr method to raise the value of the current complex number object to the
Pwr power that is represented by a floating-point value and get a new resulting object
of TJclComplex type.
[Parameters]
Count=1
1=Pwr:Float=The exponent, that the value of the calling object should be raised to.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CRealPwr</REF> method.
[Result]
Method CNewRealPwr returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CRealPwr
2=CLn
3=CExp
4=CPwr
5=CIntPwr
6=CRoot
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CRoot(K, N: Word): <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Extracts the N-th root and returns the K-th root of the extraction where K is
varying from 0 to N-1.
[Description]
Use CRoot method to extract the N-th root from the value of the calling complex
number object, get the K-th root of the extraction, where K varies from 0 to
N-1 and change the value of the calling object accordingly.
[Parameters]
Count=2
1=K:Word=The number of the root to be returned.
2=N:Word=The value of the root to be extracted.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewRoot</REF> method.
[Result]
Method CRoot returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewRoot
2=CLn
3=CExp
4=CPwr
5=CIntPwr
6=CRealPwr
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewRoot(K, N: Word): <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Extracts the N-th root and returns the K-th root of the extraction where K is
varying from 0 to N-1 and creates a new resulting complex number object.
[Description]
Use CNewRoot method to extract the N-th root from the value of the calling complex
number object, get the K-th root of the extraction, where K varies from 0 to
N-1 and get a new resulting object of TJclComplex type.
[Parameters]
Count=2
1=K:Word=The number of the root to be returned.
2=N:Word=The value of the root to be extracted.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CRoot</REF> method.
[Result]
Method CNewRoot returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CRoot
2=CLn
3=CExp
4=CPwr
5=CIntPwr
6=CRealPwr
7=CSqrt
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CSqrt: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Extracts the second root from the value of the calling complex number object.
[Description]
Use CSqrt method to extract the second root from the value of the calling complex
number object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CSqrt</REF> method.
[Result]
Method CSqrt returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CNewSqrt
2=CLn
3=CExp
4=CPwr
5=CIntPwr
6=CRealPwr
7=CRoot
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewSqrt: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Extracts the second root from the value of the calling complex number object
and creates a new resulting complex number object.
[Description]
Use CNewSqrt method to extract the second root from the value of the calling complex
number object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CSqrt</REF> method.
[Result]
Method CNewSqrt returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=8
1=CSqrt
2=CLn
3=CExp
4=CPwr
5=CIntPwr
6=CRealPwr
7=CRoot
8=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CCos: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the cosine of the value of the current complex number object.
[Description]
Use CCos method to evaluate the cosine of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewCos</REF> method.
[Result]
Method CCos returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewCos
2=CSin
3=CTan
4=CCot
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewCos: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the cosine of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewCos method to evaluate the cosine of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CCos</REF> method.
[Result]
Method CNewCos returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CCos
2=CSin
3=CTan
4=CCot
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CSin: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the sine of the value of the current complex number object.
[Description]
Use CSin method to evaluate the sine of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewSin</REF> method.
[Result]
Method CSin returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewSin
2=CCos
3=CTan
4=CCot
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewSin: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the sine of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewSin method to evaluate the sine of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CSin</REF> method.
[Result]
Method CNewSin returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CSin
2=CCos
3=CTan
4=CCot
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CTan: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the tangent of the value of the current complex number object.
[Description]
Use CTan method to evaluate the tangent of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewTan</REF> method.
[Result]
Method CTan returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewTan
2=CSin
3=CCos
4=CCot
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewTan: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the tangent of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewTan method to evaluate the tangent of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CTan</REF> method.
[Result]
Method CNewTan returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CTan
2=CSin
3=CCos
4=CCot
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CCot: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the cotangent of the value of the current complex number object.
[Description]
Use CCot method to evaluate the cotangent of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewCot</REF> method.
[Result]
Method CCot returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewCot
2=CSin
3=CTan
4=CCos
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewCot: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the cotangent of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewCot method to evaluate the cotangent of the value of the calling complex
number object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CCot</REF> method.
[Result]
Method CNewCot returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CCot
2=CSin
3=CTan
4=CCos
5=CSec
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CSec: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the secant of the value of the current complex number object.
[Description]
Use CSec method to evaluate the secant of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewSec</REF> method.
[Result]
Method CSec returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewSec
2=CSin
3=CTan
4=CCot
5=CCos
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewSec: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the secant of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewSec method to evaluate the secant of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CSec</REF> method.
[Result]
Method CNewSec returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CSec
2=CSin
3=CTan
4=CCot
5=CCos
6=CCsc
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CCsc: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the cosecant of the value of the current complex number object.
[Description]
Use CCsc method to evaluate the cosecant of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewCsc</REF> method.
[Result]
Method CCsc returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewCsc
2=CSin
3=CTan
4=CCot
5=CSec
6=CCos
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewScs: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the cosecant of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewCsc method to evaluate the cosecant of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CCsc</REF> method.
[Result]
Method CNewCsc returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CCsc
2=CSin
3=CTan
4=CCot
5=CCos
6=CSec
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CCosH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic cosine of the value of the current complex number object.
[Description]
Use CCosH method to evaluate the hyperbolic cosine of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewCosH</REF> method.
[Result]
Method CCosH returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewCosH
2=CSinH
3=CTanH
4=CCotH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewCosH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic cosine of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewCosH method to evaluate the hyperbolic cosine of the value of the
calling complex number object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CCosH</REF> method.
[Result]
Method CNewCosH returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CCosH
2=CSinH
3=CTanH
4=CCotH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CSinH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic sine of the value of the current complex number object.
[Description]
Use CSinH method to evaluate the hyperbolic sine of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewSinH</REF> method.
[Result]
Method CSinH returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewSinH
2=CCosH
3=CTanH
4=CCotH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewSinH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic sine of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewSinH method to evaluate the hyperbolic sine of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CSinH</REF> method.
[Result]
Method CNewSinH returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CSinH
2=CCosH
3=CTanH
4=CCotH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CTanH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic tangent of the value of the current complex number object.
[Description]
Use CTanH method to evaluate the hyperbolic tangent of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewTanH</REF> method.
[Result]
Method CTanH returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewTanH
2=CSinH
3=CCosH
4=CCotH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewTanH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic tangent of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewTanH method to evaluate the hyperbolic tangent of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CTanH</REF> method.
[Result]
Method CNewTanH returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CTanH
2=CSinH
3=CCosH
4=CCotH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CCotH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic cotangent of the value of the current complex number object.
[Description]
Use CCotH method to hyperbolic evaluate the cotangent of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewCotH</REF> method.
[Result]
Method CCotH returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewCotH
2=CSinH
3=CTanH
4=CCosH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewCotH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic cotangent of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewCotH method to hyperbolic evaluate the cotangent of the value of the calling complex
number object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CCotH</REF> method.
[Result]
Method CNewCotH returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CCotH
2=CSinH
3=CTanH
4=CCosH
5=CSecH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CSecH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic secant of the value of the current complex number object.
[Description]
Use CSecH method to evaluate the hyperbolic secant of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewSecH</REF> method.
[Result]
Method CSecH returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewSecH
2=CSinH
3=CTanH
4=CCotH
5=CCosH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewSecH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic secant of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewSecH method to evaluate the hyperbolic secant of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CSecH</REF> method.
[Result]
Method CNewSecH returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CSecH
2=CSinH
3=CTanH
4=CCotH
5=CCosH
6=CCscH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CCscH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic cosecant of the value of the current complex number object.
[Description]
Use CCscH method to evaluate the hyperbolic cosecant of the value of the calling complex number
object and change the value of the calling object accordingly.
[Notes]
Count=1
1=For creating a new resulting complex number object instead of changing the value
of the current one use <REF>CNewCscH</REF> method.
[Result]
Method CCscH returns the calling object with the changed value.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CNewCscH
2=CSinH
3=CTanH
4=CCotH
5=CSecH
6=CCosH
7=TJclComplex; ..\TJclComplex
<DECL>--------------------------------------------------------------------------
[Declaration]
function CNewScsH: <REF Target"..\TJclComplex">TJclComplex</REF>;
[ShortDescr]
Evaluates the hyperbolic cosecant of the value of the current complex number object
and creates a new resulting complex number object.
[Description]
Use CNewCscH method to evaluate the hyperbolic cosecant of the value of the calling complex number
object and get a new resulting object of TJclComplex type.
[Notes]
Count=1
1=For changing the value of the calling object instead of creating a new
resulting object use <REF>CCscH</REF> method.
[Result]
Method CNewCscH returns a newly created object of TJclComplex type that contains
the value computed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclComplex
Category=Math Routines
SubCat=Complex numbers\TJclComplex
Author=Earl F. Glynn;EarlGlynn@WorldNet.att.net
Delphi=4,5
[SeeAlso]
Count=7
1=CCscH
2=CSinH
3=CTanH
4=CCotH
5=CCosH
6=CSecH
7=TJclComplex; ..\TJclComplex
