<DECL>--------------------------------------------------------------------------
[Declaration]
DriveLetters = ['a'..'z', 'A'..'Z'];
[ShortDescr]
Set of valid characters to use as drive letters.
[Description]
DriveLetters is a set of characters which can be used to designate a drive under
the Windows operating system.
[Quick Info]
Kind=Constant
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
PathDevicePrefix = '\\.\';
[ShortDescr]
Prefix used to specify a physical device under Windows.
[Description]
PathDevicePrefix is the character string used in Windows to specify a physical
device such as a harddisk. To be precise its a prefix to indicate the "path name"
of any driver.
[Quick Info]
Kind=Constant
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
PathSeparator = '\'; // '/' if compiled under Linux
[ShortDescr]
Character used as path element separator.
[Description]
PathSeparator is the character used by the file system to separate the elements
of a path such as the drive, directories and the filename. The value of this
constant is conditionally defined as a forward or backward slash depening on the
targetted operating system (Linux and Windows respectively).
[Quick Info]
Kind=Constant
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
PathUncPrefix    = '\\';
[ShortDescr]
Prefix for UNC path names.
[Description]
Character string used a prefix for UNC paths. A full UNC path is of the
form: \\Server\Share or \\?\UNC\Server\Share.
[Quick Info]
Kind=Constant
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetSizeOfFile(const FileName: string): Int64; overload;
function GetSizeOfFile(Handle: THandle): Int64; overload;
[ShortDescr]
Returns the size of a file.
[Description]
The GetSizeOfFile returns the size, in bytes of the specified file. Note that
the returned value is the actual size of the file. This may, and most likely will,
differ from the storage the file actually occupies on the disk.
[Parameters]
Count=2
1=FileName:string=Fully qualified name of the file for which to determine the size.
2=Handle:THandle=Handle of the file for which to determine the size. This handle
must have been opened with sufficient rights (GENERIC_READ at the very least). The
function assumes the handle is valid and silently fails if it is not.
[Result]
The size of the file, in bytes. If the function fails to determine the size of
the file it raises an exception.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=David Hervieux;dhervieux@Pirel.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclFileMappingView = class (TCustomMemoryStream)
[ShortDescr]
Implements a file mapping view object.
[Description]
TJclFileMappingView implements the view for a filemapping object. Do not construct
objects of this class directly, instead use the TJclCustomFileMapping.Add method.
A TJclFileMappingView object can be used to read from and write to a specific
area in a filemapping. You can create multiple views including ones that overlap.
The Operating System guarantees that multiple views remain coherent as long as
they are created from the same filemapping object. Standard Win32 view
objects provide an abstraction to manipulate a file as if it were a block of
memory using pointers. TJclFileMappingView takes this a bit further by allowing
you to use the familiar TStream interface to manipulate the view. If you so desire
you can still use the 'memory' directly by using the Memory property.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(FileMap: TJclCustomFileMapping; Access, Size: Cardinal; ViewOffset: Int64);
constructor CreateAt(FileMap: TJclCustomFileMapping; Access, Size: Cardinal; ViewOffset: Int64; Address: Pointer);
[ShortDescr]
Creates an instance of TJclFileMappingView.
[Description]
The Create and CreateAt create an instance of TJclFileMappingView. You should not
create instances of TJclFileMappingView directly. Instead use the Add and AddAt
methods of TJclCustomFileMapping. The Access, Size, ViewOffset and Address parameters
map directly to the Access, Count, Offset and Address parameters of the AddAt
method. The FileMap parameter specifies the TJclCustomFileMapping object for
which the view is created and cannot be nil.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function Flush(Count: Cardinal): Boolean;
[ShortDescr]
Flush writes the modified parts of the view back to the disk.
[Description]
Flush writes the modified parts of the view back to the disk. Note that to
guarantee that this works across a network as well the underlying file must be
opened with FILE_FLAG_WRITE_THROUGH.
[Parameters]
Count=1
1=Count:Cardinal=The number of bytes to flush. Specifying 0 causes the entire
view to be flushed.
[Result]
If the function succeeds it returns True, otherwise it returns False.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function Write(const Buffer; Count: Longint): Longint; override;
[ShortDescr]
Write attempts to write up to Count bytes from Buffer to the View.
[Description]
Write attempts to write up to Count bytes from Buffer to the View. It returns
the number of bytes actually written and updates the stream's position accordingly.
Note that since a view cannot automatically expand in size, like some stream
classes do when you write past the end, the function ignores request that would
cause it to write past the end. In such cases the result is 0.
[Parameters]
Count=2
1=Buffer:Untyped=Buffer holding the data to write to the view.
2=Cound:Longint=Number of bytes to write from Buffer.
[Result]
The number of bytes that were actually written to the view.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure LoadFromStream(Stream: TStream);
[ShortDescr]
Copies the contents of the specified stream.
[Description]
LoadFromStream attempts to read the contents of the specified stream object into
the view. If the size of the specified stream is larger than what the view can
hold an exception is raised (a view will not expand in size).
[Parameters]
Count=1
1=Stream:TStream=The stream from which to copy the contents. The contents are
read starting at position 0 up to the end of the stream. The stream's size must
be smaller than or equal to the view's size or an exception is raised.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure LoadFromFile(const FileName: string);
[ShortDescr]
Copies the contents of the specified file. 
[Description]
LoadFromFile attempts to read the contents of the specified file into
the view. If the size of the specified file is larger than what the view can
hold an exception is raised (a view will not expand in size).
[Parameters]
Count=1
1=FileName:string=Name of the file whose contents to copy into the view.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property Index: Integer read GetIndex;
[ShortDescr]
Index into the owning TJclCustomFileMapping's Views list.
[Description]
Index contains the Index into the owning TJclCustomFileMapping object's Views list.
Do not cache this index since it may change when other views are added or deleted.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileMapping: TJclCustomFileMapping read FFileMapping;
[ShortDescr]
The owning TJclCustomFileMapping object.
[Description]
Reference to the TJclCustomFileMapping object that this View was created from. The
View remains owned by that object until it is destroyed.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property Offset: Int64 read GetOffset;
[ShortDescr]
Offset into the filemapping.
[Description]
Offset contains the Offset into the filemapping that this view was created for.
Since the offset must always be a multiple of the system's allocation granularity
this value may not be the same value you specified when the view was created. 
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMappingView
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclCustomFileMapping = class (TObject)
[ShortDescr]
Wrapper for Win32 filemapping object.
[Description]
TJclCustomFileMapping is a wrapper for a Win32 filemapping object. In a nutshell,
a filemapping is an abstraction of a disk file which allows you to manipulate the
file as if it were just another block of memory, as such you manipulate it using
pointers. The filemapping object itself is only used to maintain the association
with the file, while a filemapping view object is used to manipulate (part of) the
file. You can create multiple views of a (part of a) file which are guaranteed to
remain coherent. Additionally you can create a filemapping object which is
associated with the swap file as opposed to an actual disk file. Since multiple
processes can open a handle to the same filemapping, this is an ideal way to
share data between multiple processes. <P>
Unless you are opening a filemapping object as opposed to creating one, you should
not use this class directly. Instead use the derived TJclFileMapping and
TJclSwapFileMapping classes. These two classes only differ in their constructors
but do prevent you from a common mistake (related to the return value of CreateFile).
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Open(Name: string; InheritHandle: Boolean; DesiredAccess: Cardinal);
[ShortDescr]
Creates an instance of TJclCustomFileMapping and opens a filemapping object.
[Description]
The Open constructor creates an instance of TJclCustomFileMapping and attempts
to open the named filemapping object. If the specified object does not exist the
constructor fails by raising an exception.
[Parameters]
Count=3
1=Name:string=Name of the filemapping object to open. If no filemapping object
with the specified name exists, the function raises an exception.
2=InheritHandle:Boolean=Specifies whether the filemapping object's handle can be
inherited by child processes.
3=DesiredAccess=Specifies the desired access to the filemapping object. This can
be one of the following values:
  <TABLE>
  <TR VALIGN="top">
  <TH align=left width=32%>Value</TH>
  <TH align=left width=68%>Meaning</TH>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>FILE_MAP_WRITE</TD>
  <TD width=68%>Read-write access. The target file-mapping object must have been created with PAGE_READWRITE protection. A read-write view of the file is mapped.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>FILE_MAP_READ</TD>
  <TD width=68%>Read-only access. The target file-mapping object must have been created with PAGE_READWRITE or PAGE_READ protection. A read-only view of the file is mapped.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>FILE_MAP_ALL_ACCESS</TD>
  <TD width=68%>Same as FILE_MAP_WRITE.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>FILE_MAP_COPY</TD>
  <TD width=68%>Copy-on-write access. The target file-mapping object must have been created with PAGE_WRITECOPY protection. A copy-on-write view of the file is mapped.</TD>
  </TR>
  </TABLE><BR>
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function Add(Access, Count: Cardinal; Offset: Int64): Integer;
[ShortDescr]
Create a new view and adds it to the list.
[Description]
The Add method creates a new TJclFileMappingView object and adds it to the internal
Views list.
[Parameters]
Count=3
1=Access:Cardinal=Specifies the access for the view. See the Win32 help file or the
Platform SDK under MapViewOfFile for more information.
2=Count:Cardinal=Number of bytes to map. If you specify 0 the entire file is mapped.
3=Offset:Int64=The Offset, in bytes, into the file from which to begin the mapping.
The supplied offset is implicitly rounded towards a multiple of the systems
allocation granularity. See the <REF Target="..\Properties\RoundViewOffset">RoundOffsetView</REF> property for the details.
[Result]
The Index into the Views array of the newly created View object.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=AddAt
<DECL>--------------------------------------------------------------------------
[Declaration]
function AddAt(Access, Count: Cardinal; Offset: Int64; Address: Pointer): Integer;
[ShortDescr]
Creates a new view and adds it to the list.
[Description]
The AddAt method creates a new TJclFileMappingView object and adds it to the internal
Views list. The difference between <REF>Add</REF> and this method is that you
can specify a base address at which the view must be mapped. Note however that
the supplied Address is implicitly rounded towards a multiple of the systems
allocation granularity and if the system cannot map the view at the resulting
address, it won't map at all! 
[Parameters]
Count=4
1=Access:Cardinal=Specifies the access for the view. See the Win32 help file or the
Platform SDK under MapViewOfFile for more information.
2=Count:Cardinal=Number of bytes to map. If you specify 0 the entire file is mapped.
3=Offset:Int64=The Offset, in bytes, into the file from which to begin the mapping.
The supplied offset is implicitly rounded towards a multiple of the systems
allocation granularity. See the <REF Target="..\Properties\RoundViewOffset">RoundOffsetView</REF> property for the details.
4=Address:Pointer=Address at which the view should be mapped. The value is rounded
to a multiple of the system allocation granularity. See
the <REF Target="..\Properties\RoundViewOffset">RoundOffsetView</REF> property
for the details.
[Result]
The Index into the Views array of the newly created View object. 
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=Add
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Delete(Index: Integer);
[ShortDescr]
Deletes the View at the specified Index.
[Description]
The Delete method destroys the View object at the specified Index (into the Views
array) and removes it from the list. Outstanding references are implicitly
invalidated by this since the object no longer exists. If the Index is invalid
the function raises an exception.
[Parameters]
Count=1
1=Index:Integer=Index into the Views array of the View object to destroy. Must
be a valid index or an exception is raised.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function IndexOf(View: TJclFileMappingView): Integer;
[ShortDescr]
Returns the index of the specified view object.
[Description]
The IndexOf method returns the Index of the supplied View object in the Views
list. Alternatively you can use the Views Index property.
[Parameters]
Count=1
1=View:TJclFileMappingView=The View object whose Index into the Views list you
want to know.
[Result]
The Index into the Views array property of the specified View. If the View does
not exist in the array the function returns -1.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property Count: Integer read GetCount;
[ShortDescr]
The number of View objects in the Views list.
[Description]
The Count property returns the number of view objects managed by the object and
previously created using the <REF Target"..\Method\Add">Add</REF>
or the <REF Target"..\Method\AddAt">AddAt</REF> method.
The individual TJclFileMappingView objects can be accessed using the Views array
property.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property Existed: Boolean read FExisted;
[ShortDescr]
Returns whether the filemapping object already existed on creation.
[Description]
The Existed property returns whether the filemapping object already existed during
creation. This only applies if you used the Open constructor or specified a name
in the constructor and another process had already created the filemapping with
the same name.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property Handle: THandle read FHandle;
[ShortDescr]
Handle of the filemapping object.
[Description]
Handle contains the handle of the underlying Win32 filemapping object. You can
use it, for example, to share the filemapping with another process through
handle inheritance. Never close the handle manually, this is done automatically
at destruction.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string read FName;
[ShortDescr]
Name of the filemapping.
[Description]
The Name property contains the name of the filemapping object as specified during
construction.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property RoundViewOffset: TJclFileMappingRoundOffset read FRoundViewOffset write FRoundViewOffset;
[ShortDescr]
Rounding used when creating view objects.
[Description]
A filemapping view must be created with its offset being a multiple of the systems'
memory allocation granularity (usually 64K). Additionally, when you use the
AddAt method, the specified base address must also be a multiple of the allocation
granularity. The RoundViewOffset determines how the TJclFileMappingView class
rounds the supplied offset and/or base address values when these conditions are
not met. You can have the class automatically round upwards or downwards. 
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property Views[index: Integer]: TJclFileMappingView read GetView;
[ShortDescr]
List of all view objects managed by this class.
[Description]
The Views property contains all views that were created for this filemapping
using the Add or AddAt method. The number of Views in this list can be determined
using the <REF>Count</REF> property. When a View is created it is automatically
added to the list and when a view is destroyed is is removed from the list.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclCustomFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclFileMapping = class (TJclCustomFileMapping)
[ShortDescr]
Implements a filemapping object backed by an actual disk file.
[Description]
TJclFileMapping is a specification of a filemapping object. It only differs from
TJclCustomFileMapping in the implementation of its constructor. Use this class
when you want to map an actual disk file.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(const FileName: string; FileMode: Cardinal; const Name: string; Protect: Cardinal; const MaximumSize: Int64; const SecAttr: PSecurityAttributes); overload;
constructor Create(FileHandle: THandle; Name: string; Protect: Cardinal; MaximumSize: Int64; SecAttr: PSecurityAttributes);
[ShortDescr]
Creates an instance of a TJclFileMapping object.
[Description]
Creates an instance of a TJclFileMapping object. The filemapping object is backed
by an actual disk file and it is the callers responsibility to ensure the disk file
actually exists. As such the FileHandle parameter must be a valid handle or the
FileName, FileMode combination must be valid.
[Parameters]
Count=7
1=FileName:string=Fully qualified name of the file to map.
2=FileMode:Cardinal=Access mode to open the file with. See the "File open mode
constants" topic in the Delphi help for a list of valid values. 
3=FileHandle:THandle=Handle to a disk file. Must be a valid handle.
4=Name:string=Name for the filemapping object. Specifying a name allows another
process to open the same filemapping object.
5=Protect:Cardinal=Protection attributes for the filemapping object. See the Win32
help file or Platform SDK for the allowed values (look at the description of the
CreateFileMapping function, flProtect parameter).
6=MaximumSize:Int64=Maximum size of the filemapping object. If you specify 0 the
filemapping will be the same size as the underlying disk file (which is not allowed
to have a size of 0 itself).
7=SecAttr:PSecurityAttributes=Security attributes for the filemapping. See the
Win32 help file or Platform SDK for details.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileHandle: THandle read FFileHandle;
[ShortDescr]
Handle of the underlying file.
[Description]
Copy of the handle passed to the constructor. Mostly for your convenience, the
class does not actually use the handle. However, it is copied using DuplicateHandle
and closed on destruction. As such, you can use it as a storage place for the
filehandle in case you need it later. Note that you are not supposed to manipulate
a file both through a filemapping and the file manipulation routines since the
operating system can no longer guarantee that the two remain coherent. If you must
use the handle after the TJclFileMapping class has been destroyed then you must
copy it using DuplicateHandle. Note that if you decide to use the Handle as such
you are still required to close the original handle using CloseHandle!
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclSwapFileMapping = class (TJclCustomFileMapping)
[ShortDescr]
Implements a filemapping object backed by the swap file.
[Description]
TJclSwapFileMapping is a specification of a filemapping object. It only differs
from TJclCustomFileMapping in the implementation of its constructor. Use this
class when you want to create a filemapping backed by the systems swap file (ideal
for cross-process communication).
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclSwapFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(Name: string; Protect: Cardinal; MaximumSize: Int64; SecAttr: PSecurityAttributes);
[ShortDescr]
Creates an instance of a TJclSwapFileMapping object.
[Description]
Creates an instance of a TJclSwapFileMapping object. The filemapping object is
backed by the swap file.
[Parameters]
Count=5
1=Name:string=Name for the filemapping object. Specifying a name allows another
process to open the same filemapping object.
2=Protect:Cardinal=Protection attributes for the filemapping object. See the Win32
help file or Platform SDK for the allowed values (look at the description of the
CreateFileMapping function, flProtect parameter).
3=MaximumSize:Int64=Maximum size of the filemapping object. Cannot be 0.
4=SecAttr:PSecurityAttributes=Security attributes for the filemapping. See the
Win32 help file or Platform SDK for details.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclSwapFileMapping
Author=Wim De Cleen;jones-jr@skynet.be
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclTempFileStream = class (THandleStream)
[ShortDescr]
Implements a temporary file-stream.
[Description]
TJclTempFileStream implements a temporary file-stream. The stream is created
in a system defined folder reserved for temporary files and is automatically
deleted when the object is freed. The stream object is opened with full access
rights and in such manner that the stream cannot be opened by another thread.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclTempFileStream
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileName: string read FFileName;
[ShortDescr]
The fully qualified name of the temporary file.
[Description]
FileName returns the fully qualified name of the file that is used by the
TJclTempFileStream object. This is mostly for informational purposes since the
file cannot be opened again using CreateFile.
[Quick Info]
Kind=Property
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclTempFileStream
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor TJclTempFileStream.Create(const Prefix: string);
[ShortDescr]
Creates an instance of TJclTempFileStream.
[Description]
Create creates a temporary file in the temporary folder as returned by
GetTempPath. The file is created with read and write access and is deleted as
soon as it is closed. The file cannot be opened by another call to CreateFile.
The file is created with the temporary attribute which means the system will
attempt to keep the file's data in memory rather than caching it. Therefore you
should free the object as soon as possible using the Free destructor. The file
is automatically deleted when the object is destroyed.
[Parameters]
Count=1
1=Prefix:string=On input the first three characters of the string are used to
form the name of the temporary file (can be empty). On return, assuming the
function succeeded, the FileName property contains the actual name of the
temporary file, including the path.
[Quick Info]
Kind=Method
Visibility=Public
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Streams\TJclTempFileStream
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileGetTypeName(const FileName: string): string;
[ShortDescr]
Returns a string that describes the file's type.
[Description]
FileGetTypeName returns a string that describes the specified file's type. For
example, if the file is of type .pas the returned string
is 'Delphi Source File' (assuming Delphi 5 is installed). If the file type is not
registered or the function fails it returns a string of the form '.PAS File' where
 '.PAS' is replaced with the file's extension.
[Parameters]
Count=1
1=FileName:string=The name of the file for which you want to know the type name.
The file does not have to exist physically.
[Result]
String that describes the file type.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Pelle F. S. Liljendal;pellelil@post4.tele.dk
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=PathGetDisplayName
<DECL>--------------------------------------------------------------------------
[Declaration]
function FindUnusedFileName(const FileName, FileExt, Suffix: AnsiString): AnsiString;
[ShortDescr]
Returns a unique filename composed of the specified parts and a unique number.
[Description]
FindUnusedFileName returns a unique filename composed of the FileName and Suffix
parts and an optional number. If a file of the form FileName + Suffix.FileExt
doesn't exist yet this is the name that's returned. If such a file already exists
the function appends a number to the filename, starting at '1' and continues to
increment this number until no file with the composed filename exists. For example,
calling FindUnusedFileName('My', 'txt', 'File') while a file named 'MyFile.txt'
and 'MyFile1.txt' already exists, will return 'MyFile2.txt' (the sequence tried
by the function is 'MyFile.txt', 'MyFile1.txt' and 'MyFile2.txt').
[Parameters]
Count=3
1=FileName:string=Name part of the filename
2=FileExt:string=Extension part of the filename
3=Suffix:string=Optional suffix to be appended to FileName
[Result]
A unique filename composed of the specified parts and a number to make it unique.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Anthony Steele;anthony@southeaster.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function ForceDirectories(Name: string): Boolean;
[ShortDescr]
Creates all the directories along a directory path if they do not already exist.
[Description]
Creates all the directories along a directory path if they do not already exist.
Note that this routine was copied from FileCtrl.pas to avoid a dependency on that
unit, see source code further more details. 
[Parameters]
Count=1
1=Name:string=Directory path to be created, if it doesn't exist already.
[Result]
ForceDirectories returns True if it successfully creates all necessary directories,
False if it could not create a needed directory.
[Notes]
Count=1
1=Do not call ForceDirectories with an empty string. Doing so causes ForceDirectories to raise an exception.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileGetDisplayName(const FileName: string): string;
[ShortDescr]
Returns the display name of a path.
[Description]
FileGetDisplayName returns the display name of the specified file. Usually the
display name will be equal to the long filename without the extension, but this
is not necessarily always true.
[Parameters]
Count=1
1=FileName:string=The name of the file for which you want to know the display name.
The file must physically exist on the drive or the function fails.
[Result]
If the function succeeds it returns the display name of the supplied file. If the
function fails the result is a copy of the supplied filename.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Pelle F. S. Liljendal;pellelil@post4.tele.dk
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=3
1=PathGetShortName
2=PathGetLongName
3=FileGetTypeName
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathGetLongName(Path: string): string;
function PathGetLongName2(Path: string): string;
[ShortDescr]
Returns the long name of a path.
[Description]
PathGetLongName returns the long name of a given path. PathGetLongName uses
the shell to discover the long path while PathGetLongName2 relies on the filesystem
to discover the long path. Consequence of this is that while PathGetLongName2 is
much faster than PathGetLongName, the latter can be used for shell paths which
include GUIDs, while PathGetLongName2 cannot.
[Parameters]
Count=1
1=Path:string=The path for which you want to know the long name. The path must
physically exist on the drive or the function fails.
[Result]
If the function succeeds it returns the long name of the supplied path. If the
function fails the result is a copy of the supplied Path.
[Notes]
Count=1
1=PathGetLongName2 was written by Petr Vones.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Rudy Velthuis;rvelthuis@gmx.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=PathGetShortName
2=PathGetDisplayName
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathGetShortName(const Path: string): string;
[ShortDescr]
Returns the short name of a path.
[Description]
PathGetShortName returns the short name of the given path.
[Parameters]
Count=1
1=Path:string=The path for which you want the short name. The path must physically
exist on the specified drive and the drive must support short name aliases or the
function will fail.
[Result]
If the function succeeds it returns the short name of the given path. If it fails
it returns a copy of the supplied path.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Rudy Velthuis;rvelthuis@gmx.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.5 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=PathGetLongName
2=PathGetDisplayName
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathIsChild(const Path, Base: AnsiString): Boolean;
[ShortDescr]
Checks whether Path is a child of Base.
[Description]
The PathIsChild routine determines whether the directory specified by Path is
a child directory, either immediate or several levels deep, of the specified
Base path. For example, 'c:\winnt\system32' is a child of 'c:\winnt'.
[Parameters]
Count=2
1=Path:string=The path to test.
2=Base:string=The base path to compare path against.
[Result]
If Path is a child of Base the function returns True, otherwise it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Anthony Steele;anthony@southeaster.com
Delphi=3,4,5
[SeeAlso]
Count=2
1=PathIsDiskDevice
2=PathIsUnc
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathIsAbsolute(const Path: string): Boolean;
[ShortDescr]
Tests if a path is an absolute path.
[Description]
PathIsAbsolute tests whether the supplied path is an absolute path. An absolute
path in this context is a path which specifies a drive of the form 'c:\' or,
under Linux, starts with a '/' character.
[Parameters]
Count=1
1=Path:string=The path to test.
[Result]
If the path is an absolute path the function returns True, otherwise it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
[SeeAlso]
Count=2
1=PathIsDiskDevice
2=PathIsUnc
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathIsDiskDevice(const Path: string): Boolean;
[ShortDescr]
Tests whether a path denotes a disk device.
[Description]
PathIsDiskDevice tests whether the supplied path denotes a disk device. On Win32
systems the path to a disk device is always prepended with '\\.\' and that's
what the function tests.
[Parameters]
Count=1
1=Path:string=The path to test.
[Result]
If the path denotes a disk device the result is True, otherwise the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
[SeeAlso]
Count=2
1=PathIsUnc
2=PathIsAbsolute
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathIsUNC(const Path: string): Boolean;
[ShortDescr]
Tests whether a path is a UNC path.
[Description]
PathIsUNC tests whether or not the supplied path is a valid UNC path. That is,
it tests whether the path is prepended with '\\'.
[Parameters]
Count=1
1=Path:string=The path to test.
[Result]
If the supplied path is a UNC path the function returns True, otherwise it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
[SeeAlso]
Count=2
1=PathIsDiskDevice
2=PathIsAbsolute
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure PathExtractElements(const Source: string; var Drive, Path, FileName, Ext: string);
[ShortDescr]
Extracts all elements from a path.
[Description]
PathExtractElements splits the supplied path into its elements such as drive,
path and filename. Depending on the supplied path any of the out parameters can
be an empty string on return.
[Parameters]
Count=5
1=Source:string=String that represents a path that you want to split into its elements.
2=Drive:string=Drive indicator. This is a string in the form "c:\".
3=Path:string=Path of the file, without drive or filename. Leading and trailing directory separators are trimmed.
4=FileName:string=Name of the file, without the extension part.
5=Ext:string=File extension including the dot (.).
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathAddSeparator(const Path: string): string;
[ShortDescr]
Forces the string to end with a directory separator.
[Description]
Adds a path directory separator to the end of the string to create the correct
syntax for a path. If the string already has a trailing separator, no separator
will be added. Note that on Windows a separator is a backslash while on Linux it's
a forward slash, this is handled correctly by this function.
[Parameters]
Count=1
1=Path:string=A string that represents a path and which should be forced to end
with a directory separator.
[Result]
The resulting string is the path, ending in a directory separator.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=PathRemoveSeparator
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathAddExtension(const Path, Extension: string): string;
[ShortDescr]
Adds the extension to a path.
[Description]
PathAddExtension adds the specified extension to the supplied path. If the path
already has an extension the function does nothing. Note that the dot (.) in the
extension is optional, if it's not specified the function inserts it.
[Parameters]
Count=2
1=Path:string=Path to append the extension to.
2=Extension:string=The extension to append to path.
[Result]
The Path with extension appended or Path if it already had an extension.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=PathRemoveExtension
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathAppend(const Path, Append: string): string;
[ShortDescr]
Concatenates two paths.
[Description]
PathAppend concatenates the two paths, separating the two with a backslash thereby
preserving the correct syntax of a path.
[Parameters]
Count=2
1=Path:string=The base path to which Append is appended. This path optionally ends in a backslash.
2=Append:string=The path to append to the base path. This path may start with a backslash.
[Result]
The concatenation of the two paths.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathBuildRoot(const Drive: Byte): string;
[ShortDescr]
Creates a root path for the given drive number.
[Description]
PathBuildRoot creates a root path for the gives drive number. That is, if you
pass in 0, 1, 2, you'll get back 'a:\', 'b:\' and 'c:\' respectively.
[Parameters]
Count=1
1=Drive:Byte=Drive number. Must be in the range 0..25 or an EJclPathError exception
is raised. 
[Result]
The root path for the given drive.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathCommonPrefix(const Path1, Path2: string): Integer;
[ShortDescr]
Compares two paths for a common prefix.
[Description]
PathCommonPrefix compares the two paths to determine if they have a common
prefix. The function returns the number of prefix characters they have in common.
For example, if Path1 is 'c:\winnt\system32' and Path 2 is 'c:\winnt\system' the
result will be 9 which equals 'c:\winnt\'.
[Parameters]
Count=2
1=Path1:string=The first path name
2=Path2:string=The second path name
[Result]
The number of common prefix characters.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathCompactPath(DC: HDC; const Path: string; Width: Integer; CmpFmt: TCompactPath): string; overload;
function PathCompactPath(Canvas: TCanvas; const Path: string; Width: Integer; CmpFmt: TCompactPath): string; overload;
[ShortDescr]
Compacts a path to fit within the given pixel width.
[Description]
PathCompactPath compacts, or truncates, the path to fit within the given pixel
width by replacing part of the string with an ellipsis (...). The specified device
context is used to retrieve the font metrics which determine how a string maps
to a pixel width. Note the existence of two overloads allowing you to pass in
either an HDC or TCanvas (descendant). The TCanvas overload simply delegates the
work to the first overload passing in Canvas.Handle for the DC parameter.
[Parameters]
Count=4
1=DC:HDC=Device context used for retrieving font metrics. This should be the
canvas on which you eventually intend to display the compacted path.
2=Path:string=The path to compact or truncate.
3=Width:Integer=Width, in pixels, that the path will be forced to fit within.
4=CmpFmt:TCompactPath=Determines which part of the string is replaced with
an ellipsis. Valid values are:<br>
  <table>
    <tr><td>cpCenter</td><td>Replaces characters in the middle of the string with an ellipsis</td></tr>
    <tr><td>cpEnd</td><td>Replaces characters at the end of the string with an ellipsis</td></tr>
  </table>
[Result]
The compacted path or an empty string if the function fails.
[Notes]
Count=1
1=If Width is smaller than the most compacted path then the result is the most
compacted path, even though it does not fit within the specified width.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathExtractFileDirFixed(const S: AnsiString): AnsiString;
[ShortDescr]
Extracts drive and directory parts from a filename.
[Description]
PathExtractFileDirFixed extracts the drive and directory parts from the filename
specified by S. The resulting path is always terminated with the PathSeparator
character (a backslash a forward slahs depending on the target OS) regardless of
whether a drive and/or directory is present in the filename.
[Parameters]
Count=1
1=S:string=The filename from which to extract the drive and directory parts.
[Result]
The drive and directory part of the specified filename, terminated with a
PathSeparator. If the filename does not contain a drive and directory specification
the resulting string is a single PathSeparator character.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Anthony Steele;anthony@southeaster.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathExtractFileNameNoExt(Path: string): string;
[ShortDescr]
Extracts the filename without the extension.
[Description]
Returns the filename part of the supplied path without the extension.
[Parameters]
Count=1
1=Path:string=The Path from which to extract a filename.
[Result]
The filename part of the path, without extension.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=PathRemoveExtension
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathRemoveExtension(const Path: string): string;
[ShortDescr]
Removes the extension from a path.
[Description]
PathRemoveExtension removes the extension part from the supplied path, if it exists.
[Parameters]
Count=1
1=Path:string=The path from which to remove the extension.
[Result]
Path without the extension part.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=PathExtractFileNameNoExt
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathRemoveSeparator(const Path: string): string;
[ShortDescr]
Removes a trailing directory separator from a path.
[Description]
PathRemoveSeparator removes the trailing directory separator from the path. If
there is no trailing directory separator the function does nothing.
[Parameters]
Count=1
1=Path:string=The path from which to remove the trailing directory separator.
[Result]
The Path without a trailing directory separator.
[Notes]
Count=1
1=The function only removes one trailing directory separator.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Path manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=PathAddSeparator
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetModulePath(const Module: HMODULE): string;
[ShortDescr]
Returns the filename of a module.
[Description]
GetModulePath returns the fully qualified filename of the executable file that
houses the module specified by the Module parameter.
[Parameters]
Count=1
1=Module:HMODULE=Handle of the module whose path you are querying for. This, for
example, is the handle returned by LoadLibrary (or LoadLibraryEx) or the address
at which the module is loaded (in Win32 a module handle is the base address at
which a module is loaded).
[Result]
The fully qualified filename of the specified module, or an empty string on failure.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileGetTempName(const Prefix: string): string;
[ShortDescr]
Returns the name for a temporary file.
[Description]
FileGetTempName constructs a fully qualified filename based on system settings
 (such as a designated folder for temporary files) and the supplied prefix. As
the name suggests, this is mostly useful when you need to create a temporary
file.
[Parameters]
Count=1
1=Prefix:string=On input the first three characters of the string are used to
form the name of the temporary file (can be empty).
[Result]
If the function succeeds it returns a fully qualified filename. If it fails it
returns an empty string.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileCreateTemp(var Prefix: string): THandle;
[ShortDescr]
Creates a temporary file.
[Description]
FileCreateTemp creates a temporary file in the temporary folder as returned by
GetTempPath. The file is created with read and write access and is deleted as
soon as it is closed. The file cannot be opened by another call to CreateFile.
The file is created with the temporary attribute which means the system will
attempt to keep the file's data in memory rather than caching it. Therefore you
should close the file as soon as possible using CloseHandle.
[Parameters]
Count=1
1=Prefix:string=On input the first three characters of the string are used to
form the name of the temporary file (can be empty). On return, assuming the
function succeeded, Prefix contains the actual name of the temporary file,
including the path. On failure the contents of Prefix are undefined.
[Result]
If the function succeeds the result is a handle to the temporary file, on failure
the function returns INVALID_HANDLE_VALUE.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileExists(const FileName: string): Boolean;
[ShortDescr]
Tests whether a file exists.
[Description]
FileExists tests whether the specified file exists. Unlike the FileExists function
from the Delphi RTL, this function suppresses potential dialog raises due to a
disk not being available.
[Parameters]
Count=1
1=FileName:string=The fully qualified name of the file whose existence to test.
[Result]
If the file exists the function returns True, otherwise it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Pelle F. S. Liljendal;pellelil@post4.tele.dk
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure ShredFile(const FileName: string; Times: Integer = 1);
[ShortDescr]
Shreds the contents of the file and then deletes it.
[Description]
The ShredFile functions overwrites the contents of the specified file and then
deletes the file. This ensures that even if the underlying filesystem does not
physically remove the file, its contents are effectively inaccessible.
[Parameters]
Count=2
1=FileName:string=The fully qualified name of the file to shred.
2=Times:Integer=Number of file overwrites. Defaults to 1.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Pelle F. S. Liljendal;pellelil@post4.tele.dk
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileGetSize(const FileName: string): Integer;
[ShortDescr]
Returns the size of the specified file.
[Description]
FileGetSize returns the size, in bytes, of the specified file. Note that this
function is limited to files whose size is no larger than 2GB.
[Parameters]
Count=1
1=FileName:string=The fully qualified name of the file.
[Result]
If the function succeeds it returns the size, in bytes, of the specified file.
If the function fails, for example because the file does not exist, the result
is -1.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Pelle F. S. Liljendal;pellelil@post4.tele.dk
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure GetFileAttributeListEx(const Items: TStrings; const Attr: Integer);
[ShortDescr]
Converts attributes flag to a stringlist.
[Description]
GetFileAttributeListEx converts the file attributes specified by A to a list of
string representations of the attributes included in A. This is similar to
the <REF>GetFileAttributeList</REF> function except that this function handles
all documented attributes, including those specific to the NTFS filesystem,
where GetFileAttributeList only handles the standard attributes.
[Parameters]
Count=2
1=List:TStrings=TStrings derivative that receives the strings.
2=Attr:Integer=Attributes of a file, for example retrieved by GetFileAttributes.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=GetFileAttributeList
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure GetFileAttributeList(const Items: TStrings; const Attr: Integer);
[ShortDescr]
Converts attributes flag to a stringlist.
[Description]
GetFileAttributeList converts the file attributes specified by A to a list of
string representations of the attributes included in A. This function only handles
the 'standard' file attributes as specified by the faXXX constants in SysUtils.pas.
[Parameters]
Count=2
1=List:TStrings=TStrings derivative that receives the strings.
2=Attr:Integer=Attributes of a file, usually you'll pass in TSearchRec.Attr.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=GetFileAttributeListEx
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetDriveTypeStr(Drive: Char): string;
[ShortDescr]
Returns the type of drive.
[Description]
GetDriveTypeStr returns the type of the specified drive (hard disk, removable,
cd-rom etc.) in string representation.
[Parameters]
Count=1
1=Drive:Char=Drive letter of the drive for which to query the type, e.g. 'a'.
[Result]
String representation of the type of the specified drive.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function SetFileLastWrite(const FileName: string; DateTime: TDateTime): Boolean;
[ShortDescr]
Sets the file's last-write time stamp.
[Description]
SetFileLastWrite sets the specified file's last-write timestamp to the supplied
datetime. This routine cannot be used to set the last-write timestamp of a
directory. Use <REF>SetDirLastWrite</REF> for that.
[Parameters]
Count=2
1=FileName:string=The name of the file for which to set the time of last write.
2=DateTime:TDateTime=The date and time to set the file's last write stamp to.
[Result]
If the function succeeds the result is True, otherwise it's False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=SetFileLastAccess
2=SetFileCreation
3=GetFileLastAccess
4=GetFileLastWrite
5=GetFileCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function SetFileLastAccess(const FileName: string; DateTime: TDateTime): Boolean;
[ShortDescr]
Sets the file's last-access time stamp.
[Description]
SetFileLastAccess sets the specified file's last-access timestamp to the supplied
datetime. This routine cannot be used to set the last-access timestamp of a
directory. Use <REF>SetDirLastAccess</REF> for that.
[Parameters]
Count=2
1=FileName:string=The name of the file for which to set the time of last access.
2=DateTime:TDateTime=The date and time to set the file's last access stamp to.
[Result]
If the function succeeds the result is True, otherwise it's False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=SetFileLastWrite
2=SetFileCreation
3=GetFileLastAccess
4=GetFileLastWrite
5=GetFileCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function SetFileCreation(const FileName: string; DateTime: TDateTime): Boolean;
[ShortDescr]
Sets the file's creation time stamp.
[Description]
SetFileCreation sets the specified file's creation timestamp to the supplied
datetime. This routine cannot be used to set the creation timestamp of a
directory. See <REF>SetDirCreation</REF> for that.        
[Parameters]
Count=2
1=FileName:string=The name of the file for which to set the time of creation.
2=DateTime:TDateTime=The date and time to set the file's creation stamp to.
[Result]
If the function succeeds the result is True, otherwise it's False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=5
1=SetFileLastWrite
2=SetFileLastAccess
3=GetFileLastAccess
4=GetFileLastWrite
5=GetFileCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function SetDirLastWrite(const DirName: string; DateTime: TDateTime): Boolean;
[ShortDescr]
Sets the directory's last-write time stamp.
[Description]
SetDirLastWrite sets the specified directories last-write timestamp to the supplied
datetime. This routine cannot be used to set the last-write timestamp of a
file. Use <REF>SetFileLastWrite</REF> for that. This routine only works on
Windows NT/Windows 2000 and for it to succeed the caller must have backup
privileges (SE_BACKUP_NAME and SE_RESTORE_NAME).
[Parameters]
Count=2
1=DirName:string=The name of the directory for which to set the time of last write.
2=DateTime:TDateTime=The date and time to set the file's last write stamp to.
[Result]
If the function succeeds the result is True, otherwise it's False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=SetDirLastAccess
2=SetDirCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function SetDirLastAccess(const DirName: string; DateTime: TDateTime): Boolean;
[ShortDescr]
Sets the directory's last-write time stamp.
[Description]
SetDirLastWrite sets the specified directories last-access timestamp to the supplied
datetime. This routine cannot be used to set the last-access timestamp of a
file. Use <REF>SetFileLastAccess</REF> for that. This routine only works on
Windows NT/Windows 2000 and for it to succeed the caller must have backup
privileges (SE_BACKUP_NAME and SE_RESTORE_NAME).
[Parameters]
Count=2
1=DirName:string=The name of the directory for which to set the time of last write.
2=DateTime:TDateTime=The date and time to set the file's last write stamp to.
[Result]
If the function succeeds the result is True, otherwise it's False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=SetDirLastWrite
2=SetDirCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function SetDirCreation(const DirName: string; DateTime: TDateTime): Boolean;
[ShortDescr]
Sets the directory's last-write time stamp.
[Description]
SetDirLastWrite sets the specified directories creation timestamp to the supplied
datetime. This routine cannot be used to set the creation timestamp of a
file. Use <REF>SetFileCreation</REF> for that. This routine only works on
Windows NT/Windows 2000 and for it to succeed the caller must have backup
privileges (SE_BACKUP_NAME and SE_RESTORE_NAME).
[Parameters]
Count=2
1=DirName:string=The name of the directory for which to set the time of last write.
2=DateTime:TDateTime=The date and time to set the file's last write stamp to.
[Result]
If the function succeeds the result is True, otherwise it's False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=SetDirLastAccess
2=SetDirLastWrite
<DECL>--------------------------------------------------------------------------
[Declaration]
function IsDirectory(const FileName: string): Boolean;
[ShortDescr]
Tests if the file is a directory.
[Description]
IsDirectory returns whether or not the specified file is a directory.
[Parameters]
Count=1
1=FileName:string=The name of the file you want to test.
[Result]
If the specified file is a directory the function returns True, otherwise it
returns False. Note that if the specified file is the root of a drive (e.g. 'c:\')
the function returns True, if the file does not exist the function returns False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function UnLockVolume(var Handle: THandle): Boolean;
[ShortDescr]
Unlocks the specified volume.
[Description]
UnLockVolume unlocks a volume previously locked with <REF>LockVolume</REF>.
[Parameters]
Count=1
1=Handle:THandle=The handle previously returned from <REF>LockVolume</REF>. If
the function succeeds in unlocking the volume the handle is closed and no
longer valid.
[Result]
If the function succeeds it returns True, otherwise it returns False. The latter
case either means that the specified handle was invalid or that the device
could not be unlocked. In either case the Handle parameter is unaffected and
retains its value.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.5 or later.
Windows 95/98=Unsupported.
[SeeAlso]
Count=1
1=LockVolume
<DECL>--------------------------------------------------------------------------
[Declaration]
function LockVolume(const Volume: string; out Handle: THandle): Boolean;
[ShortDescr]
Locks the specified volume.
[Description]
LockVolume locks the specified volume. Locking a volume will give exclusive access
to the specified volume to whoever owns the lock. Subsequent access to the
volume must be performed through the returned handle. When you're done with the
volume you must call <REF>UnLockVolume</REF>. Note that to lock a volume there
can be no open files on the volume (even a single open file, by whatever process,
will cause the function to fail).
[Parameters]
Count=2
1=Volume:string=The volume to lock this must be a string in the format:
 <UL>
 <LI>X: Where X is the volume to lock, for example 'a:'
 <LI>PHYSICALDRIVEX Where X is the 0 based hard disk number, for example 'PHYSICALDRIVE0'
 </UL>
 <B>Note:</B> Do not prepend the Volume name with a '\\.\'. This is done by the function.
2=Handle:THandle=Receives a handle of the locked device upon successful return.
[Result]
If the function succeeds in locking the volume it returns True and a handle to
the specified device in the Handle parameter. If it fails the function returns
False and the Handle parameter is undefined.
[Notes]
Count=2
1=You must have administrative privileges to lock a volume.
2=The device is, according to Microsoft recommendations, opened with no buffering.
This action imposes a number of 'limitations' for subsequent access to the device.
For example the alignment of buffers must be on a multiple of the volume's sector
size. See the Platform SDK for details.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.5 or later.
Windows 95/98=Unsupported.
[SeeAlso]
Count=1
1=UnlockVolume
<DECL>--------------------------------------------------------------------------
[Declaration]
function OpenVolume(const Drive: Char): THandle;
[ShortDescr]
Opens a handle to the specified volume.
[Description]
OpenVolume opens a handle for the specified volume with read/write access.
Subsequent access to the volume must be performed through the returned handle.
When you're done with the volume you must call <REF>CloseVolume</REF>.
[Parameters]
Count=1
1=Drive:Char=The drive letter corresponding to the volume to open.
[Result]
If the function succeeds it returns a handle to the specified volume.
If it fails the function returns INVALID_HANDLE_VALUE.
[Notes]
Count=2
1=You must have administrative privileges to open a volume.
2=This action imposes a number of 'limitations' for subsequent access to the volume.
For example the alignment of buffers must be on a multiple of the volume's sector
size. See the Platform SDK on CreateFile for details.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.5 or later.
Windows 95/98=Unsupported.
[SeeAlso]
Count=1
1=CloseVolume
<DECL>--------------------------------------------------------------------------
[Declaration]
function CloseVolume(var Volume: THandle): Boolean;
[ShortDescr]
Closes a handle for a previously opened volume.
[Description]
CloseVolume closes the handle to a volume previously opened with <REF>OpenVolume</REF>.
[Parameters]
Count=1
1=Handle:THandle=The handle previously returned from <REF>OpenVolume</REF>. If
the function succeeds in closing the volume the handle is closed and no
longer valid.
[Result]
If the function succeeds it returns True, otherwise it returns False. The latter
case either means that the specified handle was invalid or that the device
could not be closed. In either case the Handle parameter is unaffected and
retains its value.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Massimo Maria Ghisalberti;nissl@dada.it
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.5 or later.
Windows 95/98=Unsupported.
[SeeAlso]
Count=1
1=OpenVolume
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure CreateEmptyFile(const FileName: string);
[ShortDescr]
Creates a new file with a zero length.
[Description]
CreateEmptyFile creates a new file with size of zero, that is without content.
If a file with the same name already exists but isn't opened, the file is
overwritten. Upon failure an exception is raised, for example if a file with the
same name already exists but is opened.
[Parameters]
Count=1
1=FileName:string=Name of the file to create.
[Result]
[Quick Info]
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Anthony Steele;anthony@southeaster.com
BCB=3,4,5
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFileInformation(const FileName: string): TSearchRec;
[ShortDescr]
Returns information about a file.
[Description]
GetFileInformation returns a TSearchRec record containing information about the
specified file such as creation time, filesize and so forth.
[Parameters]
Count=1
1=FileName:string=Fully qualified name of the file for which to retrieve information.
[Result]
If the function succeeds it returns a TSearchRec with information about the file.
The Delphi help contains documentation for this record. If the function fails,
for example because it can't find the file, it raises an EWin32Error exception.
[Quick Info]
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
BCB=3,4,5
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=GetStandardFileInfo
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetStandardFileInfo(const FileName: string): TWin32FileAttributeData;
[ShortDescr]
Returns information about a file.
[Description]
GetStandardFileInfo returns standard information about the specified file such as
creation time, filesize and attributes.
[Parameters]
Count=1
1=FileName:string=Fully qualified name of the file for which to retrieve information.
[Result]
If the function succeeds it returns a TWin32FileAttributeData record with
information about the file. The Platform SDK contains documentation for this record.
If the function fails, for example because it can't find the file, it raises an
EFileUtilsError exception.
[Quick Info]
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
BCB=3,4,5
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=GetFileInformation
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFileAgeCoherence(const FileName: string): Boolean;
[ShortDescr]
Tests the file age coherence of a file.
[Description]
GetFileAgeCoherence tests whether the specified file's age is coherent. That is,
it tests whether or not the file creation time is at least earlier than the
file's last write time.
[Parameters]
Count=1
1=FileName:string=The name of the file whose age coherence to test.
[Result]
If the file's age is coherent the result is True, otherwise it's False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Massimo Maria Ghisalberti;obyou@dada.it
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=GetFileLastWrite
2=GetFileLastAccess
3=GetFileCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFileLastWrite(const FileName: string): TFileTime;
[ShortDescr]
Returns the date/time that the file was last written to.
[Description]
FileLastWrite returns the date/time that the specified file was last written to.
The return value is a UTC based TFileTime value which can be converted to the
familiar TDateTime by using FileTimeToDateTime function.
[Parameters]
Count=1
1=FileName:string=The name of the file for which to retrieve the time of last write.
[Result]
The date/time the file was last written to, in TFileTime format. On failure the
function raises an exception.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Massimo Maria Ghisalberti;obyou@dada.it
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=GetFileAgeCoherence
2=GetFileLastAccess
3=GetFileCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFileLastAccess(const FileName: string): TFileTime;
[ShortDescr]
Returns the date/time that the file was last accessed.
[Description]
FileLastAccess returns the date/time that the specified file was last accessed.
The return value is a UTC based TFileTime value which can be converted to the
familiar TDateTime by using the FileTimeToDateTime function.
[Parameters]
Count=1
1=FileName:string=The name of the file for which to retrieve the time of last access.
[Result]
The date/time the file was last accessed. On failure the function raises an exception.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Massimo Maria Ghisalberti;obyou@dada.it
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=GetFileAgeCoherence
2=GetFileLastWrite
3=GetFileCreation
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFileCreation(const FileName: string): TFileTime;
[ShortDescr]
Returns the date/time that the file was created.
[Description]
FileCreation returns the date/time that the specified file was created.
The return value is a UTC based TFileTime value which can be converted to the
familiar TDateTime by using the FileTimeToDateTime function.
[Parameters]
Count=1
1=FileName:string=The name of the file for which to retrieve the time of creation.
[Result]
The date/time the file was created. On failure the function raises an exception.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Massimo Maria Ghisalberti;obyou@dada.it
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=3
1=GetFileAgeCoherence
2=GetFileLastAccess
3=GetFileLastWrite
<DECL>--------------------------------------------------------------------------
[Declaration]
function BuildFileList(const Path: string; Attr: Integer; const List: TStrings): Boolean;
[ShortDescr]
Builds a list of files and folders in a directory.
[Description]
BuildFileList builds a list of files and folders in the specified Path that
matches the specified attributes. This is simply a convenient wrapper for the
FindFirst, FindNext and FindClose functions.
[Parameters]
Count=3
1=Path:string=Directory and filename mask for which you want to build the list.
For example this can be 'c:\winnt\*.dll'.
This parameter works like the Path parameter in FindFirst. In Windows it is case insensitive and applies to short and long filenames, so "*.*" will find all files.
In Linux it's case sensitive and "*.*" will find only files that contain a ".".
2=Attr:Integer=The Attr parameter specifies the special files to include in
addition to all normal files. Choose from these file attribute constants when
specifying the Attr parameter (declared in SysUtils.pas):
 <UL>
 <LI>faReadOnly Read-only files
 <LI>faHidden Hidden files
 <LI>faSysFile System files
 <LI>faVolumeID Volume ID files
 <LI>faDirectory Directory files
 <LI>faArchive Archive files
 <LI>faAnyFile Any file
 </UL>
3=List:TStrings=A TStrings descendant in which the file list that matched the Path
and Attr parameters is returned. Note that this list is not cleared by the routine
before the found entries are added.
[Result]
If the function succeeds it returns True, otherwise it returns False. In case of
failure the list contains the entries that were retrieved up to the point of
failure.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=AdvBuildFileList
<DECL>--------------------------------------------------------------------------
[Declaration]
function AdvBuildFileList(const Path: string; const Attr: Integer; const Files: TStrings; const Options: TFileListOptions = [];  const SubfoldersMask: string = ''): Boolean;
[ShortDescr]
AdvBuildFileList works like BuildFileList if called with only three parameters, but it accepts two optional parameters for extended functionality.
[Description]
AdvBuildFileList builds a list of files and folders in the specified Path that
matches the specified attributes. 
[Parameters]
Count=5
1=Path:string=Directory and file name mask for which you want to build the list.
For example this can be 'c:\winnt\*.dll'.
This parameter works like the Path parameter in FindFirst. In Windows it is case insensitive and applies to short and long filenames, so "*.*" will find all files.
In Linux it's case sensitive and "*.*" will find only files that contain a ".".
2=Attr:Integer=The Attr parameter specifies the special files to include in
addition to all normal files. Choose from these file attribute constants when
specifying the Attr parameter (declared in SysUtils.pas):
 <UL>
 <LI>faReadOnly Read-only files
 <LI>faHidden Hidden files
 <LI>faSysFile System files
 <LI>faVolumeID Volume ID files
 <LI>faDirectory Directory files
 <LI>faArchive Archive files
 <LI>faAnyFile Any file
 </UL>
3=List:TStrings=A TStrings descendant in which the file list according to the parameters is returned. Note that this list is not cleared by the routine
before the found entries are added.
4=Options:TFileListOptions=Set of additional option:
 <UL>
 <LI>flFullNames: if set, the full path is included with each listed file name.
 <LI> flRecursive: if set, all subdirectories of the directory given in PATH are scanned.
 <LI>flMaskedSubfolders: if set, files are only listed if their directory path, relative to the directory given in the Path parameter, matches the Subfolder Mask parameter.
 </UL>
5=SubfoldersMask:string=if flMaskedSubfolders is set, the remaining directory path, relative to the directory given in the Path parameter, is matched against this parameter. 
In Windows the matching is done case insensitively, in Linux it's done case sensitively. In Windows (with long file names enabled) only the long name is matched, 
so "*.*" will find only directories that contain a ".".
[Result]
If the function succeeds it returns True, otherwise it returns False. In case of
failure the list contains the entries that were retrieved up to the point of
failure.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=BuildFileList
<DECL>--------------------------------------------------------------------------
[Declaration]
TDelTreeProgress = function (const FileName: string; Attr: DWORD): Boolean;
[ShortDescr]
Progress callback routine for the DelTreeEx function.
[Description]
TDelTreeProgress is the function signature for the Progress parameter of the
DelTreeEx function. This function is called just before the file is deleted. You
can use this callback routine to display progress to the user. To allow DelTreeEx
to continue deleting files return True, to abort the deletion return False.
[Parameters]
Count=2
1=FileName:string=The name of the file that is about to be deleted.
2=Attr:DWORD=The attributes of the file. See GetFileAttributes in the Platform SDK
for a full list of attribute flags.
[Result]
If you return True DelTreeEx deletes the specified file and continues with the
next one. If you return False DeltreeEx aborts immediately.
[Notes]
Count=1
1=Returning False will abort the entire deletion process, not just for the
specified file only.
[Quick Info]
Kind=Type
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=DelTreeEx
<DECL>--------------------------------------------------------------------------
[Declaration]
function DelTree(Path: string): Boolean;
[ShortDescr]
Recursively deletes a folder.
[Description]
DelTree recursively deletes a folder much like the DOS command. That is, it deletes
a folder and everything in it. If parts of the folder tree cannot be deleted, eg
because some files may be currently open, the function attempts to delete as
much as possible before returning.
[Parameters]
Count=1
1=Path:string=The folder to delete. Must be fully qualified. May have a trailing
backslash but that's optional.
[Result]
If the function succeeds in deleting the folder the result is True, if the function
fails the result is False. In case of failure the function attempts to delete
as much as possible before returning. Thus on failure part of the folder may have
been deleted while some files and folders may still exist. Failure is usually due
to insufficient access rights or because some files are currently open (locked).
[Notes]
Count=1
1=The deletions are permanent! Deletions are not recoverable through the recycle bin.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=DelTreeEx
<DECL>--------------------------------------------------------------------------
[Declaration]
function DelTreeEx(const Path: string; AbortOnFailure: Boolean; Progress: TDelTreeProgress): Boolean;
[ShortDescr]
Recursively deletes a folder.
[Description]
DelTree recursively deletes a folder much like the DOS command. That is, it deletes
a folder and everything in it. If parts of the folder tree cannot be deleted, eg
because some files may be currently open, the function attempts to delete as
much as possible before returning or immediately returns, depending on the
AbortOnFailure parameter. The function is capable of providing the caller with
progress information through the Progress function parameter.
[Parameters]
Count=3
1=Path:string=The folder to delete. Must be fully qualified. May have a trailing
backslash but that's optional.
2=AbortOnFailure:Boolean=If True the function immediately returns when it encounters
a file or directory it cannot delete. If False the function continues attempting to
delete the remaining Files. In either case, if one or more files couldn't be
deleted the function result is False.
3=Progress:<REF Target"Types\TDelTreeProgress">TDelTreeProgress</REF>=Function that is called just before a
file is deleted. This allows you to display progress to the user and even abort
the deletion. This parameter is optional (you can specify nil).
See <REF Target"Types\TDelTreeProgress">TDelTreeProgress</REF>
For more information.
[Result]
If the function succeeds in deleting the folder the result is True, if the function
fails the result is False. In case of failure the function attempts to delete
as much as possible before returning or continues deleting depending on the
AbortOnFailure parameter. Thus on failure part of the folder may have been deleted
while some files and folders may still exist. Failure is usually due to insufficient
access rights or because some files are currently open (locked).
[Notes]
Count=1
1=The deletions are permanent! Deletions are not recoverable through the recycle bin.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=DelTree
<DECL>--------------------------------------------------------------------------
[Declaration]
function DirectoryExists(const Name: string): Boolean;
[ShortDescr]
Determines whether a directory exists.
[Description]
DirectoryExists determines whether the specified directory exists.
[Parameters]
Count=1
1=Name:string=The directory to check for existence. If Name is not fully qualified
it is interpreted as relative to the current directory.
[Result]
If the directory exists the function returns True, otherwise it returns False.
[Notes]
Count=1
1=This function is a replacement for the FileUtils.DirectoryExists function from
the Delphi RTL to avoid dependency on that particular unit. There's nothing wrong
with that function except that the unit uses Forms etc. which add significant
resources and startup time to your application (if it doesn't use these units already).
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function DiskInDrive(Drive: Char): Boolean;
[ShortDescr]
Tests whether there is a disk in the specified drive.
[Description]
DiskInDrive tests whether or not there is a disk present in the specified drive.
The drive can be any volume from a to z, specified either in lowercase or uppercase.
The function returns whether or not the drive is accessible, for removable media
this indicates whether or not the drive has a 'disk' present, for other type of
media it indicates if the drive exists.
[Parameters]
Count=1
1=Drive:Char=The volume to test. Valid drives are 'a'..'z' and 'A'..'Z'.
[Result]
If the drive is accessible, a disk is present, and the result is True. If the drive
is not accessible or an error occurred the function returns False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TFileFlags = set of TFileFlag;
TFileFlag  = (ffDebug, ffInfoInferred, ffPatched, ffPreRelease, ffPrivateBuild, ffSpecialBuild);
[Enumeration]
Count=6
1=ffDebug=Included if the file contains debugging information or is compiled with debugging features enabled.
2=ffInfoInferred=The file's version structure was created dynamically; therefore, some of the properties may be empty or incorrect. This flag should never be set in a file's VS_VERSIONINFO data.
3=ffPatched=The file has been modified and is not identical to the original shipping file of the same version number.
4=ffPreRelease=The file is a development version, not a commercially released product.
5=ffPrivateBuild=The file was not built using standard release procedures.
6=ffSpecialBuild=The file was built by the original company using standard release procedures but is a variation of the normal file of the same version number.
[Quick Info]
BCB=3,4,5
Kind=Type
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=TJclFileVersionInfo;..\TJclFileVersionInfo
<DECL>--------------------------------------------------------------------------
[Declaration]
function VersionResourceAvailable(const FileName: string): Boolean;
[ShortDescr]
Tests if a file has a version resource.
[Description]
VersionResourceAvailable tests whether or not the specified file has an accessible
version resource. You can use this function to test before using the <REF>TJclFileVersionInfo</REF>
class to avoid an exception during construction.
[Parameters]
Count=1
1=FileName:string=The fully qualified name of the file to test.
[Result]
If the specified file contains a version resource the result is True, if it does
not or the file could not be found the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=TJclFileVersionInfo
<DECL>--------------------------------------------------------------------------
[Declaration]
function OSIdentToString(OSIdent: DWORD): string;
[ShortDescr]
Maps an OS identifier as to a string.
[Description]
OSIdentToString maps an OS identifier as returned by TJclFileVersionInfo.FileOS to
a string. An example is "Win32 API, running on Windows/NT".
[Parameters]
Count=1
1=OSIdent:DWORD=An OS identifier returned by FileOS property of TJclFileVersionInfo.
[Result]
String representation of the OS identifier.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property LanguageCount: Integer read GetLanguageCount;
[ShortDescr]
Number of languages in the version resource.
[Description]
LanguageCount returns the number of distinct languages for which translations
are available in the version resource.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
BCB=3,4,5
[SeeAlso]
Count=3
1=LanguageIndex
2=LanguageIds
3=LanguageNames
<DECL>--------------------------------------------------------------------------
[Declaration]
property LanguageIndex: Integer read FLanguageIndex write SetLanguageIndex;
[ShortDescr]
Index into the LanguageIds array of the 'active' language.
[Description]
Selects one of the languages in the LanguageIds list as the active language. After
setting this all string properties return values in that specific language.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
BCB=3,4,5
[SeeAlso]
Count=3
1=LanguageCount
2=LanguageIds
3=LanguageNames
<DECL>--------------------------------------------------------------------------
[Declaration]
property LanguageIds[Index: Integer]: string read GetLanguageIds;
[ShortDescr]
List of supported languages.
[Description]
List of language IDs for which the version resource contains translated strings.
Use the LanguageIndex property to set the language in which you want the class to
return string properties. Use the LanguageNames property to get readable names
for these identifiers.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
BCB=3,4,5
[SeeAlso]
Count=3
1=LanguageCount
2=LanguageIndex
3=LanguageNames
<DECL>--------------------------------------------------------------------------
[Declaration]
property LanguageNames[Index: Integer]: string read GetLanguageNames;
[ShortDescr]
List of supported languages.
[Description]
List of languages for which the version resource contains translated strings.
Use the LanguageIndex property to set the language in which you want the class to
return string properties. Use the LanguageIds property to get language identifiers.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
BCB=3,4,5
[SeeAlso]
Count=3
1=LanguageCount
2=LanguageIndex
3=LanguageIds
<DECL>--------------------------------------------------------------------------
[Declaration]
property Comments: string;
[ShortDescr]
Returns the comment string.
[Description]
Comments returns the value of the comments string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property CompanyName: string;
[ShortDescr]
Returns the company name string.
[Description]
CompanyName returns the value of the company name string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brake;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileDescription: string;
[ShortDescr]
Returns the file description string.
[Description]
FileDescription returns the value of the file description string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileFlags: TFileFlags;
[ShortDescr]
Set of flags that specify the attributes of the file.
[Description]
FileFlags is a set of flags that specify the attributes of the file such as debug
and special build. See <REF Target"..\Types\TFileFlags">TFileFlags</REF> for more information on all the
possible values in this set.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileOS: DWORD;
[ShortDescr]
Depicts the OS for which this file was designed.
[Description]
Specifies the operating system for which this file was designed. You can use
the <REF Target"..\OSIdentToString">OSIdentToString</REF> function to map this value to a descriptive string.
This member can be one of the following values:
  <TABLE>
  <TR VALIGN="top">
  <TH align=left width=32%>Flag</TH>
  <TH align=left width=68%>Description</TH>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS_DOS</TD>
  <TD width=68%>The file was designed for MS-DOS.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS_NT</TD>
  <TD width=68%>The file was designed for Windows&nbsp;NT/Windows&nbsp;2000.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS__WINDOWS16</TD>
  <TD width=68%>The file was designed for 16-bit Windows.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS__WINDOWS32</TD>
  <TD width=68%>The file was designed for the Win32 API.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS_OS216</TD>
  <TD width=68%>The file was designed for 16-bit OS/2.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS_OS232</TD>
  <TD width=68%>The file was designed for 32-bit OS/2.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS__PM16</TD>
  <TD width=68%>The file was designed for 16-bit Presentation Manager.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS__PM32</TD>
  <TD width=68%>The file was designed for 32-bit Presentation Manager.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VOS_UNKNOWN</TD>
  <TD width=68%>The operating system for which the file was designed is unknown to the system.</TD>
  </TR>
  </TABLE><BR>
  <P>An application can combine these values to indicate that the file was designed for one operating system running on another. The following <B>dwFileOS</B> values are examples of this, but are not a complete list:
  <TABLE>
  <TR VALIGN="top">
  <TH align=left width=33%>Flag</TH>
  <TH align=left width=67%>Description</TH>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VOS_DOS_WINDOWS16</TD>
  <TD width=67%>The file was designed for 16-bit Windows running on MS-DOS.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VOS_DOS_WINDOWS32</TD>
  <TD width=67%>The file was designed for the Win32 API running on MS-DOS.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VOS_NT_WINDOWS32</TD>
  <TD width=67%>The file was designed for the Win32 API running on Windows&nbsp;NT/Windows&nbsp;2000.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VOS_OS216_PM16</TD>
  <TD width=67%>The file was designed for 16-bit Presentation Manager running on 16-bit OS/2.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VOS_OS232_PM32</TD>
  <TD width=67%>The file was designed for 32-bit Presentation Manager running on 32-bit OS/2.</TD>
  </TR>
  </TABLE><BR>
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileSubType: DWORD;
[ShortDescr]
Specifies the function of the file.
[Description]
FileSubType specifies the function of the file and serves as a further specification
of the <REF>FileType</REF>. The possible values depend on the FileType property.
  <P>If <B>dwFileType</B> is VFT_DRV, <B>dwFileSubtype</B> can be one of the following values:
  <TABLE>
  <TR VALIGN="top">
  <TH align=left width=33%>Flag</TH>
  <TH align=left width=67%>Description</TH>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_UNKNOWN</TD>
  <TD width=67%>The driver type is unknown by the system.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_COMM</TD>
  <TD width=67%>The file contains a communications driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_PRINTER</TD>
  <TD width=67%>The file contains a printer driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_KEYBOARD</TD>
  <TD width=67%>The file contains a keyboard driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_LANGUAGE</TD>
  <TD width=67%>The file contains a language driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_DISPLAY</TD>
  <TD width=67%>The file contains a display driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_MOUSE</TD>
  <TD width=67%>The file contains a mouse driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_NETWORK</TD>
  <TD width=67%>The file contains a network driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_SYSTEM</TD>
  <TD width=67%>The file contains a system driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_INSTALLABLE</TD>
  <TD width=67%>The file contains an installable driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=33%>VFT2_DRV_SOUND</TD>
  <TD width=67%>The file contains a sound driver.</TD>
  </TR>
  </TABLE><BR>
  <P>If <B>dwFileType</B> is VFT_FONT, <B>dwFileSubtype</B> can be one of the following values:
  <TABLE>
  <TR VALIGN="top">
  <TH align=left width=32%>Flag</TH>
  <TH align=left width=68%>Description</TH>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT2_UNKNOWN</TD>
  <TD width=68%>The font type is unknown by the system.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT2_FONT_RASTER</TD>
  <TD width=68%>The file contains a raster font.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT2_FONT_VECTOR</TD>
  <TD width=68%>The file contains a vector font.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT2_FONT_TRUETYPE</TD>
  <TD width=68%>The file contains a TrueType font.</TD>
  </TR>
  </TABLE><BR>
  <P>If <B>dwFileType</B> is VFT_VXD, <B>dwFileSubtype</B> contains the virtual device identifier included in the virtual device control block.
  <P>All <B>dwFileSubtype</B> values not listed here are reserved for future use by Microsoft.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileType: DWORD;
[ShortDescr]
Depicts the general type of the file.
[Description]
FileType returns a constant which depicts the general type of file from which
the version resource was read. This can be one of the following values:
  <TABLE>
  <TR VALIGN="top">
  <TH align=left width=32%>Flag</TH>
  <TH align=left width=68%>Description</TH>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT_UNKNOWN</TD>
  <TD width=68%>The file type is unknown to the system.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT_APP</TD>
  <TD width=68%>The file contains an application.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT_DLL</TD>
  <TD width=68%>The file contains a dynamic-link library (DLL).</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT_DRV</TD>
  <TD width=68%>The file contains a device driver. If <B>dwFileType</B> is VFT_DRV, <B>dwFileSubtype</B> contains a more specific description of the driver.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT_FONT</TD>
  <TD width=68%>The file contains a font. If <B>dwFileType</B> is VFT_FONT, <B>dwFileSubtype</B> contains a more specific description of the font file.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT_VXD</TD>
  <TD width=68%>The file contains a virtual device.</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=32%>VFT_STATIC_LIB</TD>
  <TD width=68%>The file contains a static-link library.</TD>
  </TR>
  </TABLE><BR>
  <P>All other values are reserved for future use by Microsoft.</P>
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property FileVersion: string;
[ShortDescr]
Returns the FileVersion string.
[Description]
FileVersion returns the value of the file version string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brake;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property InternalName: string;
[ShortDescr]
Returns the internal name string.
[Description]
InternalName returns the value of the internal name string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property VersionLanguage: string;
[ShortDescr]
Returns the language identifier of the version resource.
[Description]
VersionLanguage returns the language identifier of the version resource.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property LegalCopyright: string;
[ShortDescr]
Returns the legal copyright string.
[Description]
LegalCopyright returns the value of the legal copyright string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property LegalTradeMarks: string;
[ShortDescr]
Returns the LegalTradeMarks string.
[Description]
LegalTradeMarks returns the value of the legal trademarks string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property OriginalFilename: string;
[ShortDescr]
OriginalFileName returns the value of the original filename string key.
[Description]
Returns the original filename string.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ProductName: string;
[ShortDescr]
Returns the product name string.
[Description]
ProductName returns the value of the product name string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property ProductVersion: string;
[ShortDescr]
Returns the product version string.
[Description]
ProductVersion returns the value of the product version string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property SpecialBuild: string;
[ShortDescr]
Returns the special build module attribute.
[Description]
SpecialBuild is set to true if the executable has the special build module attribute
set in its version resource. If it doesn't SpecialBuild is False.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=2
1=PrivateBuild
2=FileFlags
<DECL>--------------------------------------------------------------------------
[Declaration]
property PrivateBuild: string;
[ShortDescr]
Returns the private build module attribute.
[Description]
PrivateBuild is set to true if the executable has the private build module attribute
set in its version resource. If it doesn't PrivateBuild is False.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=2
1=SpecialBuild
2=FileFlags
<DECL>--------------------------------------------------------------------------
[Declaration]
property UserKeys[const Key: string]: string;
[ShortDescr]
Allows for reading user defined keys.
[Description]
UserKeys allows for reading of non standard, or custom, keys within a version
resource. This is implemented as an array with a string index. The key you
want to read is used as an index into this array. For example:
S := V.UserKeys['MyKey']; The property returns the value of the key 'MyKey'.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property BinFileVersion: string;
[ShortDescr]
Returns the binary file version string.
[Description]
BinFileVersion returns the value of the binary file version string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property BinProductVersion: string;
[ShortDescr]
Returns the binary product string.
[Description]
The BinProductVersion returns the value of the binary product version string key.
[Quick Info]
BCB=3,4,5
Kind=Property
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Attach(const Buffer: string);
[ShortDescr]
Creates an instance of TJclFileVersionInfo using the supplied buffer.
[Description]
The Attach constructor creates an instance of the TJclFileVersionInfo class and
attaches it to the specified buffer. If successful you can use the properties
of TJclFileVersionInfo to start reading the version resource information
from the executable. Use this constructor if you already have read the version info
into a buffer but still want to use this class for convenience.
[Parameters]
Count=1
1=Buffer:string=Buffer containing the version info resource.
[Notes]
Count=1
1=To include version information in your own projects select "Project | Options"
and go to the "Version Info" tab.
[Quick Info]
BCB=3,4,5
Kind=Method
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create(const AFileName: string);
[ShortDescr]
Creates an instance of TJclFileVersionInfo.
[Description]
The Create constructor creates an instance of the TJclFileVersionInfo class and
attaches it to the executable specified by FileName. If successful you can use
the properties of TJclFileVersionInfo to start reading the version resource information
from the executable. If the constructor cannot read the version resource from
the specified file (e.g. because the file does not exist or does not have a version
resource) an exception is raised (using RaiseLastWin32Error). To avoid the
exception and check beforehand if the file has a version resource you can use
the <REF Target"..\VersionResourceAvailable">VersionResourceAvailable</REF>
function.
[Parameters]
Count=1
1=AFileName:string=The fully qualified name of the file whose version resource to read.
[Notes]
Count=1
1=To include version information in your own projects select "Project | Options"
and go to the "Version Info" tab.
[Quick Info]
BCB=3,4,5
Kind=Method
Visibility=Public
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=Attach
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclFileVersionInfo = class (TObject)
[ShortDescr]
Enables reading of version information from executables.
[Description]
TJclFileVersionInfo is a class that enables you to read the version information
from an executable file (exe, dll etc.). Naturally the executable itself has to
have a version resource linked in. Besides allowing you to read standard version
key such as ProductName and FileVersion this class also allows you to read custom
keys through the UserKeys property.
[Quick Info]
BCB=3,4,5
Unit=JclFileUtils
Category=Files and IO
SubCat=Files and Directories\TJclFileVersionInfo
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
