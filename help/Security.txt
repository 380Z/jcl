<DECL>--------------------------------------------------------------------------
[Declaration]
function AllowRegKeyForEveryone(Key: HKEY; Path: string): Boolean;
[ShortDescr]
Allows full access to everyone for a registry key.
[Description]
AllowRegKeyForEveryone sets the dacl of the specified registry key to NULL thereby
granting full access to everyone. Be careful with this one because you can do
real damage on the registry!
[Parameters]
Count=2
1=Key:HKEY=The rootkey of the specified path. Can be one of the HKEY_XXX constants.
2=Path:string=Path of the registry key for which to set full access to everyone.
[Result]
If the function succeeds it returns True, otherwise it returns False.
[Quick Info]
Unit=JclSecurity
Category=Security
SubCat=Access Control
Author=John C Molyneux;jaymol@hotmail.com
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 4.0 or later.
Windows 95/98=Unsupported.
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function CreateNullDacl(var Sa: TSecurityAttributes; const Inheritable: Boolean): PSecurityAttributes;
[ShortDescr]
Initializes a security attributes structure for NULL access and optional inheritability.
[Description]
CreateNullDacl initializes a TSecurityAttributes structure for the creation of
an optionally inheritable object with a NULL dacl. 
The TSecurityAttributes lpSecurityDescriptor member is initialized with a NULL
dacl. This will result in the created object allowing full access to everyone.
Make sure you read the Notes section for memory issues.
[Parameters]
Count=2
1=Sa:TSecurityAttributes=The TSecurityAttributes structure to initialize.
2=Inheritable:Boolean=Specifies inheritability. The bInheritHandle member of Sa
is set to the same value as the Inheritable parameter.
[Result]
A pointer to the passed in TSecurityAttributes structure. This allows you to write
code such as CreateFile(..., CreateNullDacl(Sa, True), ...).
[Notes]
Count=1
1=The caller is responsible for freeing the memory associated with the lpSecurityDescriptor member of the TSecurityAttributes member. Use FreeMem(Sa.lpSecurityDescriptor).
[Quick Info]
Unit=JclSecurity
Category=Security
SubCat=Access Control
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
Kylix=1
FPC=1.x
[SeeAlso]
Count=1
1=CreateInheritable
<DECL>--------------------------------------------------------------------------
[Declaration]
function CreateInheritable(var Sa: TSecurityAttributes): PSecurityAttributes;
[ShortDescr]
Initializes a security attributes structure for inheritable object creation.
[Description]
CreateInheritable initializes a TSecurityAttributes structure for
the creation of an inheritable object. Meaning the bInheritHandle member is set
to True allowing processes spawned by the current process to inherit the handle
to the object that was created with this TSecurityAttributes structure.
[Parameters]
Count=1
1=Sa:TSecurityAttributes=The TSecurityAttributes structure whose fInheritHandle
member to set to True resulting in an inheritable object.
[Result]
A pointer to the passed in TSecurityAttributes structure. This allows you to write
code such as CreateFile(..., CreateInheritable(Sa), ...).
[Quick Info]
Unit=JclSecurity
Category=Security
SubCat=Access Control
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
Kylix=1
FPC=1.x
[SeeAlso]
Count=1
1=CreateNullDacl
<DECL>--------------------------------------------------------------------------
[Declaration]
function IsPrivilegeEnabled(const Privilege: string): Boolean;
[ShortDescr]
Tests if the specified Privilege is enabled.
[Description]
IsPrivilegeEnabled tests whether the specified privilege is enabled for the current
thread. If the thread is currently impersonating a client the test is made against
the credentials of that client, otherwise the test is made against the credentials
of the user associated with the process that the calling thread runs in.
[Parameters]
Count=1
1=Privilege:string=The privilege to check for.  This is one of the SE_Xxx
constants as documented in the Platform SDK under Security | Access Control |
Access Control | Access Control Reference | Windows NT Privileges. For example,
you can pass in SE_DEBUG_NAME to test if the debugging privilege is enabled.
[Result]
If the specified privilege is enabled for the calling thread then the function
returns True, otherwise the function returns False - this is also the return
value if the function fails in retrieving the status of the specified privilege.
[Quick Info]
Unit=JclSecurity
Category=Security
SubCat=Privileges
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Unsupported.
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=EnableProcessPrivilege
2=EnableThreadPrivilege
<DECL>--------------------------------------------------------------------------
[Declaration]
function EnableProcessPrivilege(const Enable: Boolean; const Privilege: string): Boolean;
[ShortDescr]
Enables or disables a privilege for the process.
[Description]
EnableProcessPrivilege enables or disables the specified privilege for the
current process. You can, for example, enable the debug privilege by using this
function. The user associated with the calling process must already have
TOKEN_ADJUST_PRIVILEGES access.
[Parameters]
Count=2
1=Enable:Boolean=If True the function attempts to enable the specified privilege.
If False the function attempts to disable the specified privilege.
2=Privilege:string=The privilege to enable/disable. This is one of the SE_Xxx
constants as documented in the Platform SDK under Security | Access Control |
Access Control | Access Control Reference | Windows NT Privileges. For example,
you can pass in SE_DEBUG_NAME to enable or disable the debugging privilege.
[Result]
If the function succeeds the result is True, otherwise the result is False. Failure
is usually caused by the caller not having sufficient access rights (i.e. TOKEN_ADJUST_PRIVILEGE)
to enable or disable privileges.
[Quick Info]
Unit=JclSecurity
Category=Security
SubCat=Privileges
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Unsupported.
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=EnableThreadPrivilege
2=IsPrivilegeEnabled
<DECL>--------------------------------------------------------------------------
[Declaration]
function EnableThreadPrivilege(const Enable: Boolean; const Privilege: string): Boolean;
[ShortDescr]
Enables or disables a privilege for the thread.
[Description]
EnableThreadPrivilege enables or disables the specified privilege for the
calling thread. You can, for example, enable the debug privilege by using this
function. The user associated with the calling process must already have
TOKEN_ADJUST_PRIVILEGES access. If the thread is currently impersonating a client
then the client must have the appropriate access.
[Parameters]
Count=2
1=Enable:Boolean=If True the function attempts to enable the specified privilege.
If False the function attempts to disable the specified privilege.
2=Privilege:string=The privilege to enable/disable. This is one of the SE_Xxx
constants as documented in the Platform SDK under Security | Access Control |
Access Control | Access Control Reference | Windows NT Privileges. For example,
you can pass in SE_DEBUG_NAME to enable or disable the debugging privilege.
[Result]
If the function succeeds the result is True, otherwise the result is False. Failure
is usually caused by the caller not having sufficient access rights (i.e. TOKEN_ADJUST_PRIVILEGE)
to enable or disable privileges.
[Quick Info]
Unit=JclSecurity
Category=Security
SubCat=Privileges
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Unsupported.
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=EnableProcessPrivilege
2=IsPrivilegeEnabled
<DECL>--------------------------------------------------------------------------
[Declaration]
function IsAdministrator: Boolean;
[ShortDescr]
Tests whether the process is running in the user context of a local administrator.
[Description]
The IsAdministrator function tests if the calling process is running in the
context of a user with local administrative rights. That is, if the user is an
administrator.
[Result]
If the process is running in the user context of a local administrator the function
returns True, otherwise it returns False.
[Quick Info]
Unit=JclSecurity
Category=Security
SubCat=Privileges
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Unsupported.
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure LookupAccountBySid(Sid: PSID; var Name, Domain: string);
[ShortDescr]
Returns the name and domain of an alias, user or group.
[Description]
LookupAccountBySid looks up the domain and account-name of the principal identified
by the supplied security identifier. This principal can be an alias, user or group
either local or domain. If the function fails it raises an exception (EOSError).
[Parameters]
Count=3
1=Sid:PSID=Security Identifier of the account for which to lookup the domain and account-name.
2=Name:string=Returns the account-name of the principal identified by Sid.
3=Domain:string=Returns the domain-name in which the principal identified by Sid is located (if any).
[Result]
[Quick Info]
Unit=JclSecurity
Category=Account Information
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Unsupported.
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure QueryTokenInformation(Token: THandle; InformationClass: TTokenInformationClass; var Buffer: Pointer);
[ShortDescr]
Wrapper for the GetTokenInformation Windows API function.
[Description]
QuerytokenInformation is a wrapper for the GetTokenInformation Windows API function
which relieves the user of buffer management. For more information about the purpose
of this funcion look up the GetTokenInformation function in the Platform SDK. If 
the function fails it raises an exception.
[Parameters]
Count=1
1=Token:THandle=Handle to an access token to query for information.
2=InformationClass:TTokenInformationClass=The type of information to retrieve.
3=Buffer:Pointer=Upon success reveices a buffer containing the requested information. 
This buffer must be freed by the caller by using the FreeMem function. Upon
failure the buffer is undefined and should not be freed.
[Quick Info]
Unit=JclSecurity
Category=Account Information
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Unsupported.
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetInteractiveUserName: string;
[ShortDescr]
Returns the name of the interactive user.
[Description]
Returns the name of the interactive user (if any) in the form <domain>\<username>.
If the function fails it raises and exception (also true when the shell is
not running, ie no user is interactively logged on). This function, unlike
the much easier GetUserName, can be called from a service running in the
localsystem security context. It can not be called from a service running in
another security context unless appropriate measures have been taken to grant
the service sufficient access (PROCESS_ALL_ACCESS for the shell process and
TOKEN_QUERY for the interactive user account token). That's kind of difficult
to achieve so it's safe to say, don't use this function from any service
accept one running in the localsystem security context.                                                                             
[Result]
The name of the interactively logged on user, if any, in the format domain\username.
[Quick Info]
Unit=JclSecurity
Category=Account Information
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Unsupported.
FPC=1.x