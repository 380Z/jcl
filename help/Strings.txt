<DECL>--------------------------------------------------------------------------
[Declaration]
function BooleanToStr(B: Boolean): string;
[ShortDescr]
Returns a string representation of the boolean values True and False.
[Description]
BooleanToStr returns a string representation of the boolean values True or False.
Thus, if B equals True the string 'True' is returned, if B equals False the
string 'False' is returned.
[Parameters]
Count=1
1=B:Boolean=The boolean value for which you want the string representation.
[Result]
If B is True the result is the string 'True', if B is False the result is the
string 'False'.
[Quick Info]
Unit=JclStrings
Category=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
BCB=3,4,5
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrMatch(const Substr, Str: AnsiString; const Index: Integer = 1): Integer;
[ShortDescr]
Returns the index of the first character in a specified substring that occurs in a given string.
[Description]
StrMatch returns the index of the first character in a specified substring that
occurs in a given string. The search starts at the supplied index and is case-insensitive.
The specified sub-string may contain wildcards. The '?' wildcard matches 1 character
while the '*' wildcard matches 0 or more occurrences of a character. For example, 'J?DI'
will find 'JEDI', 'JZDI' and 'JODI' (and more) while 'J*I' will find 'JEDI' and 'JI'.
[Parameters]
Count=3
1=Substr:AnsiString=The substring to search for. May contain wildcards.
2=Str:AnsiString=The string in which to search.
3=Index:Integer=The index in Str at which to start the search.
[Result]
One-based index of the first character of SubStr in Str or 0 if SubStr does not
occur in the supplied string.
[Notes]
Count=1
1=The '*' wildcard currently doesn't work correctly, it produces the same result as '?'.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrSearch
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrSearch(const Substr, Str: string; const Index: Integer = 1): Integer;
[ShortDescr]
Returns the index of the first character in a specified substring that occurs in a given string.
[Description]
StrSearch returns the index of the first character in a specified substring that
occurs in a given string. The search starts at the supplied index and is case-sensitive.
[Parameters]
Count=3
1=Substr:AnsiString=The substring to search for.
2=Str:AnsiString=The string in which to search.
3=Index:Integer=The index in Str at which to start the search.
[Result]
One-based index of the first character of SubStr in Str or 0 if SubStr does not
occur in the supplied string.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrFind
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrFind(const Substr, Str: AnsiString; const Index: Integer = 1): Integer;
[ShortDescr]
Returns the index of the first character in a specified substring that occurs in a given string.
[Description]
StrFind returns the index of the first character in a specified substring that
occurs in a given string. The search starts at the supplied index and is case-insensitive.
[Parameters]
Count=3
1=Substr:AnsiString=The substring to search for.
2=Str:AnsiString=The string in which to search.
3=Index:Integer=The index in Str at which to start the search.
[Result]
One-based index of the first character of SubStr in Str or 0 if SubStr does not
occur in the supplied string.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrSearch
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrSame(const S1, S2: AnsiString): Boolean;
[ShortDescr]
Tests two strings for equality.
[Description]
StrSame compares the two supplied strings and returns whether or not they are
identical.
[Parameters]
Count=2
1=S1:AnsiString=First string to compare
2=S2:AnsiString=Second string to compare
[Result]
If the two strings are identical the return value is True, if they are not the
return value is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrCompare
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrCompareRange(const S1, S2: AnsiString; const Index, Count: Integer): Integer;
[ShortDescr]
Compares two (sub) strings.
[Description]
StrCompareRange compares a substring from the first supplied string with the
second string. If the two strings are identical the function returns 0 otherwise
it returns an indication of difference between the two strings. See <REF>StrCompare</REF>
for more information. This function is particularly useful to avoid code such as:
 "if Copy(S, 1, 4) = 'JEDI' then ..." which is quite inefficient. This code would
be rewritten to:
 "if StrCompareRange(S1, 'JEDI', 1, 4) = 0 then ...".
[Parameters]
Count=4
1=S1:AnsiString=First string to compare.
2=S2:AnsiString=Second string to compare.
3=Index:Integer=Starting index of substring in S1 to.
4=Count:Integer=Number of characters of the substring in S1 to compare to S2.
[Result]
StrCompare returns 0 if the two strings match or the number of different characters
in case of a mismatch.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrCompare
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrCompare(const S1, S2: AnsiString): Integer;
[ShortDescr]
Compares two strings.
[Description]
StrCompare implements a case-insensitive comparison between the two supplied
strings. If the two strings match the function returns 0 otherwise it returns
the number of different characters. If the supplied strings are of equal length
but are not identical the function returns the difference of the first miss-matched
character. The table below demonstrates this:
 <TABLE>
  <TR VALIGN="top">
  <TH align=left width=40%>S1</TH>
  <TH align=left width=40%>S2</TH>
  <TH align=left width=20%>Result</TH>
  </TR>
  <TR VALIGN="top"><TD width=40%>jedi</TD><TD width=40%>jedi</TD><TD width=20%>0</TD></TR>
  <TR VALIGN="top"><TD width=40%>jedi</TD><TD width=40%>je</TD><TD width=20%>2</TD></TR>
  <TR VALIGN="top"><TD width=40%>di</TD><TD width=40%>jedi</TD><TD width=20%>-2</TD></TR>
  <TR VALIGN="top"><TD width=40%>project jedi</TD><TD width=40%>jedi</TD><TD width=20%>8</TD></TR>
  <TR VALIGN="top"><TD width=40%>jedi</TD><TD width=40%>project jedi</TD><TD width=20%>-8</TD></TR>
  <TR VALIGN="top"><TD width=40%>jedi</TD><TD width=40%>judi</TD><TD width=20%>Ord('e') - Ord('u')</TD></TR>
  <TR VALIGN="top"><TD width=40%>JEDI</TD><TD width=40%>Judi</TD><TD width=20%>Ord(LowerCase('E')) - Ord('u')</TD></TR>
 </TABLE>
[Parameters]
Count=2
1=S1:AnsiString=First string to compare
2=S2:AnsiString=Second string to compare
[Result]
StrCompare returns 0 if the two strings match or the number of different characters
in case of a mismatch.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
<DECL>-------------------------------------------------------------------------
[Declaration]
procedure StrLower(var S: AnsiString);
[ShortDescr]
Lowercases all characters in a string
[Description]
StrLower converts all characters in the supplied string to lowercase.
[Parameters]
Count=1
1=S:AnsiString=String to convert to lowercase.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrUpper
<DECL>-------------------------------------------------------------------------
[Declaration]
procedure StrUpper(var Str: AnsiString);
[ShortDescr]
Uppercases all characters in a string
[Description]
StrUpper converts all characters in the supplied string to uppercase.
[Parameters]
Count=1
1=S:AnsiString=String to convert to uppercase.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrLower
<DECL>-------------------------------------------------------------------------
[Declaration]
procedure StrMove(var Dest: AnsiString; const Source: AnsiString; const ToIndex, FromIndex, Count: Integer);
[ShortDescr]
Copies a substring from one string to another.
[Description]
StrMove copies Count characters starting at FromIndex in the source string to
the destination string starting at ToIndex. The function checks the passed
parameters and if any are illegal the function does nothing. This includes
illegal indices and, for example, a zero-length destination string.
[Parameters]
Count=5
1=Dest:AnsiString=The destination string which the substring is copied to.
2=Source:AnsiString=The source string from which the substring is copied.
3=ToIndex:Integer=The index into the destination string at which the substring is copied.
4=FromIndex:Integer=The starting index into the source string from which count characters are copied.
5=Count:Integer=Length of the substring to copy in characters.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
<DECL>-------------------------------------------------------------------------
[Declaration]
function CharLower(const C: AnsiChar): AnsiChar;
[ShortDescr]
Lowercases a character.
[Description]
CharLower converts the supplied character to lowercase. For example 'A' becomes
'a'. If the character is already lowercase the function does nothing.
[Parameters]
Count=1
1=C:AnsiChar=Character to convert to lowercase.
[Result]
Copy of character converted to lowercase.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=2
1=CharUpper
2=CharToggleCase
<DECL>-------------------------------------------------------------------------
[Declaration]
function CharUpper(const C: AnsiChar): AnsiChar;
[ShortDescr]
Uppercases a character.
[Description]
CharUpper converts the supplied character to uppercase. For example 'a' becomes
'A'. If the character is already uppercase the function does nothing.
[Parameters]
Count=1
1=C:AnsiChar=The character to convert to upper case.
[Result]
Copy of the character converted to uppercase.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
[SeeAlso]
Count=2
1=CharLower
2=CharToggleCase
<DECL>-------------------------------------------------------------------------
[Declaration]
function CharToggleCase(const C: AnsiChar): AnsiChar;
[ShortDescr]
Reverses the case of a character.
[Description]
CharToggleCase reverses the case of the supplied character. That is, if you pass an
uppercase character the function converts it to lowercase, if you pass a lowercase
character the function converts it to uppercase.
[Parameters]
Count=1
1=C:AnsiChar=Character whose case to reverse.
[Result]
Copy of the character with the case reversed.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
<DECL>-------------------------------------------------------------------------
[Declaration]
function CharPos(const S: AnsiString; const C: AnsiChar; const Index: Integer = 1): Integer;
[ShortDescr]
Finds the position of a character in a string.
[Description]
CharPos returns the 1-based index of the first occurrence of the supplied character
in the string. The search starts at the supplied index and is case sensitive.
[Parameters]
Count=3
1=S:AnsiString=String to search.
2=C:AnsiChar=The character to search for.
3=Index:Integer=The character index where CharPos begins searching.
[Result]
The 1-based index of the first occurrence found, or 0 if the character was not found.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
<DECL>-------------------------------------------------------------------------
[Declaration]
function CharReplace(var S: AnsiString; const Search, Replace: AnsiChar): Integer;
[ShortDescr]
Replaces all occurrences of a character in a string.
[Description]
CharReplace replaces all occurrences of the specified search character with the
supplied replace character. It returns the number of replacements performed.
Note that the replacement is case-sensitive.
[Parameters]
Count=3
1=S:AnsiString=The string in which to replace characters.
2=Search:AnsiChar=The character to replace.
3=Replace:AnsiChar=The character to use as a replacement of Search.
[Result]
CharReplace returns the number of replacements performed.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Azret Botash;azret@attglobal.net
Delphi=3,4,5
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrEscapedToString(S: AnsiString): AnsiString;
[ShortDescr]
Converts an escaped string to a string.
[Description]
StrEscapedToString converts a string which contains escape characters to a string
without escape characters by replacing all escape characters with their string
counterparts. For example, a string which contains a BELL character (#7) will
have the BELL character replaced with '\a'. The supported escape characters are:
 <TABLE>
 <TR VALIGN="top">
 <TH align=left width=15%>Character</TH>
 <TH align=left width=15%>Value</TH>
 <TH align=left width=15%>Constant</TH>
 <TH align=left width=45%>Description</TH>
 </TR>
 <TR VALIGN="top"><TD width=15%>\a</TD><TD width=15%>#7</TD><TD width=15%>BELL</TD><TD width=70%>Bell</TD></TR>
 <TR VALIGN="top"><TD width=15%>\b</TD><TD width=15%>#8</TD><TD width=15%>BACKSPACE</TD><TD width=70%>Backspace</TD></TR>
 <TR VALIGN="top"><TD width=15%>\f</TD><TD width=15%>#12</TD><TD width=15%>FF</TD><TD width=70%>Form Feed</TD></TR>
 <TR VALIGN="top"><TD width=15%>\n</TD><TD width=15%>#10</TD><TD width=15%>LR</TD><TD width=70%>Line Feed</TD></TR>
 <TR VALIGN="top"><TD width=15%>\r</TD><TD width=15%>#13</TD><TD width=15%>CR</TD><TD width=70%>Carrage Return</TD></TR>
 <TR VALIGN="top"><TD width=15%>\t</TD><TD width=15%>#9</TD><TD width=15%>TAB</TD><TD width=70%>Tabulator</TD></TR>
 <TR VALIGN="top"><TD width=15%>\v</TD><TD width=15%>#11</TD><TD width=15%>VT</TD><TD width=70%>Vertical Tabulator</TD></TR>
 <TR VALIGN="top"><TD width=15%>\\</TD><TD width=15%>N/A</TD><TD width=15%>N/A</TD><TD width=70%>Backslash</TD></TR>
 <TR VALIGN="top"><TD width=15%>\"</TD><TD width=15%>N/A</TD><TD width=15%>N/A</TD><TD width=70%>Double quotes</TD></TR>
 </TABLE>
All other characters whose ordinal value are smaller than Ord(' ') are escaped
as a hexadecimal sequence. The <REF>StrStringToEscaped</REF> is the "inverse"
of this function.
[Parameters]
Count=1
1=S:AnsiString=The "escaped" string to convert to a "normal" string.
[Result]
The string with all escape characters replaced with their string counterparts.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrStringToEscaped
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrStringToEscaped(S: AnsiString): AnsiString;
[ShortDescr]
Converts a string to an escaped string.
[Description]
StrStringToEscaped converts a string to an escaped string by replacing escape
character sequences with their escape characters. For example, if a string contains
the sequence '\a' the resulting string will have the \a replaced with a BELL
character (#7). This function is the inverse of <REF>StrEscapedToString</REF>.
The function supports the following escape characters:
 <TABLE>
 <TR VALIGN="top">
 <TH align=left width=15%>Character</TH>
 <TH align=left width=15%>Value</TH>
 <TH align=left width=15%>Constant</TH>
 <TH align=left width=45%>Description</TH>
 </TR>
 <TR VALIGN="top"><TD width=15%>\a</TD><TD width=15%>#7</TD><TD width=15%>BELL</TD><TD width=70%>Bell</TD></TR>
 <TR VALIGN="top"><TD width=15%>\b</TD><TD width=15%>#8</TD><TD width=15%>BACKSPACE</TD><TD width=70%>Backspace</TD></TR>
 <TR VALIGN="top"><TD width=15%>\f</TD><TD width=15%>#12</TD><TD width=15%>FF</TD><TD width=70%>Form Feed</TD></TR>
 <TR VALIGN="top"><TD width=15%>\n</TD><TD width=15%>#10</TD><TD width=15%>LR</TD><TD width=70%>Line Feed</TD></TR>
 <TR VALIGN="top"><TD width=15%>\r</TD><TD width=15%>#13</TD><TD width=15%>CR</TD><TD width=70%>Carrage Return</TD></TR>
 <TR VALIGN="top"><TD width=15%>\t</TD><TD width=15%>#9</TD><TD width=15%>TAB</TD><TD width=70%>Tabulator</TD></TR>
 <TR VALIGN="top"><TD width=15%>\v</TD><TD width=15%>#11</TD><TD width=15%>VT</TD><TD width=70%>Vertical Tabulator</TD></TR>
 <TR VALIGN="top"><TD width=15%>\\</TD><TD width=15%>N/A</TD><TD width=15%>N/A</TD><TD width=70%>Backslash</TD></TR>
 <TR VALIGN="top"><TD width=15%>\"</TD><TD width=15%>N/A</TD><TD width=15%>N/A</TD><TD width=70%>Double quotes</TD></TR>
 </TABLE>
In addition it supports hexadecimal escape sequences (sequences that start with \x)
and octal escape sequences (sequences starting with '\0', '\1' ... '\9').
[Parameters]
Count=1
1=S:AnsiString=The string to convert to an escaped string.
[Result]
The "escaped" string.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Robert Marquardt;robert_marquardt@gmx.de
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrEscapedToString
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrMid(const S: AnsiString; Start, Count: Integer): AnsiString;
[ShortDescr]
Copies part of a string.
[Description]
StrMid copies the part of the source string defined by Start and Count.
[Parameters]
Count=3
1=S:AnsiString=Source string.
2=Start:Integer=Index of the first character to copy.
3=Count:Integer=Number of characters to copy.
[Result]
The string copied from S starting at offset Start and with length Count.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=John C Molyneux;jaymol@hotmail.com
Delphi=3,4,5
<DECL>-------------------------------------------------------------------------
[Declaration]
function StrSmartCase(const S: AnsiString; Delimiters: TSysCharSet): AnsiString;
[ShortDescr]
Converts a string to 'smartcase' or 'camelcase'.
[Description]
StrSmartCase converts specified characters within the supplied source string to
uppercase. The characters that are uppercased are determined by the Delimiters
character set. Each time the function finds a character in the source string that
is also present in the Delimiters set it uppercases the <UL>next</UL> character
in the source string. In addition, the function always converts the first character
to uppercase. For example, if you call StrSmartCase('project jedi rules', [' '])
the function returns 'Project Jedi Rules'. As you can see, all characters that
immediately follow a space (as specified by Delimiters) are uppercased.
[Parameters]
Count=2
1=S:AnsiString=Source string.
2=Delimiters:TSysCharSet=Set of characters to use as delimiters. These characters
determine which other characters are uppercased. If you supply an empty set the
function assumes you want to use a space only. That is, it sets Delimiters to [' '].
[Result]
The string converted to smart case.
[Notes]
Count=1
1=Original author is John C Molyneux (jaymol@hotmail.com). Function was rewritten
by Marcel van Brakel.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrCharCount(const S: AnsiString; C: AnsiChar): Integer;
[ShortDescr]
Counts the occurrences of a character in a string.
[Description]
StrCharCount returns the number of occurrences of the specified character in the
supplied string.
[Parameters]
Count=2
1=S:AnsiString=Source string.
2=Len:Integer=The character whose occurrences to count.
[Result]
The number of occurrences of char in s.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Massimo Maria Ghisalberti;obyou@dada.it
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrPadLeft(const S: AnsiString; Len: Integer; C: AnsiChar = ' '): AnsiString;
[ShortDescr]
Left pads a string with characters.
[Description]
StrPadLeft left pads a string with the specified character until the resulting
string is Len characters long. If the source string is already greater than or 
equal in length to Len the function does nothing.
[Parameters]
Count=3
1=S:AnsiString=Source string to left pad.
2=Len:Integer=The length of the resulting string.
3=C:AnsiChar=The character to pad the string with.
[Result]
The string left padded with the specified character.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrPadRight
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrPadRight(const S: AnsiString; Len: Integer; C: AnsiChar = ' '): AnsiString;
[ShortDescr]
Right pads a string with characters.
[Description]
StrPadRight right pads a string with the specified character until the resulting
string is Len characters long. If the source string is already greater than or equal
in length to Len the function does nothing.
[Parameters]
Count=3
1=S:AnsiString=Source string to right pad.
2=Len:Integer=The length of the resulting string.
3=C:AnsiChar=The character to pad the string with.
[Result]
The string right padded with the specified character.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrPadLeft
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrRemoveChars(const S: AnsiString; Chars: TSysCharSet): AnsiString;
[ShortDescr]
Removes a set of characters from a string.
[Description]
StrRemoveChars removes all instances of the characters in the set from the source
string. For example, if you pass in 'Joint Endeavor of Delphi Innovators' and
specify ['e', 'a', 'o', 'u', 'i'] the resulting string will be 'Jnt Endvr f Dlph Innvtrs'.
[Parameters]
Count=2
1=S:AnsiString=The source string from which to remove the characters.
2=Chars:TSysCharSet=The set of characters which are removed from S.
[Result]
The string with all characters from the supplied set removed.
[Notes]
Count=1
1=The function is case sensitive. That is, specifying 'e' will not remove 'E'.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrIsSubset
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrIsAlpha(const S: AnsiString): Boolean;
[ShortDescr]
Tests whether S contains only alpha characters.
[Description]
StrIsAlpha tests whether the supplied string consists only of alpha characters.
That is, whether or not all individual characters come from the ['a'..'z', 'A'..'Z']
set.
[Parameters]
Count=1
1=S:AnsiString=The string to test
[Result]
If S contains only alpha characters the result is True, otherwise the result is False.
[Notes]
Count=1
1=If S is an empty string the result is True.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
[SeeAlso]
Count=2
1=StrIsNumber
2=StrIsAlphaNum
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrIsNumber(const S: AnsiString): Boolean;
[ShortDescr]
Tests whether S contains only numerical characters.
[Description]
StrIsNumber tests whether the supplied string consists only of numerical characters.
That is, whether or not all individual characters come from the ['0'..'9'] set.
[Parameters]
Count=1
1=S:AnsiString=The string to test
[Result]
If S contains only numerical characters the result is True, otherwise the result is False.
[Notes]
Count=1
1=If S is an empty string the result is True.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
[Example]
[SeeAlso]
Count=2
1=StrIsAlpha
2=StrIsAlphaNum
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrEnsurePrefix(const Prefix, Text: AnsiString): AnsiString;
[ShortDescr]
Forces Text to start with Prefix.
[Description]
StrEnsurePrefix tests whether the supplied text start with the supplied prefix.
If it doesn't then the prefix is prepended to the string otherwise the function
does nothing. Note that if Text is an empty string then the result will be Prefix.
[Parameters]
Count=2
1=Prefix:AnsiString=The prefix to test for and apply
2=Text:AnsiString=The string which must be forced to have a prefix
[Result]
The function result is a copy of the supplied Text, prefixed with Prefix.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrEnsureSuffix
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrAllocSize(const S: AnsiString): Longint;
[ShortDescr]
[Description]
A long string variable is a 4 byte pointer to a dynamically allocated block of
memory. This block of memory holds the actual string data, including a NULL
character. In addition this block of memory has, at a negative offset, a number
of 32 bit values used to manage the string. The StringAllocSize function looks
at this negative offset to determine the total amount of dynamic memory reserved
to hold the string and management data.</P><P>
Note that this function will always return 0 for string literals, string constants
and string variables that are assigned to string constants, but haven't been
modified yet. This is not a bug but a result of the way in which Delphi manages
string constants.
[Parameters]
Count=1
1=S:AnsiString=The string for which to determine the total amount of used memory.
[Result]
The amount of dynamic memory allocated for the string or 0 in the exceptions noted
above. Note that, at least in Delphi 5, the result will always be a multiple of 4.
[Notes]
Count=1
1=This function relies on pseudo-undocumented knowledge and should only be used
for debugging purposes.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrRefCount
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrEnsureSuffix(const Suffix, Text: AnsiString): AnsiString;
[ShortDescr]
Forces Text to end with Suffix.
[Description]
StrEnsureSuffix tests whether the supplied text ends in the supplied suffix.
If it doesn't then the suffix is appended to the string otherwise the function
does nothing. Note that if Text is an empty string then the result will be Suffix.
[Parameters]
Count=2
1=Suffix:AnsiString=The suffix to test for and apply
2=Text:AnsiString=The string which must be forced to have a suffix
[Result]
The function result is a copy of the supplied Text, with the suffix.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrEnsurePrefix
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrIsAlphaNum(const S: AnsiString): Boolean;
[ShortDescr]
Tests whether S contains only alpha-numerical characters.
[Description]
StrIsAlphaNum tests whether the supplied string consists only of alpha-numerical
characters. That is, whether or not all individual characters come from
the ['a'..'z', 'A'..'Z', '0'..'9'] set.
[Parameters]
Count=1
1=S:AnsiString=The string to test
[Result]
If S contains only alpha-numerical characters the result is True, otherwise the result is False.
[Notes]
Count=1
1=If S is an empty string the result is True.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=2
1=StrIsAlpha
2=StrIsNumber
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrIsSubset(const S: AnsiString; ValidChars: TSysCharSet): Boolean;
[ShortDescr]
Tests whether S contains only characters from the supplied set.
[Description]
StrIsSubset tests whether the supplied string contains only characters from the
supplied character set. Keep in mind that the test is case-sensitive.
[Parameters]
Count=2
1=S:AnsiString=The string to test.
2=ValidChars:TSysCharSet=The set of characters allowed in S.
[Result]
If the string contains only characters from the supplied set the result is True,
otherwise the result is False.
[Notes]
Count=1
1=If the supplied string is empty, the result is always True. If the supplied
character set is empty, the result is always False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrRemoveChars
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrLastPos(const SubStr, S: AnsiString): Integer;
[ShortDescr]
Returns the index of the last occurrence of SubStr in S.
[Description]
StrLastPos scans the supplied string and returns the index of the first character
of the last occurrence of the supplied sub-string. The comparison is case-sensitive.
[Parameters]
Count=2
1=SubStr:AnsiString=The substring to find the last occurrence of.
2=S:AnsiString=The string in which to search.
[Result]
The index of the last occurrence of SubStr in S. If the sub-string does not exist
at all the result is 0.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrLength(const S: AnsiString): Longint;
[ShortDescr]
Returns the length of the supplied string.
[Description]
StrLength returns the length of the supplied string. This is a duplication of the
standard Delphi Length function and is only supplied for completeness. You should
prefer the Length function over StrLength.
[Parameters]
Count=1
1=S:AnsiString=The string for which to determine the length.
[Result]
The length of the string in characters.
[Notes]
Count=1
1=This function relies on pseudo undocumented knowledge.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=2
1=StrAllocSize
2=StrRefCount
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrRefCount(const S: AnsiString): Longint;
[ShortDescr]
Returns the reference count of the supplied string.
[Description]
StrRefCount returns the reference count of the string. Note that this function
will always return -1 for string literals, string constants and string variables
that are assigned to string constants, but haven't been modified yet. This is
not a bug but a result of the way in which Delphi manages string constants.
[Parameters]
Count=1
1=S:AnsiString=String for which to determine the reference count.
[Result]
The reference count of the string or -1 if the string ultimately points to a
string constant.
[Notes]
Count=1
1=This function relies on pseudo-undocumented knowledge and should only be used
for debugging purposes.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[Example]
[SeeAlso]
Count=1
1=StrAllocSize
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure StrResetLength(var S: AnsiString);
[ShortDescr]
Resets the length of the supplied string.
[Description]
StrResetLength resets the length of the string to encompass only the actual number
of used characters. This is particularly useful when passing strings to API
functions which accept PChar's. These kind of functions do modify the string but
since they are unaware of how Delphi manages strings, the length is not changed
on return. Depending on how you use the string from that point on the results
may be incorrect.
[Parameters]
Count=1
1=S:AnsiString=The string whose length to reset.
[Result]
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrReverse(const S: AnsiString): AnsiString;
[ShortDescr]
Reverses a string.
[Description]
StrReverse returns a reversed copy of S. That is, if you pass in 'Delphi' the
function result will be 'ihpleD'. Note that the original string remains unmodified,
as the const modifier indicates. If you don't need the original string after
reversing it, then do not write code like S := StrReverse(S) but instead use
the <REF>StrReverseInPlace</REF> function because it's much faster.
[Parameters]
Count=1
1=S:AnsiString=The string to reverse
[Result]
A reversed copy of the supplied string.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrReverseInPlace
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure StrReverseInPlace(var S: AnsiString);
[ShortDescr]
Reverses a string.
[Description]
StrReverse reverses S. That is, if you pass in 'Delphi' then after the function
returns S contains the string 'ihpleD'. If you need to retain the original
string then use the <REF>StrReverse</REF> function instead.
[Parameters]
Count=1
1=S:AnsiString=The string to reverse.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrReverse
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure StrTokenToStrings(S: AnsiString; Separator: AnsiChar; List: TStrings);
[ShortDescr]
Breaks apart S using a specified delimiter into a StringList.
[Description]
Use StrTokenToStrings for breaking apart a string with parts delimited by a
separator. For example, if you passed 'C:\Windows;C:\Delphi;C:\JEDI;' List would
return C:\Windows   C:\Delphi   C:\JEDI
You must create the StringList prior to passing it to StrTokenToString and
Free the StringList once finished with it.
[Parameters]
Count=3
1=S:AnsiString=A string which contains one or more Separators (see List parameter).
2=Separator:AnsiChar=Any character you want to use to separate S, i.e. ;.\/-|
3=List:TStrings=Returns separated parts or the entire string if no separator.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Huanlin Tsai;huanlin_tsai@yahoo.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrToken
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrToken(var S: AnsiString; Separator: AnsiChar): AnsiString;
[ShortDescr]
Returns a substring from S which is preceded by Separator.
[Description]
Used to simplify obtaining a substring from a given string which begins with
Separator. Note that S is returned with the section before Separator and the
Separator is not returned at all (discarded). 
[Parameters]
Count=2
1=S:AnsiString=The string you want to return the part after the Separator.
2=Separator:AnsiChar=A character which determines where to break the string up at.
[Result]
Any part of S in front of Separator, or the original string if Separator
was not located in S.
S returns the remaining portion of the string after (but not including) Separator.
If Separator was not found, S is an empty string.
the original string S.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Huanlin Tsai;huanlin_tsai@yahoo.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrTokenToStrings
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrLeft(const S: AnsiString; Count: Integer): AnsiString;
[ShortDescr]
Returns the Count leftmost characters from the string.
[Description]
StrLeft returns the Count number of leftmost characters from the supplied string.
Note that if the supplied string contains fewer then Count characters, the function
returns the entire string.
[Parameters]
Count=2
1=S:AnsiString=The string from which to copy.
2=Count:Integer=The number of characters to copy.
[Result]
The Count leftmost characters from S.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrRight
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrRight(const S: AnsiString; Count: Integer): AnsiString;
[ShortDescr]
Returns the Count rightmost characters from the string.
[Description]
StrRight returns the Count number of rightmost characters from the supplied string.
Note that if the supplied string contains fewer then Count characters, the function
returns the entire string.
[Parameters]
Count=2
1=S:AnsiString=The string from which to copy.
2=Count:Integer=The number of characters to copy.
[Result]
The Count of rightmost characters from S.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrLeft
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrDoubleQuote(const S: AnsiString): AnsiString;
[ShortDescr]
Returns a double-quoted version of the string.
[Description]
StrDoubleQuote returns a copy of the string encapsulated in double quotes (").
That is, if you pass in 'Project JEDI' you'll get '"Project JEDI"' back.
[Parameters]
Count=1
1=S:AnsiString=The string to encapsulate in quotes. Even an empty string.
[Result]
The double-quoted version of the string.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=2
1=StrSingleQuote
2=StrTrimQuotes
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrSingleQuote(const S: AnsiString): AnsiString;
[ShortDescr]
Returns a single-quoted version of the string.
[Description]
StrSingleQuote returns a copy of the string encapsulated in single quotes (').
That is, if you pass in 'Project JEDI' you'll get ''Project JEDI'' back.
[Parameters]
Count=1
1=S:AnsiString=The string to encapsulate in quotes. Even an empty string.
[Result]
The single-quoted version of the string.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=2
1=StrDoubleQuote
2=StrTrimQuotes
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure StrToStrings(S: AnsiString; Sep: AnsiString; var List: TStrings);
[ShortDescr]
Converts a string into a list of strings using the specified separator character.
[Description]
StrToStrings converts the supplied string, which supposedly is a list of strings
packed into a single string variable, to a TStrings. The function uses the supplied
separator string to separate the string into it's individual elements. For
example, if you call the function like this:
StrToStrings('Project JEDI Rules', ' ' List) then on return list will contain three
items, namely 'Project', 'JEDI', and 'Rules'. As this example shows, the last
string doesn't have to be terminated by the separator string although it is allowed.
[Parameters]
Count=3
1=S:AnsiString=The string to split into elements
2=Sep:AnsiString=The string that separates the individual elements
3=List:TStrings=A TStrings derivative that receives the individual elements
[Notes]
Count=1
1=The list will be cleared by this function before adding the elements.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=StringsToStr
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrTrimQuotes(const S: AnsiString): AnsiString;
[ShortDescr]
Removes surrounding quotes from the supplied string.
[Description]
StrTrimQuotes removes surrounding quotes, either single or double-quotes, from
the string. For example if you pass in ''Project JEDI'' you'll get 'Project JEDI'
back. Note that this function only removes quotes if the string both begins and
ends with the same quote character.
[Parameters]
Count=1
1=S:AnsiString=The string to unquote.
[Result]
The unquoted string.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=2
1=StrSingleQuote
2=StrDoubleQuote
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsAlpha(const C: AnsiChar): Boolean;
[ShortDescr]
Tests whether C is an alpha character.
[Description]
CharIsAlpha returns whether or not the supplied character is an alpha character.
That is, if C comes from the ['a'..'z', 'A'..'Z'] set.
[Parameters]
Count=1
1=C:AnsiChar=The character to test
[Result]
If C is an alpha character the return value is True, otherwise the return value is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=3
1=CharIsDigit
2=CharIsNumber
3=CharIsAlphaNum
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsDigit(const C: AnsiChar): Boolean;
[ShortDescr]
Test whether C is a digit.
[Description]
CharIsDigit returns whether or not C is a digit. That is, if C comes from
the ['0'..'9'] set.
[Parameters]
Count=1
1=C:AnsiChar=The character to test.
[Result]
If C is a digit the return value is True, otherwise the return value is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[Example]
[SeeAlso]
Count=3
1=CharIsAlpha
2=CharIsNumber
3=CharIsAlphaNum
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsAlphaNum(const C: AnsiChar): Boolean;
[ShortDescr]
Test whether C is an alphanumeric character.
[Description]
CharIsAlphaNum returns whether or not C is an alphanumerical character. That is,
if C comes from the ['a'..'z', 'A'..'Z', '0'..'9'] set.
[Parameters]
Count=1
1=C:AnsiChar=The character to test.
[Result]
If C is an alphanumerical character the return value is True, otherwise the return value is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=3
1=CharIsAlpha
2=CharIsNumber
3=CharIsDigit
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsControl(const C: AnsiChar): Boolean;
[ShortDescr]
Tests whether C is a control character.
[Description]
CharIsControl tests whether C is a control character. That is, if it has an
ordinal value smaller than 32.
[Parameters]
Count=1
1=C:AnsiChar=Character to test.
[Result]
If C is a control character the result is True, otherwise the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsNumber(const C: AnsiChar): Boolean;
[ShortDescr]
Tests whether C is a number.
[Description]
CharIsNumber returns whether or not the supplied character is a number. That is,
if it comes from the ['0'..'9', '-', '.'] set where the dot is replaced by the
system's decimal separator character.
[Parameters]
Count=1
1=C:AnsiChar=Character to test.
[Result]
If C is a number the result is True, otherwise the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[Example]
[SeeAlso]
Count=3
1=CharIsAlpha
2=CharIsAlphaNum
3=CharIsDigit
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsReturn(const C: AnsiChar): Boolean;
[ShortDescr]
Tests whether C is a return character.
[Description]
CharIsReturn returns whether C is a return character. In this context both the
carriage return (#13) as well as the linefeed (#10) are considered return
characters.
[Parameters]
Count=1
1=C:AnsiChar=Character to test.
[Result]
If C is a return character the result is True, otherwise the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsSpace(const C: AnsiChar): Boolean;
[ShortDescr]
Tests whether C represents space.
[Description]
CharIsSpace returns whether or not the C character represents space(s).
In this context that means the character is tested against both the space (' ') and
tab (#9) characters.
[Parameters]
Count=1
1=C:AnsiChar=Character to test.
[Result]
If the character represents space(s) the result is True, otherwise the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=CharIsWhiteSpace
<DECL>--------------------------------------------------------------------------
[Declaration]
function CharIsWhiteSpace(const C: AnsiChar): Boolean;
[ShortDescr]
Tests whether C represents space.
[Description]
CharIsWhiteSpace returns whether or not the C character represents space(s).
Unlike <REF>CharIsSpace</REF> this function returns True if the specified
character comes from the AnsiWhiteSpace set which is defined as: <BR>
AnsiWhiteSpace = [AnsiTab, AnsiLineFeed, AnsiVerticalTab, AnsiFormFeed, AnsiCarriageReturn, AnsiSpace];
[Parameters]
Count=1
1=C:AnsiChar=Character to test.
[Result]
If the character represents space(s) the result is True, otherwise the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=1
1=CharIsSpace
<DECL>--------------------------------------------------------------------------
[Declaration]
function StringsToMultiSz(var Dest: PChar; const Source: TStrings): PChar;
[ShortDescr]
Converts a stringlist to a list of null terminated strings.
[Description]
StringsToMultiSz concatenates the strings in Source into a single PChar string,
terminating each individual string with a NULL character and the last string with
a double NULL character. For example, if Source contains the items 'Project',
'JEDI' and 'Rules' Dest will point to a string with the contents 'Project#0JEDI#0Rules#0#0'
[Parameters]
Count=2
1=Dest:PChar=PChar receives a pointer to the resulting string.
2=Source:TStrings=List of strings to pack into a single string.
[Result]
On success the function returns a copy of Dest. If the function fails to allocate
memory for the result string it (implicitly) raises an EOutOfMemory exception. The
caller is responsible for releasing the memory pointer to by Dest.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=2
1=MultiSzToStrings
2=FreeMultiSz
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure MultiSzToStrings(const Dest: TStrings; const Source: PChar);
[ShortDescr]
Converts a list of null terminated strings to a string list.
[Description]
Source is assumed to be a list of strings, separated by a NULL character, terminated
by a double NULL character. For example 'Project#0JEDI#0Rules#0#0'. The function
takes this string and copies the individual strings to the string list. Thus,
after executing this function with the above string the Dest list will contain
the items 'Project', 'JEDI' and 'Rules'.
[Parameters]
Count=2
1=Dest:TStrings=The string list to receive the individual strings.
2=Source:PChar=The source string to extract the items from.
[Notes]
Count=1
1=This function does not release the memory associated with Source.
[Result]
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=2
1=StringsToMultiSz
2=FreeMultiSz
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure FreeMultiSz(var Dest: PChar);
[ShortDescr]
Frees the memory pointed to by Dest.
[Description]
FreeMultiSz frees the memory pointed to by Dest which is assumed to be a list
of strings, each terminated by a NULL character, terminated by a double NULL
character.
[Parameters]
Count=1
1=Dest:PChar=The memory to free. Is set to nil before return.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=2
1=StringsToMultiSz
2=MultiSzToStrings
<DECL>--------------------------------------------------------------------------
[Declaration]
function StringsToPCharVector(var Dest: PCharVector; const Source: TStrings): PCharVector;
[ShortDescr]
Converts a stringlist into a PCharVector.
[Description]
A PCharVector is an array of PChar's where each PChar points to a null terminated
string. The array is delimited by a nil pointer. In the Windows API this is
usually typed as a PPSTR. This function takes a string list and builds a
PCharVector from it. The memory allocated to store the PCharVector must eventually
be released by the caller, preferably using <REF>FreePCharVector</REF>.
[Parameters]
Count=2
1=Dest:PCharVector=On return receives a pointer to the PCharVector.
2=Source:TStrings=String list to convert to a PCharVector.
[Result]
A copy of Dest.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=3
1=PCharVectorToStrings
2=PCharVectorCount
3=FreePCharVector
<DECL>--------------------------------------------------------------------------
[Declaration]
function PCharVectorCount(const Source: PCharVector): Integer;
[ShortDescr]
Returns the number of elements in a PCharVector.
[Description]
PCharVectorCount returns the number of items, PChar's, in the supplied PCharVector
excluding the null terminator.
[Parameters]
Count=1
1=The PCharVector to count the elements in.
[Result]
The number of elements in the PCharVector excluding the null terminator.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=3
1=PCharVectorToStrings
2=StringsToPCharVector
3=FreePCharVector
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure PCharVectorToStrings(const Dest: TStrings; const Source: PCharVector);
[ShortDescr]
Converts a PCharVector to a stringlist.
[Description]
A PCharVector is an array of PChar's where each PChar points to a null terminated
string. The array is delimited by a nil pointer. In the Windows API this is
usually typed as a PPSTR. This function takes such a PCharVector and converts it
to a stringlist. Note that the memory for the PCharVector is not freed by this
function.
[Parameters]
Count=2
1=Dest:TStrings=List which retrieves the elements in the PCharVector.
2=Source:PCharVector=PCharVector from which to retrieve the elements.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=3
1=PCharVectorCount
2=StringsToPCharVector
3=FreePCharVector
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure FreePCharVector(var Dest: PCharVector);
[ShortDescr]
Frees a PCharVector
[Description]
FreePCharVector frees the memory pointed to by Dest and sets Dest to nil.
[Parameters]
Count=1
1=Dest:PCharVector=The PCharVector whose memory to free.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=3
1=PCharVectorCount
2=StringsToPCharVector
3=PCharVectorToStrings
<DECL>--------------------------------------------------------------------------
[Declaration]
function StringsToStr(List: TStrings; Sep: AnsiString): AnsiString;
[ShortDescr]
Converts a stringlist to a single string.
[Description]
StringsToStr concatenates the items in List, separating them with the specified
separator string and returns the resulting string. The last element is not terminated
with the separator.
[Parameters]
Count=2
1=List:TStrings=Stringlist which contains the strings to concatenate.
2=Sep:AnsiString=String to separate the individual strings with.
[Quick Info]
BCB=3,4,5
Unit=JclStrings
Category=String manipulation
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=StrToStrings
