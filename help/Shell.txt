<DECL>--------------------------------------------------------------------------
[Declaration]
function OpenFolder(const Folder: string; Parent: HWND = 0): Boolean;
[ShortDescr]
Opens a folder in Explorer.
[Description]
The OpenFolder function opens Explorer with the specified Folder as the root
of the namespace (root of the lefthand treeview).
[Parameters]
Count=2
1=Folder:string=Path of the folder to open. You can either specify a fully
qualified path or a relative one, which will be relative to the current directory.
2=Parent:HWND=Handle of the window to serve as the parent of any dialogs displayed.
[Result]
If the function succeeds the result is True, otherwise it is False. You can call
GetLastError to get more detailed information about the reason of failure.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=OpenSpecialFolder
<DECL>--------------------------------------------------------------------------
[Declaration]
function OpenSpecialFolder(FolderID: Integer; Parent: HWND = 0): Boolean;
[ShortDescr]
Opens a special folder in Explorer,.
[Description]
The OpenSpecialFolder function opens Explorer with the specified Folder as the root
of the namespace (root of the lefthand treeview).
[Parameters]
Count=2
1=FolderId:Integer=SpecialFolder id to open. One of the CSIDL_Xxx constants must
be specified here (see ShlObj.pas for the full list).
2=Parent:HWND=Handle of the window to serve as the parent of any dialogs displayed
[Result]
If the function succeeds the result is True, otherwise it is False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Petr Vones;petr.v@mujmail.cz
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=OpenFolder
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHDeleteFolder(Parent: HWND; const Folder: string; Options: TSHDeleteOptions): Boolean;
[ShortDescr]
Deletes the specified folder.
[Description]
SHDeleteFolder deletes the specified folder, either permanently or to the recycle
bin depending on the Options parameter. Additionally the function provides
visual feedback by displaying the familiar delete folder dialog you also see
when deleting a folder through explorer.
[Parameters]
Count=3
1=Parent:HWND=Handle of the window to serve as the parent of any dialogs displayed
by this function. Specify GetDesktopWindow to use the desktop as the parent.
2=Folder:string=The folder to delete.
3=Options:TSHDeleteOptions=Set of options that control the behavior of this function.
See <REF Target"Types\TSHDeleteOptions">TSHDeleteOptions</REF> for more information.
[Result]
If the function succeeds the result is True, otherwise it is False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=TSHDeleteOptions;Types\TSHDeleteOptions
2=SHDeleteFiles
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHDeleteFiles(Parent: HWND; const Files: string; Options: TSHDeleteOptions): Boolean;
[ShortDescr]
Deletes one or more files.
[Description]
SHDeleteFiles delete a single file, multiple files or even files specified with
a wildcard expression such as *.dcu. If doSilent is not specified the function
provides visual feedback of its progress by showing the familiar delete files
dialog you also see when deleting files through Explorer. In addition the
function allows for deletion to the recycle bin through the doAllowUndo flag.
[Parameters]
Count=3
1=Parent:HWND=Handle of the window to serve as the parent of any dialogs displayed
by this function. Specify GetDesktopWindow to use the desktop as the parent.
2=Files:string=Files to delete. This can be a single fully qualified filename,
a list of files separated by a #0 or a wildcard expression (e.g. *.*).
If Files specifies a (single) folder then make sure it is not ended in a
backslash. In this latter case, the function deletes all files in the folder and
then deletes the folder itself. The folder cannot have subfolders or the function fails.
3=Options:TSHDeleteOptions=Set of options that control the behavior of this function.
See <REF Target"Types\TSHDeleteOptions">TSHDeleteOptions</REF> for more information.
[Result]
If the function succeeds the result is True, otherwise it is False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=TSHDeleteOptions;Types\TSHDeleteOptions
2=SHDeleteFolder
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHRenameFile(const Src, Dest: string; Options: TSHRenameOptions): Boolean;
[ShortDescr]
Renames a file.
[Description]
SHRenameFile renames the specified file. Options allows you to control the
behavior of the function. For example, if you specify [roRenameOnCollision] the
function automatically modifies the destination filename in case the specified
file already exists.
[Parameters]
Count=3
1=Src:string=Fully qualified name of the source file (the original name).
2=Dest:string=Fully qualified name of the destination file (the name to rename Src to).
3=Options:TSHRenameOptions=Set of options that control the behavior of this
function. See <REF Target"Types\TSHRenameOptions">TSHRenameOptions</REF> for more information.
[Result]
If the function succeeds the result is True, otherwise it is False.
[Notes]
Count=1
1=Use this function only to rename a single file.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=TSHDeleteOptions;Types\TSHDeleteOptions
<DECL>--------------------------------------------------------------------------
[Declaration]
TSHRenameOptions = set of TSHRenameOption;
TSHRenameOption = (roSilent, roRenameOnCollision);
[ShortDescr]
Enumeration used by <REF Target"..\SHRenameFile">SHRenameFile</REF> to specify the rename options.
[Enumeration]
Count=2
1=roSilent=Perform the operation without any user interface feedback, including errors.
2=roRenameOnCollision=If renaming causes a naming conflict (ie the file already
exists) then automatically rename the destination file. This will usually result
in a name like 'Copy of ...'. If not specified the renaming fails in case of a conflict.
[Quick Info]
BCB=3,4,5
Kind=Type
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=SHRenameFile;..\SHRenameFile
<DECL>--------------------------------------------------------------------------
[Declaration]
TSHDeleteOptions = set of TSHDeleteOption;
TSHDeleteOption = (doSilent, doAllowUndo, doFilesOnly);
[ShortDescr]
Enumeration used by <REF Target"..\SHDeleteFiles">SHDeleteFiles</REF>
and <REF Target"..\SHDeleteFolder">SHDeleteFolder</REF> to specify the deletion
options.
[Enumeration]
Count=3
1=doSilent=Perform the operation without any user interface feedback, including errors.
2=doAllowUndo=If possible, allow the operation to be undone through the recycle bin.
3=doFilesOnly=If a wildcard expression is specified, only delete files, not folders.
[Quick Info]
BCB=3,4,5
Kind=Type
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=SHDeleteFiles;..\SHDeleteFiles
2=SHDeleteFolder;..\SHDeleteFolder
<DECL>--------------------------------------------------------------------------
[Declaration]
TEnumFolderRec = record
  DisplayName: string;
  Attributes: Cardinal;
  IconLarge: HICON;
  IconSmall: HICON;
  Item: PItemIdList;
  EnumIdList: IEnumIdList;
  Folder: IShellFolder;
end;
[ShortDescr]
The TEnumFolderRec is used to return information about an item that was found
during the enumeration of a folder using the <REF Target"..\SHEnumFolderFirst">SHEnumFolderFirst</REF>
and <REF Target"..\SHEnumFolderNext">SHEnumFolderNext</REF> functions. It also holds data needed to perform
the enumeration. Because of this you must always call SHEnumFolderClose to release
these resources if SHEnumFolderFirst returned True.
[RecordFields]
Count=7
1=DisplayName:string=The display name of the item
2=Attributes:Cardinal=Attributes of the item (see IShellFolder.GetAttributesOf)
3=IconLarge:HICON=The large icon
4=IconSmall:HICON=The small icon
5=Item:PItemIdList=Readonly! Item identifier list representing this item. Relative to Folder
6=EnumIdList:IEnumIdList=Don't touch! Interface used for enumeration.
7=Folder:IShellFolder=IShellFolder interface of the folder we are enumerating.
[Notes]
Count=1
1=The returned icons are the 'plain' icons. You can use code such as below to
transform them into how the shell displays them:<BR>
  <P class="syntax">
  if (F.Attributes and SFGAO_SHARE) = SFGAO_SHARE then<BR>
    OverlayIconShared(F.IconLarge, F.IconSmall);<BR>
  </P>
You can also use the Folder member to get additional info about the found item:<BR>
  <P class="syntax">
  S := GetItemInfoTip(F.Folder, F.Item);
  </P>
[Quick Info]
BCB=3,4,5
Kind=Type
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TEnumFolderFlags = set of TEnumFolderFlag;
TEnumFolderFlag = (efFolders, efNonFolders, efIncludeHidden);
[ShortDescr]
Enumeration used by <REF Target"..\SHEnumFolderFirst">SHEnumFolderFirst</REF> to specify 
the type of items to include in the enumeration.
[Enumeration]
Count=3
1=efFolders=include folder items in the enumeration
2=efNonFolders=include non folder items in the enumeration
3=efIncludeHidden=include hidden items in the enumeration
[Quick Info]
BCB=3,4,5
Kind=Type
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=3
1=SHEnumFolderFirst;..\SHEnumFolderFirst
2=SHEnumFolderNext;..\SHEnumFolderNext
3=SHEnumFolderClose;..\SHEnumFolderClose
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHEnumFolderFirst(SpecialFolder: DWORD; Flags: TEnumFolderFlags; var F: TEnumFolderRec): Boolean; 
function SHEnumSpecialFolderFirst(const Folder: string; Flags: TEnumFolderFlags; var F: TEnumFolderRec): Boolean;
[ShortDescr]
Begins the enumeration of the items in a folder
[Description]
SHEnumFolderFirst begins the enumeration of all items in the specified folder that
match the specified Flags. If the function succeeds then the return value is True
and the <REF Target"Types\TEnumFolderRec">F</REF> parameter will contain information
about the found item such as its name and attributes. To continue the enumeration
call <REF>SHEnumFolderNext</REF>. To close the enumeration and release the
resources held call <REF>SHEnumFolderClose</REF>. If the function fails the
return value is False. This might indicate an error such as a non-existing
function, or indicate that the folder is empty. The flags parameter allows you
to put a number of restrictions on the items that are included in the enumeration.
To define the folder to enumeration use the Folder string parameter, supply a
fully qualified path, or the SpecialFolder parameter which can be set to one of
the CSIDL_XXX constants.
[Parameters]
Count=4
1=Flags:<REF>TEnumFolderFlags</REF>=Flags that determine what type of items to
include in the enumeration.
2=F:TEnumFolderRec=Record that returns information about the items found and holds data used to continue the enumeration with a later call the <REF>SHEnumFolderNext</REF>.
3=SpecialFolder:DWORD=One of the CSIDL_x constants that identify the special folder to enumerate.
4=Folder:string=Fully qualified name of the folder you want to enumerate.
[Result]
If the function succeeds it returns True and the <REF>Types\TEnumFolderRec</REF> record
is filled with information about the first found item. If the function fails the
return value is False. In this latter case you cannot call SHEnumFolderNext and
don't need to call SHEnumFolderClose. If the function succeeded you can continue
the enumeration with <REF>SHEnumFolderNext</REF>
[Notes]
Count=2
1=If SHEnumFolderFirst returns False there is no need to call SHEnumFolderClose.
2=Passing an empty string as the Folder parameter will enumerate 'My Computer'.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=3
1=SHEnumFolderNext
2=SHEnumFolderClose
3=TEnumFolderRec;Types\TEnumFolderRec
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SHEnumFolderClose(var F: TEnumFolderRec);
[ShortDescr]
Closes an enumeration sequence started by SHEnumFolderFirst.
[Description]
This function closes a folder enumeration initiated earlier with SHEnumFolderFirst.
You must call this function to release resources held during the enumeration. Note
that it is only necessary to call this function if SHEnumFolderFirst returned True.
[Parameters]
Count=1
1=F:TEnumFolderRec=The <REF Target"Types\TEnumFolderRec">TEnumFolderRec</REF> used during the enumeration.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=SHEnumFolderFirst
2=SHEnumFolderNext
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHEnumFolderNext(var F: TEnumFolderRec): Boolean;
[ShortDescr]
Retrieves the next item in the enumeration matching the attributes specified by
a previous call to SHEnumFolderFirst.
[Description]
SHEnumFolderNext retrieves the next item in the enumeration of a folder that
was previously started with <REF>SHEnumFolderFirst</REF>. If the function succeeds it returns
True and the F parameter is filled with the information about the next item. If
it fails then the function returns False. The most likely case is that there
are no more items in the folder. You should always end an enumeration by
calling <REF>SHEnumFolderClose</REF>.
[Parameters]
Count=1
1=F:TEnumFolderRec=<REF Target"Types\TEnumFolderRec">TEnumFolderRec</REF> that was returned by <REF>SHEnumFolderFirst</REF>
[Result]
If the function finds a next item it returns True. If there is no next item or
an error occurred it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=SHEnumFolderFirst
2=SHEnumFolderClose
<DECL>--------------------------------------------------------------------------
[Declaration]
function DisplayPropDialog(const Handle: HWND; const FileName: string): Boolean;
function DisplayPropDialogPidl(const Handle: HWND; const Item: PItemIdList): Boolean;
[ShortDescr]
Displays the properties sheet of a shell item.
[Description]
Displays the properties sheet of the item specified by FileName or Item. The
window defined by handle is used as the parent of this dialog. To make the
desktop the parent of the dialog use the return value of GetDesktopWindow.
[Parameters]
Count=3
1=Handle:HWND=Handle of the window to use as the parent for all windows displayed by this function.
2=FileName:string=Fully qualified name of the file whose properties dialog you want to display.
3=Item:PItemIdList=Pidl of the item whose properties dialog you want to display.
[Result]
If the function succeeds it returns True, otherwise it returns False. You can call
GetLastError to get more detailed information about the reason of failure.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function DisplayContextMenu(const Handle: HWND; const Folder: IShellFolder; Item: PItemIdList; Pos: TPoint): Boolean; overload;
[ShortDescr]
Displays the context menu of a shell item.
[Description]
Displays the context menu of the item specified by Item at position Pos using
window defined by Handle as the parent for the menu. Folder should be the parent
folder of the specified Item, which should be relative to the folder. The function
returns True on success on False on failure. Note that when the user selects an
item from the menu, the action defined by that item is also executed.
[Parameters]
Count=4
1=Handle:HWND=Handle of the window to use as the parent for all windows displayed by this function.
2=Folder:IShellFolder=The parent folder of the specified item.
3=Item:PItemIdList=The Item for which to display a context menu. Should be relative to Folder.
4=Pos:TPoint=Position, in client coordinates relative to the window identified by Handle,
of the top, left corner of the context menu.
[Result]
If the function succeeds the result is True, if it fails the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=DisplayContextMenuPidl
<DECL>--------------------------------------------------------------------------
[Declaration]
function DisplayContextMenuPidl(const Handle: HWND; const FileName: string; Pos: TPoint): Boolean; overload;
[ShortDescr]
Displays the context menu of a shell item.
[Description]
Displays the context menu of the file specified by FileName at position Pos using
the window defined by Handle as the parent for the menu. The function returns
True on success and False on failure. Note that when the user selects an item
from the menu, the action defined by that item is also executed.
[Parameters]
Count=3
1=Handle:HWND=Handle of the window to use as the parent for all windows displayed by this function.
2=FileName:string=Fully qualified name of the file for which you want to display a context menu.
3=Pos:TPoint=Position, in client coordinates relative to the window identified by Handle,
of the top, left corner of the context menu.
[Result]
If the function succeeds the result is True, if it fails the result is False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Files and Folders
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=DisplayContextMenu
<DECL>--------------------------------------------------------------------------
[Declaration]
function OverlayIcon(var Icon: HICON; Overlay: HICON; Large: Boolean): Boolean;
[ShortDescr]
Overlays Icon with OverlayIcon.
[Description]
OverlayIcon will overlay Icon with Overlay and return the result in Icon. If the
function succeeds the return value is True. If it fails the return value is
False in which case Icon retains its old value. The Large parameter controls
whether the icons are assumed to be large (True) or small (False).
[Parameters]
Count=3
1=Icon:HICON=Handle of the icon which you want to overlay.
2=Overlay:HICON=Handle of the overlay icon.
3=Large:Boolean=If True Icon and Overlay are assumed to be large icons, if False
they are assumed to be small icons. See Notes.
[Result]
If the function succeeds the result is True and Icon contains a handle to the
overlayed version. If the function fails the return value is False.
[Notes]
Count=1
1=The dimensions of large and small are determined by using the GetSystemMetrics
function with SM_CXICON, SM_CXSMICON respectively.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.51 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=OverlayIconShortcut
2=OverlayIconShared
<DECL>--------------------------------------------------------------------------
[Declaration]
function OverlayIconShortCut(var Large, Small: HICON): Boolean;
[ShortDescr]
Overlays an icon with the system 'shortcut' icon.
[Description]
OverlayIconShortCut overlays the icon passed in with the icon that the shell
uses to represent a shortcut. This function uses the <REF>OverlayIcon</REF>
function internally and the notes about icon sizes mentioned there apply here.
[Parameters]
Count=2
1=Large:HICON=On input this must be a valid handle to a large icon. On exit this
will be the handle of that same icon, overlayed with the shortcut icon.
2=Small:HICON=On input this must be a valid handle to a small icon. On exit this
will be the handle of that same icon, overlayed with the shortcut icon.
[Result]
If the function succeeds it returns True, if it fails it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.51 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=2
1=OverlayIcon
2=OverlayIconShared
<DECL>--------------------------------------------------------------------------
[Declaration]
function OverlayIconShared(var Large, Small: HICON): Boolean;
[ShortDescr]
Overlays an icon with the system 'shared' icon.
[Description]
OverlayIconShortCut overlays the icon passed in with the icon that the shell
uses to represent a shared item. This function uses the <REF>OverlayIcon</REF>
function internally and the notes about icon sizes mentioned there apply here.
[Parameters]
Count=2
1=Large:HICON=On input this must be a valid handle to a large icon. On exit this
will be the handle of that same icon, overlayed with the shared folder icon.
2=Small:HICON=On input this must be a valid handle to a small icon. On exit this
will be the handle of that same icon, overlayed with the shared folder icon.
[Result]
If the function succeeds it returns True, if it fails it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=OverlayIcon
2=OverlayIconShortCut
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetSystemIcon(IconIndex: Integer; Flags: Cardinal): HICON;
[ShortDescr]
Retrieves the icon at the specified index from the system imagelist.
[Description]
GetSystemIcon returns the icon at specified index from the system imagelist. If
the function succeeds the result is a handle to that icon, otherwise it is 0. The
caller is responsible for eventually releasing the icon by calling DestroyIcon.
You can use the Flags parameter to modify the behavior of this function. You can
pass a combination of the flags specified in the documentation of SHGetFileInfo
API function. The most used flags are: SHGFI_SMALLICON and SHGFI_LARGEICON which
cause the function to return a small and large sized icon respectively. If you
pass in 0 then the function sets Flags to SHGFI_SHELLICONSIZE.
[Parameters]
Count=2
1=IconIndex:Integer=The index into the system imagelist of the icon you want to retrieve.
2=Flags:Cardinal=Flags that further specify the returned icon. This can be a
combination of the SHGFI_x flags listed in the documentation of SHGetFileInfo.
For example, you can set this flag to SHGFI_SMALLICON to get its small icon.
[Result]
Handle of the requested icon or 0 on failure. The caller is responsible for
destroying the icon when it is no longer used. Do that by calling the DestroyIcon
API function.
[Notes]
Count=2
1=If you assign the returned handle to the Handle property of a TIcon you don't
have to explicitly destroy the icon any longer. TIcon does that for you.
2=This function requires COM to be initialized. Delphi normally does that for
you but you may have to call CoInitialize yourself depending on the circumstances.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
TDllVersionInfo = _DllVersionInfo;
PDllVersionInfo = ^TDllVersionInfo;
_DllVersionInfo = packed record
  cbSize: DWORD;
  dwMajorVersion: DWORD;
  dwMinorVersion: DWORD;
  dwBuildNumber: DWORD;
  dwPlatformId: DWORD;
end;
[ShortDescr]
This record is used by <REF Target"..\SHDllGetVersion">SHDllGetVersion</REF> to return version information about a specified DLL.
[RecordFields]
Count=5
1=cbSize:DWORD=Set to the size of this record. Initialize is done by SHDllGetVersion.
2=dwMajorVersion:DWORD=Major version of the DLL
3=dwMinorVersion:DWORD=Minor version of the DLL
4=dwBuildNumber:DWORD=Build number of the DLL
5=dwPlatformId:DWORD=Identifies the platform for which this DLL was built.
Can be DLLVER_PLATFORM_WINDOWS or DLLVER_PLATFORM_NT which indicate generic Windows and Windows NT respectively.
[Quick Info]
BCB=3,4,5
Kind=Type
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=SHDllGetVersion;..\SHDllGetVersion
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHDllGetVersion(const FileName: string; var Version: TDllVersionInfo): Boolean;
[ShortDescr]
Reads version information from the specified file.
[Description]
SHDllGetVersion attempts to read version information from the specified file using
the well-known DllGetVersion exported function. This function is exported by all
the newer Windows shell related DLLs starting with shell version 4.71. FileName
should be the fully qualified name of the file for which to return version
information. If the function succeeds then the result is True, otherwise the result
is False and the <REF Target"Types\TDllVersionInfo">Version</REF> record contains garbage.
[Parameters]
Count=2
1=FileName:string=The fully qualified path name of the file for which you want
to retrieve version information. Most likely the name of a shell DLL. If the DLL
can be found on the search path then the filename is sufficient (for example
Shell32.dll does not have to include the path).
2=Version:TDllVersionInfo=Record which is filled with version information if the
function succeeds. See <REF Target"Types\TDllVersionInfo">TDllVersionInfo</REF>
[Result]
If the function succeeds the return value is True and the Version record is filled
with the version information. If the function fails the return value is False and
the Version record contains whatever it contained on entry.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows 2000 or Windows NT 4 with IE4.
Windows 95/98=Requires Windows 98 or later.
Requirements=Shell32 Version 4.71 or later.
[SeeAlso]
Count=1
1=TDllVersionInfo;Types\TDllVersionInfo
<DECL>--------------------------------------------------------------------------
[Declaration]
function ShellExec(const FileName: string; const Parameters: string; const Verb: string; CmdShow: Integer): Boolean;
[ShortDescr]
Performs an action on a file.
[Description]
ShellExec is a wrapper for the Win32 API function ShellExecuteEx which alleviates
some of the complexities of this function by providing defaults for some
of its lesser used parameters. This function performs an action specified on a
file which can be anything from executing the file to opening it using the associated
editor.
[Parameters]
Count=4
1=FileName:string=Name of the file or object on which to perform the action.
2=Parameters:string=Application parameters. The parameters must be separated by
spaces. To include double quotation marks, enclose each mark in a pair of quotation
marks. This parameter defaults to an empty string.
3=Verb:string=Specifies the action to be performed. The available verbs
depend on the type of object specified in the FileName parameter but some of the
more commonly used ones are 'open', 'print' and 'edit'. See the Platform SDK
documentation for more information. This parameter defaults to an empty string
which causes the default verb to be executed (usually 'open').
4=CmdShow:Integer=Flags that specify how the application should display when it is
opened. See the Platform SDK documentation on ShellExecute for more information.
Commonly used values are SW_HIDE and SW_SHOW. This parameter defaults to SW_SHOWNORMAL.
[Result]
If the function succeeds it returns True, otherwise it returns False. You can call
GetLastError to get more detailed information about the reason of failure.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Petr Vones;jcl@delphi-jedi.org
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=ShellExecAndWait
<DECL>--------------------------------------------------------------------------
[Declaration]
function ShellExecAndWait(const FileName: string; const Parameters: string; const Verb: string; CmdShow: Integer): Boolean;
[ShortDescr]
Performs an action on a file.
[Description]
ShellExexAndWait is a wrapper for the Win32 API function ShellExecuteEx which alleviates
some of the complexities of this function by providing defaults for some
of its lesser used parameters. This function performs an action specified on a
file which can be anything from executing the file to opening it using the associated
editor. This routine is identical to ShellExec except that this function waits
for the action to be completed. For example, when using this file to open a HTML
document, the function will launch the default webbrowser and then wait until the
browser terminates, only then will this function call return to its caller.
[Parameters]
Count=4
1=FileName:string=Name of the file or object on which to perform the action.
2=Parameters:string=Application parameters. The parameters must be separated by
spaces. To include double quotation marks, enclose each mark in a pair of quotation
marks. This parameter defaults to an empty string.
3=Verb:string=Specifies the action to be performed. The available verbs
depend on the type of object specified in the FileName parameter but some of the
more commonly used ones are 'open', 'print' and 'edit'. See the Platform SDK
documentation for more information. This parameter defaults to an empty string
which causes the default verb to be executed (usually 'open').
4=CmdShow:Integer=Flags that specify how the application should display when it is
opened. See the Platform SDK documentation on ShellExecute for more information.
Commonly used values are SW_HIDE and SW_SHOW. This parameter defaults to SW_SHOWNORMAL.
[Result]
If the function succeeds it returns True, otherwise it returns False. You can call
GetLastError to get more detailed information about the reason of failure.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Petr Vones;jcl@delphi-jedi.org
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=ShellExec
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHReallocMem(var P: Pointer; Count: Integer): Boolean;
[ShortDescr]
Reallocates (changes the size) a block of memory in the shell's memory space. The
contents of the block prior to reallocation are reserved but there is no guarantee
that the pointer will retain its value. The newly allocated block may be on a
different address if there is not enough room to expand it in place. Also the
actual size of the allocated block maybe slightly larger then the requested size
because of additional maintenance data (not accessible).
[Description]
SHReallocMem reallocates a specified memory block to a new size using the shell's
memory allocator. If on input P is not nil then it must point to a block of
memory previously allocated with the shell's memory allocator (SHGetMem or SHAllocMem).
[Parameters]
Count=2
1=P:Pointer=On input pointer to a memory block previously allocated with either
SHGetMem SHAllocMem or nil. In the latter case SHReallocMem functions just like
SHGetMem.
2=Count:Integer=Total size, in bytes, to (re)allocate. If 0 then the memory
pointed to be P (if not nil) is freed.
[Result]
If the function succeeds it returns True and P contains the address of the reallocated
memory block. If the function fails it returns False, and P will retain its value.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Memory Management
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=3
1=SHAllocMem
2=SHGetMem
3=SHFreeMem
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHGetMem(var P: Pointer; Count: Integer): Boolean;
[ShortDescr]
Allocates memory using the Shell's memory allocator.
[Description]
SHAllocMem allocates the specified amount of memory using the Shell's memory
allocator. If the allocation succeeds then P is set to point to the allocated
memory and the return value will be True. You should assume that the memory
contains random values. On failure, P retains its value and the return value
will be False.
[Parameters]
Count=2
1=P:Pointer=Pointer variable which returns the address of the allocated memory block
2=Count:Integer=Size, in byte, of the block of memory to allocate.
[Result]
If the function succeeds it returns True and P contains the address of the allocated
memory block. If the function fails then it returns False and P will be set to nil.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Memory Management
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=SHAllocMem
2=SHFreeMem
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHAllocMem(out P: Pointer; Count: Integer): Boolean;
[ShortDescr]
Allocates memory using the Shell's memory allocator.
[Description]
SHAllocMem allocates the specified amount of memory using the Shell's memory
allocator. If the allocation succeeds then the memory block is initialized to
all 0's, P is set to point to the allocated memory and the return value will be
True. On failure, P retains its value and the return value will be False.
[Parameters]
Count=2
1=P:Pointer=Pointer variable which returns the address of the allocated memory block
2=Count:Integer=Size, in bytes, of the block of memory to allocate.
[Result]
If the function succeeds it returns True and P contains the address of the allocated
memory block. If the function fails it returns False and P will be set to nil.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Memory Management
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=SHGetMem
2=SHFreeMem
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHFreeMem(var P: Pointer): Boolean;
[ShortDescr]
Frees the memory pointed to by P.
[Description]
SHFreeMem frees the memory pointed to by P in the Shell's memory space. The memory
must be allocated by the Shell's memory allocator. On success P is set to nil
and the return value is True. On failure P retains its value and the return
value is False.
[Parameters]
Count=1
1=P:Pointer=Pointer to the memory block to free. If the function succeeds this
parameter is set to nil.
[Result]
If the function succeeds it returns True, if it fails it returns False. The latter
case means that either the shell's memory allocator couldn't be retrieved or that
the memory block wasn't allocated by the shell. Either case, the memory is not
freed and the P parameter retains its value.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Memory Management
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=SHAllocMem
2=SHGetMem
<DECL>--------------------------------------------------------------------------
[Declaration]
TShortCut = record
  Arguments: string;
  ShowCmd: Integer;
  WorkingDirectory: string;
  IdList: PItemIDList;
  Target: string;
  Description: string;
  IconLocation: string;
  IconIndex: Integer;
  HotKey: Word;
end;
PShortCut = ^TShortCut;
[ShortDescr]
The TShortCut record is used when creating or resolving shortcuts with
the <REF Target"..\ShortCutCreate">ShortCutCreate</REF>
, <REF Target"..\ShortCutCreateSystem">ShortCutCreateSystem</REF>
and <REF Target"..\ShortCutResolve">ShortCutResolve</REF> functions.
[RecordFields]
Count=9
1=Arguments:string=Command line arguments associated with the shell link
2=ShowCmd:Integer=The show command (SW_XXX constant)
3=WorkingDirectory:string=Working directory of the shell link
4=IdList:PItemIdList=List of item identifiers (pidl's)
5=Target:string=Target (fully qualified) of the shell link
6=Description:string=Description of the shell link
7=IconLocation:string=Location (fully qualified filename) of the file that contains the icon for this shell link
8=IconIndex:Integer=Index of the icon in the file specified by IconLocation
9=HotKey:Word=Hotkey that activates the shell link
[Notes]
Count=2
1=To avoid problems you should set the IdList field to nil before using this record.
2=You must call ShortCutFree when you no longer need the TShortCut record.
[Quick Info]
BCB=3,4,5
Kind=Type
Unit=JclShell
Category=Shell
SubCat=Shortcuts
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=3
1=ShortCutCreate;..\ShortCutCreate
2=ShortCutCreateSystem;..\ShortCutCreateSystem
3=ShortCutResolve;..\ShortCutResolve
4=ShortCutFree;..\ShortCutFree
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure ShortCutFree(var ShortCut: TShortCut);
[ShortDescr]
Releases resources held by the ShortCut record.
[Description]
ShortCutFree releases the resources held by the <REF Target"Types\TShortCut">ShortCut</REF>
parameter. You must call this function when you no longer need the record, 
otherwise your application leaks memory.
[Parameters]
Count=1
1=ShortCut:TShortCut=The <REF Target"Types\TShortCut">TShortCut</REF> record used earlier
in <REF>ShortCutCreate</REF>, <REF>ShortCutCreateSystem</REF> or <REF>ShortCutResolve</REF>.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Shortcuts
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=4
1=ShortCutResolve
2=ShortCutCreate
3=ShortCutCreateSystem
4=TShortCut;Types\TShortCut
<DECL>--------------------------------------------------------------------------
[Declaration]
function ShortCutResolve(const FileName: string; var ShortCut: TShortCut): HRESULT;
[ShortDescr]
Resolves a shortcut.
[Description]
ShortCutResolve resolves the shortcut specified by FileName parameter and returns
information about it in the <REF Target"Types\TShortCut">ShortCut</REF> parameter.
On success the return value is S_OK, on failure an OLE error code.
[Parameters]
Count=2
1=FileName:string=Fully qualified name of the shortcut file to resolve.
2=ShortCut:TShortCut=<REF Target"Types\TShortCut">TShortCut</REF> record which retrieves the details about the specified shortcut.
[Result]
If the function succeeds it returns S_OK. If it fails it returns an OLE error code.
[Notes]
Count=1
1=You must free the TShortCut record by calling <REF>ShortCutFree</REF>
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Shortcuts
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=4
1=ShortCutCreate
2=ShortCutCreateSystem
3=ShortCutFree
4=TShortCut;Types\TShortCut
<DECL>--------------------------------------------------------------------------
[Declaration]
function ShortCutCreate(const ShortCut: TShortCut; const FileName: string): HRESULT;
[ShortDescr]
Creates a new shortcut.
[Description]
ShortCutCreate creates a new shortcut specified by filename. If the function
succeeds it returns S_OK otherwise it returns an OLE error code.
See <REF Target"Types\TShortCut">TShortCut</REF> for information about the ShortCut
parameter.
[Parameters]
Count=2
1=ShortCut:TShortCut=<REF Target"Types\TShortCut">TShortCut</REF> record with the details about the shortcut to create.
2=FileName:string=Fully qualified Filename for the new shortcut.
[Result]
If the function succeeds the shortcut is created and the return value is S_OK. If
the function fails the return value is an OLE error code.
[Notes]
Count=1
1=You must free the TShortCut record by calling <REF>ShortCutFree</REF>
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Shortcuts
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=4
1=ShortCutCreateSystem
2=ShortCutResolve
3=ShortCutFree
4=TShortCut;Types\TShortCut
<DECL>--------------------------------------------------------------------------
[Declaration]
function ShortCutCreateSystem(const ShortCut: TShortCut; const Folder: Integer; const FileName: string): HRESULT;
[ShortDescr]
Creates a new shortcut in the specified system folder.
[Description]
ShortCutCreateSystem creates a new shortcut specified by FileName in the system
folder specified by the Folder parameter (CSIDL_XXX constants). FileName can
contain a path but not a drive specification. See <REF Target"Types\TShortCut">TShortCut</REF> for information about the ShortCut parameter. If the function succeeds it returns
S_OK otherwise it returns an OLE error code.
[Parameters]
Count=3
1=ShortCut:TShortCut=<REF Target"Types\TShortCut">TShortCut</REF> record with the details about the shortcut to create.
2=Folder:Integer=The folder in which to create the shortcut. This must be set to one of the CSIDL_x constants.
3=FileName:string=Filename for the new shortcut. This can include a folder but no drive indication.
[Result]
If the function succeeds the shortcut is created and the return value is S_OK. If
the function fails the return value is an OLE error code.
[Notes]
Count=1
1=You must free the TShortCut record by calling <REF>ShortCutFree</REF>
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Shortcuts
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=4
1=ShortCutCreate
2=ShortCutResolve
3=ShortCutFree
4=TShortCut;Types\TShortCut
<DECL>--------------------------------------------------------------------------
[Declaration]
function SHGetItemInfoTip(const Folder: IShellFolder; Item: PItemIdList): string;
[ShortDescr]
Returns the item's info tip.
[Description]
GetItemInfoTip returns the infotip (hint) associated with the specified item.
Set Item to the item identifier for which you want to retrieve the infotip and set
Folder to the parent of the supplied item. If the function fails or the specified
item does not have an infotip the result is an empty string.
[Parameters]
Count=2
1=Folder:IShellFolder=Parent folder of the Item
2=Item:PItemIdList=Item for which to retrieve the infotip
[Result]
The item's infotip or an empty string if the function fails.
[Notes]
Count=1
1=The returned string may contain multiple carriage return linefeed (#13#10) combinations
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Miscellaneous
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrRetFreeMem(StrRet: TStrRet): Boolean;
[ShortDescr]
Frees the memory associated with the StrRet record.
[Description]
If the supplied StrRet record is of type STRRET_WSTR then this function frees
the memory associated with this record's pOleStr member. If the StrRet record
is a different type this function does nothing.
[Parameters]
Count=1
1=The TStrRet record for which to free the memory associated with the pOleStr member.
[Result]
If the function releases the memory it returns True. If it fails to free the
memory or the StrRet record is not of STRRET_WSTR type then the return value is False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=StrRetToString
<DECL>--------------------------------------------------------------------------
[Declaration]
function StrRetToString(IdList: PItemIdList; StrRet: TStrRet; Free: Boolean): string;
[ShortDescr]
Converts a TStrRet record to a string.
[Description]
StrRetToString converts the StrRet record to a Delphi long string. If the function
succeeds it returns the converted string, if it fails it returns an empty string.
If Free is set to False you must manually release the memory associated with the
StrRet.pOleStr member by using the <REF>StrRetFreeMem</REF>.
function.
[Parameters]
Count=3
1=IdList:PItemIdList=The item identifier list for which the TStrRet record is supplied
in the StrRet parameter (only used when StrRet.uType = STRRET_OFFSET). 
2=StrRet:TStrRet=The TStrRet record to convert to a string.
3=Free:Boolean=Determines whether the memory associated with the pOleStr member
of StrRet is freed (only applies if StrRet.uType = STRRET_WSTR).
[Result]
If the function succeeds it returns the string extracted from the StrRet parameter.
If it fails the return value is an empty string.
[NOTES]
Count=1
1=Windows 2000 introduced StrRetToStr and StrRetToBuf which can be used instead.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=StrRetFreeMem
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlToPath(IdList: PItemIdList): string;
[ShortDescr]
Converts an item identifier list to a path.
[Description]
PidlToPath converts the supplied item identifier list to its path representation.
If the function succeeds the path representation is returned as the function
result. On failure the function returns an empty string.
[Parameters]
Count=1
1=IdList:PItemIdList=The item identifier list to convert to a path.
[Result]
If the function succeeds it returns the path of the specified pidl. If it fails
it returns an empty string.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=PathToPidl
2=PathToPidlBind
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathToPidl(const Path: string; Folder: IShellFolder): PItemIdList;
[ShortDescr]
Converts a path to an item identifier list.
[Description]
PathToPidl converts the supplied path to an item identifier list relative to the
folder given by the Folder parameter. If the Folder parameter is nil then the
resulting item identifier list will be relative to the desktop, in other words:
it's an absolute item identifier list. If the function fails the result is nil.
[Parameters]
Count=2
1=Path:string=The fully qualified path to convert to an item identifier list
2=Folder:IShellFolder=The folder that the returned pidl must be relative to. If
you specify nil then the returned pidl will be relative to the desktop.
[Result]
If the function succeeds the return value is the item identifier list of the
specified path, relative to the specified Folder. If the function fails the
return value is nil. Note that the caller is responsible for eventually releasing
the memory associated with the returned pidl by calling <REF>PidlFree</REF>
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=PidlToPath
2=PathToPidlBind
<DECL>--------------------------------------------------------------------------
[Declaration]
function PathToPidlBind(const FileName: string; out Folder: IShellFolder): PItemIdList;
[ShortDescr]
Converts a path to an item identifier list and binds to its parent folder.
[Description]
PathToPidlBind converts the supplied path given by FileName to an item identifier
list and binds to the parent folder of this item. The item identifier list is
returned as the function result and the bound folder is returned in the Folder
parameter. If the function fails both result and the Folder are set to nil.
[Parameters]
Count=2
1=FileName:string=The fully qualified name of the file or folder you want to bind to.
2=Folder:IShellFolder=On successful return contains a reference to the parent folder of the specified item.
[Result]
If the function succeeds the return value is the item identifier list of the
specified FileName, relative to the returned Folder. If the function fails the
return value is nil. Note that the caller is responsible for eventually releasing
the memory associated with the returned pidl by calling <REF>PidlFree</REF>.
[Notes]
Count=1
1=This function will correctly handle drives but you should use <REF>DriveToPidlBind</REF>
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=3
1=PathToPidl
2=PidlToPath
3=DriveToPidlBind
<DECL>--------------------------------------------------------------------------
[Declaration]
function DriveToPidlBind(const DriveName: string; out Folder: IShellFolder): PItemIdList;
[ShortDescr]
Converts a drive to an item identifier list and binds to the CSIDL_DRIVES folder.
[Description]
DriveToPidlBind converts the specified drive to an item identifier list and binds
Folder to the CSIDL_DRIVES special folder (which is the parent of all drives).
You should specify drive as "c:" or "c:\" where c can be replaced by any valid
drive. If the function fails both Folder and the result are set to nil.
[Parameters]
Count=2
1=DriveName:string=The drive you want to bind to. Pass in "x:" or "x:\" (replace 'x' with the required drive).
2=Folder:IShellFolder=On success the Folder contains a reference to the parent
of the specified drive. This will always be the CSIDL_DRIVES folder.
[Result]
If the function succeeds the return value is the item identifier list of the
specified drive, relative to the returned Folder. On failure the return value
is nil. Note that the caller is responsible for eventually releasing the returned
pidl by calling <REF>PidlFree</REF>.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=PathToPidlBind
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlBindToParent(const IdList: PItemIdList; out Folder: IShellFolder; out Last: PItemIdList): Boolean;
[ShortDescr]
Binds the Folder to the parent folder of the specified item identifier.
[Description]
PidlBindToParent binds Folder to the parent folder of the absolute item identifier
specified in IdList. The function also returns an item identifier for the IdList
but relative to the parent folder. If the function succeeds it returns True, on
failure it returns False
[Parameters]
Count=3
1=IdList:PItemIdList=The item identifier list to whose parent folder you want to bind.
2=Folder:IShellFolder=On return contains a reference to the parent folder of IdList.
3=Last:PItemIdList=Item identifier list of IdList but relative to Folder.
[Result]
If the function succeeds the return value is True, otherwise the return value is
False. In this latter case the Folder and Last parameter will contain nil on return.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=1
1=PathToPidlBind
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlCompare(const Pidl1, Pidl2: PItemIdList): Boolean;
[ShortDescr]
Compares two item identifier lists.
[Description]
PidlCompare compares the two supplied item identifier lists (pidl's). If they are
equal the result is True, otherwise the result is False. Note that if both pidl's
are nil they considered equal. Equality is determined by directly comparing the
memory block that the item identifier lists point to. This may lead to incorrect
results because a namespace extension is free to implement a pidl in any way
it likes. To compare pidl's in a reliable manner you must use the IShellFolder's
CompareIDs method.
[Parameters]
Count=2
1=Pidl1:PItemIdList=An item identifier list to compare against Pidl2
2=Pidl2:PItemIdList=An item identifier list to compare against Pidl1
[Result]
If the two pidl's are equal the function returns True, if they are not equal it
returns False.
[Quick Info]
BCB=3,4,5
Author=Marcel van Brakel;brakelm@bart.nl
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.0 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlCopy(const Source: PItemIdList; out Dest: PItemIdList): Boolean;
[ShortDescr]
Copies the item identifier list from source into destination.
[Description]
PidlCopy copies the item identifier list given by source into dest. If the item
identifier list was successfully copied the result is True, otherwise the result
is False. Note that the item identifier list given by Dest is not freed before
the copy operation. Also, if Source is nil then Dest will be set to nil and the
return value is False.
[Parameters]
Count=2
1=Source:PItemIdList=The item identifier to copy.
2=Dest:PItemIdList=The item identifier that receives a copy of Source. Note that
you must eventually free this item identifier by calling <REF>PidlFree</REF>
[Result]
If the function succeeds then the return value is True, otherwise it is False.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.0 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlFree(var IdList: PItemIdList): Boolean;
[ShortDescr]
Frees the given item identifier list.
[Description]
PidlFree frees the memory associated with the item identifier list given by IdList.
If the memory was successfully freed the IdList is set to nil and the function
returns True. If the memory could not be freed the result is False. This function
assumes that the memory associated with the item identifier was allocated by the
Shell's memory allocator and will fail if this is not the case.
[Parameters]
Count=1
1=IdList:PItemIdList=The item identifier list whose associated memory shall be freed
[Result]
If the function succeeds the return value is True and IdList is set to nil. If
the function fails the return value is False and the IdList parameter will retain
its value.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.0 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlGetDepth(const Pidl: PItemIdList): Integer;
[ShortDescr]
Returns the depth of the given item identifier list.
[Description]
PidlGetDepth returns the number of items in the item identifier list excluding
the zero terminator.
[Parameters]
Count=1
1=Pidl:PItemIdList=The item identifier list for which to determine the depth.
[Result]
The depth of the item identifier list. If the supplied pidl is either unassigned
or empty the function returns 0. If the pidl is invalid (depth is greater than
MAX_PATH) the function returns -1.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.0 or later.
[SeeAlso]
Count=1
1=PidlGetLength
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlGetLength(const Pidl: PItemIdList): Integer;
[ShortDescr]
Returns the length of the given item identifier list.
[Description]
PidlGetLength returns the size in bytes of the item identifier list, excluding
the zero terminator. Note that by definition the length of a pidl should equal
IMalloc.GetSize(Pidl) - 2. This function does not rely on that and instead walks
the entire list, summing the size of the individual item identifiers.
[Parameters]
Count=1
1=Pidl:PItemIdList=The item identifier list for which to calculate the length.
[Result]
The length, in bytes, of the item identifier list. If the supplied pidl is either
unassigned or empty the result value is 0. If the pidl is invalid (depth greater
than MAX_PATH) the function returns -1.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.0 or later.
[SeeAlso]
Count=1
1=PidlGetDepth
<DECL>--------------------------------------------------------------------------
[Declaration]
function PidlGetNext(const Pidl: PItemIdList): PItemIdList;
[ShortDescr]
Returns the next item identifier in the supplied item identifier list.
[Description]
PidlGetNext returns the next item identifier in the supplied item identifier list
or nil if there is no next item identifier (the null terminating pidl is not
considered an item identifier). The returned item identifier is simply a pointer
and as such should not be freed using <REF>PidlFree</REF>.
[Parameters]
Count=1
1=Pidl:PItemIdList=Item identifier list for which to retrieve the next element.
[Result]
The next element in the supplied item identifier list, or nil if there is no next element.
[Quick Info]
BCB=3,4,5
Unit=JclShell
Category=Shell
SubCat=Paths and PIDLs
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 4 or later.
Windows 95/98=Requires Windows 95 or later.
Requirements=Shell32 Version 4.00 or later.
[SeeAlso]
Count=2
1=PidlGetDepth
2=PidlGetLength
