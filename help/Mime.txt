<DECL>--------------------------------------------------------------------------
[Declaration]
EJclMimeError = class (<REF Target"..\Types\EJclError">EJclError</REF>);
[ShortDescr]
Base class for exceptions raised in response to MIME encoding/decoding errors.
[Description]
The EJclMimeError class is the exception class that is raised when an error occurs
within one of MIME-routines.
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function MimeEncodeString(const s: AnsiString): AnsiString;
[ShortDescr]
MIME-Encodes a string
[Description]
MimeEncodeString encodes the supplied string with a MIME64 encoding algorithm.
[Parameters]
Count=1
1=s:string=String to be encoded
[Result]
MIME encoded string
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=4
1=MimeDecodeString
2=MimeEncodeStream
3=MimeEncode
4=MimeEncodedSize
<DECL>--------------------------------------------------------------------------
[Declaration]
function MimeDecodeString(const s: AnsiString): AnsiString;
[ShortDescr]
MIME-Decodes a string
[Description]
MimeDecodeString decodes the supplied MIME64-encoded string.
[Parameters]
Count=1
1=s:string=MIME64-encoded string to be decoded
[Result]
Decoded string
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=4
1=MimeEncodeString
2=MimeDecodeStream
3=MimeDecode
4=MimeDecodedSize
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure MimeEncodeStream(const InputStream: TStream; const OutputStream: TStream);
[ShortDescr]
MIME-Encodes a stream
[Description]
MimeEncodeStream encodes InputStream starting at the current position up to the
end and writes the result to OutputStream, again starting at the current
position. When done, it will not reset either stream's positions, but leave
InputStream at the last read position (i.e. the end) and OutputStream at the
last write position (which can, but is not always the end).
To encode the entire InputStream from beginning to end, make sure that its
offset is positioned at the beginning of the stream. You can force this by
issuing Seek (0, soFromBeginning) before calling this function.
[Parameters]
Count=2
1=InputStream:TStream=Input stream to be encoded
2=OutputStream:TStream=Output stream
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=4
1=MimeDecodeStream
2=MimeEncodeString
3=MimeEncode
4=MimeEncodedSize
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure MimeDecodeStream(const InputStream: TStream; const OutputStream: TStream);
[ShortDescr]
Decodes a MIME-encoded stream
[Description]
MimeDecodeStream decodes InputStream starting at the current position up to the
end and writes the result to OutputStream, again starting at the current
position. When done, it will not reset either stream's positions, but leave
InputStream at the last read position (i.e. the end) and OutputStream at the
last write position (which can, but is not always the end).
To decode the entire InputStream from beginning to end, make sure that its
offset is positioned at the beginning of the stream. You can force this by
issuing Seek (0, soFromBeginning) before calling this function.
[Parameters]
Count=2
1=InputStream:TStream=Input stream to be decoded
2=OutputStream:TStream=Output stream
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=4
1=MimeEncodeStream
2=MimeDecodeString
3=MimeDecode
4=MimeDecodedSize
<DECL>--------------------------------------------------------------------------
[Declaration]
function MimeEncodedSize(const i: Integer): Integer;
[ShortDescr]
Calculates the output size for encoding
[Description]
MimeEncodedSize calculates the output size of i MimeEncoded bytes. Use for <REF Target"MimeEncode">MimeEncode only.</REF>
[Parameters]
Count=1
1=i:Integer=Number of bytes to encode
[Result]
Number of bytes needed for encoding
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=2
1=MimeEncode
2=MimeDecodedSize
<DECL>--------------------------------------------------------------------------
[Declaration]
function MimeDecodedSize(const i: Integer): Integer;
[ShortDescr]
Calculates the output size for decoding
[Description]
MimeDecodedSize calculates the maximum output size of i MimeDecoded bytes. You
may use it for <REF Target"MimeDecode">MimeDecode</REF> to calculate the maximum amount of memory required for
decoding in one single pass.
[Parameters]
Count=1
1=i:Integer=Number of bytes to decode
[Result]
Maximum number of bytes needed for decoding
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=2
1=MimeDecode
2=MimeEncodedSize
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure MimeEncode(const InputBuffer: Pointer; const InputByteCount: Integer; const OutputBuffer: Pointer);
[ShortDescr]
The primary Mime encoding routine
[Description]
MimeEncode is the primary MIME-encoding routine and is used by <REF Target"MimeEncodeString">MimeEncodeString</REF>
and <REF Target"MimeEncodeStream">MimeEncodeStream</REF> but can also be used directly.<BR><B>
CAUTION:</B> OutputBuffer must have enough memory allocated to take all encoded
output. <REF Target"MimeEncodedSize">MimeEncodedSize</REF>(InputBytesCount) calculates this amount in bytes.
MimeEncode will then fill the entire OutputBuffer, so there is no
OutputBytesCount result for this procedure. Preallocating all memory at once (as
required by MimeEncode) avoids the time-consuming process of reallocation. If
InputBuffer and/or OutBuffer is/are nil an exception is raised. </P><P><B>
Note:</B> If not all data fits into memory at once, you can use MimeEncode multiple
times, but you must be very careful about the size of the InputBuffer. It should
be set to a number that is a multiple of 3.
[Parameters]
Count=3
1=InputBuffer:Pointer=Points to the memory block to encode
2=InputByteCount:Integer=Number of bytes to encode
3=OutputBuffer:Pointer=Points to the output buffer
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=2
1=MimeEncodedSize
2=MimeDecode
<DECL>--------------------------------------------------------------------------
[Declaration]
function MimeDecode(const InputBuffer: Pointer; const InputBytesCount: Integer; const OutputBuffer: Pointer): Integer;
[ShortDescr]
The primary Mime decoding routine
[Description]
MimeDecode is the primary MIME-decoding routine and can also be used directly.
CAUTION: OutputBuffer must have enough memory allocated to take all output.
<REF Target"MimeDecodedSize">MimeDecodedSize</REF>(InputBytesCount) calculates this amount in bytes. There is no
guarantee that all output will be filled after decoding. MimeDecode therefore
returns the actual number of bytes written to OutputBuffer. Preallocating all
memory at once (as is required by MimeDecode) avoids the time-consuming process
of reallocation. After calling MimeDecode, simply cut the allocated memory down
to OutputBytesCount, i.e. SetLength(OutString, OutputBytesCount). If InputBuffer
and/or OutBuffer is/are nil an exception is raised
[Parameters]
Count=3
1=InputBuffer:Pointer=Points to the memory block to encode
2=InputBytesCount:Integer=Number of bytes to encode
3=OutputBuffer:Pointer=Points to the output buffer
[Result]
Number of bytes actually written to the OutputBuffer
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=2
1=MimeDecodedSize
2=MimeEncode
<DECL>--------------------------------------------------------------------------
[Declaration]
function MimeDecodePartial(const InputBuffer: Pointer; const InputBytesCount: Integer; const OutputBuffer: Pointer; var ByteBuffer: Cardinal; var ByteBufferSpace: Cardinal): Integer;
[ShortDescr]
MIME decode a chunk of data in a multi-phase decoding routine
[Description]
MIME decodes a chunk of data in a mutli-phase decoding routine. It is used
within <REF Target"MimeDecodeString">MimeDecodeString</REF>, <REF Target"MimeDecodeStream">MimeDecodeStream,/REF> and <REF Target"MimeDecode">MimeDecode</REF>, but can also be used
directly. If either InputBuffer or OutBuffer are nil, an exception is raised. </P><P><B>
Note:</B> On first call ByteBuffer should be 0 (zero) and ByteBufferSpace should be
4. The values returned in these parameters should be used in the next call to
MimeDecodePartial or <REF Target"MimeDecodePartialEnd">MimeDecodePartialEnd</REF>.
[Parameters]
Count=5
1=InputBuffer:Pointer=Points to the memory block to decode
2=InputBytesCount:Integer=Number of bytes to decode
3=OutputBuffer:Pointer=Points to the output buffer
4=ByteBuffer:Cardinal=Bytes of buffer from previous call
5=ByteBufferSpace:Cardinal=Number of bytes to read before ByteBuffer is full
[Result]
Number of bytes actually written to the OutputBuffer
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=1
1=MimeDecodePartialEnd
<DECL>--------------------------------------------------------------------------
[Declaration]
function MimeDecodePartialEnd(const OutputBuffer: Pointer; const ByteBuffer: Cardinal; const ByteBufferSpace: Cardinal): Integer;
[ShortDescr]
MIME decode the last chunk of data in a multi-phase decoding routine
[Description]
MIME decodes the last chunk of data in a mutli-phase decoding routine. It is
used within <REF Target"MimeDecodeString">MimeDecodeString</REF>, <REF Target"MimeDecodeStream">MimeDecodeStream,/REF> and <REF Target"MimeDecode">MimeDecode</REF>, but can also be
used directly. If OutBuffer is nil, an exception is raised. </P><P><B>
Note:</B> ByteBuffer and ByteBufferSpace are the values returned in the last call to
<REF Target"MimeDecodePartial">MimeDecodePartial</REF>.
[Parameters]
Count=3
1=OutputBuffer:Pointer=Points to the output buffer
2=ByteBuffer:Cardinal=Bytes of buffer from previous call
3=ByteBufferSpace:Cardinal=Number of bytes to read before ByteBuffer is full
[Result]
Number of bytes actually written to the OutputBuffer
[Quick Info]
Unit=JclMime
Category=MIME
Author=Ralf Junker;<ralfjunker@gmx.de>
Delphi=4,5
[SeeAlso]
Count=1
1=MimeDecodePartial
