<DECL>--------------------------------------------------------------------------
[Declaration]
function FileTimeToLocalDateTime(const FileTime: TFileTime): TDateTime;
[ShortDescr]
Converts a UTC based TFileTime to a local TDateTime.
[Description]
FileTimeToLocalDateTime converts the supplied, UTC based TFileTime to a local
TDateTime.
[Parameters]
Count=1
1=FileTime:TFileTime=The UTC based TFileTime to convert.
[Result]
The TFileTime converted to local TDateTime. On failure the function raises an exception.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Petr Vones;petr.v@mujmail.cz
Delphi=3,4,5
[SeeAlso]
Count=5
1=DosDateTimeToSystemTime
2=SystemTimeToDosDateTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
5=FileTimeToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileTimeToDosDateTime(const FileTime: TFileTime): TDosDateTime; 
[ShortDescr]
Converts a UTC based TFileTime to a TDateTime.
[Description]
FileTimeToDosDateTime converts the supplied, UTC based TFileTime to a TDateTime.
[Parameters]
Count=1
1=FileTime:TFileTime=The UTC based TFileTime to convert.
[Result]
The TFileTime converted to TDateTime. On failure the function raises an exception.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=5
1=DosDateTimeToSystemTime
2=SystemTimeToDosDateTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
5=FileTimeToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileTimeToSystemTime(const FileTime: TFileTime): TSystemTime; 
[ShortDescr]
Converts a UTC based TFileTime to a TSystemTime.
[Description]
FileTimeToSystemTime converts the supplied, UTC based TFileTime to a TSystemTime.
[Parameters]
Count=1
1=FileTime:TFileTime=The UTC based TFileTime to convert.
[Result]
The TFileTime converted to TSystemTime
[Notes]
Count=1
1=This function performs the same operation as the procedure FileTimeToSystemTime from Windows.pas.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=5
1=DosDateTimeToSystemTime
2=SystemTimeToDosDateTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
5=FileTimeToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileTimeToDateTime(const FileTime: TFileTime): TDateTime;
[ShortDescr]
Converts a TFileTime to a TDateTime.
[Description]
FileTimeToDateTime converts the supplied TFileTime to a TDateTime, ignoring whether
the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=FileTime:TFileTime=The TFileTime to convert.
[Result]
The TFileTime converted to TDateTime.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=5
1=DosDateTimeToSystemTime
2=SystemTimeToDosDateTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
5=FileTimeToLocalDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function DosDateTimeToSystemTime(const DosTime: TDosDateTime): TSystemTime;
[ShortDescr]
Converts a TDoaDateTime to a TSystemTime.
[Description]
DosDateTimeToSystemTime converts the supplied TDosDateTime to a TSystemTime,
ignoring whether the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=DosTime:TDosDateTime=The TDosDateTime to convert.
[Result]
The TDosDateTime converted to TSystemTime.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Petr Vones;petr.v@mujmail.cz
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=SystemTimeToDosDateTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function SystemTimeToDosDateTime(const SystemTime: TSystemTime): TDosDateTime;
[ShortDescr]
Converts a TSystemTime to a TDosDateTime.
[Description]
SystemTimeToDosDateTime converts the supplied TSystemTime to a TDosDateTime,
ignoring whether the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=SystemTime:TSystemTime=The TSystemTime to convert.
[Result]
The TSystemTime converted to TDosDateTime. On failure the function raises an exception.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Petr Vones;petr.v@mujmail.cz
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function SystemTimeToFileTime(const SystemTime: TSystemTime): TFileTime; 
[ShortDescr]
Converts a TSystemTime to a TFileTime.
[Description]
SystemTimeToFileTime converts the supplied TSystemTime to a TFileTime.
[Parameters]
Count=1
1=SystemTime:TSystemTime=The TSystemTime to convert.
[Result]
The TSystemTime converted to TFileTime. On failure the function raises an exception.
[Notes]
Count=1
1=This function performs the same operation as the procedure SystemTimeToFileTime from Windows.pas.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function SystemTimeToStr(const SystemTime: TSystemTime): string;
[ShortDescr]
Converts a TSystemTime to a string.
[Description]
SystemTimeToFileTime converts the supplied TSystemTime to a string.
[Parameters]
Count=1
1=SystemTime:TSystemTime=The TSystemTime to convert.
[Result]
String representation of the supplied SystemTime.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=DosDateTimeToDateTime
4=DateTimeToDosDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function DosDateTimeToDateTime(const DosTime: TDosDateTime): TDateTime;
[ShortDescr]
Converts a TDosDateTime to a TDateTime.
[Description]
DosDateTimeToDateTime converts the supplied TDosDateTime to a TDateTime, ignoring
whether the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=DosTime:TDosDateTime=The TDosDateTime to convert.
[Result]
The TDosDateTime converted to TDateTime.
[Notes]
Count=1
1=This function performs the same operation as the procedure DateTimeToFileDate from SysUtils.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=SystemTimeToDosDateTime
4=DateTimeToDosDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function DosDateTimeToFileTime(DosTime: TDosDateTime): TFileTime; 
[ShortDescr]
Converts a TDosDateTime to a TFileTime.
[Description]
DosDateTimeToFileTime converts the supplied TDosDateTime to a TFileTime, ignoring
whether the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=DosTime:TDosDateTime=The TDosDateTime to convert.
[Result]
The TDosDateTime converted to TFileTime. On failure the function raises an exception.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=SystemTimeToDosDateTime
4=DateTimeToDosDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function DateTimeToDosDateTime(const DateTime: TDateTime): TDosDateTime;
[ShortDescr]
Converts a TDateTime to a TDosDateTime.
[Description]
DateTimeToDosDateTime converts the supplied TDateTime to a TDosDateTime, ignoring
whether the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=DateTime:TDateTime=The TDateTime to convert.
[Result]
The TDateTime converted to TDosDateTime.
[Notes]
Count=1
1=This function performs the same operation as DateTimeToFileDate from SysUtils.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=SystemTimeToDosDateTime
4=DosDateTimeToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function DateTimeToFileTime(DateTime: TDateTime): TFileTime;
[ShortDescr]
Converts a TDateTime to a TFileTime.
[Description]
DateTimeToFileTime converts the supplied TDateTime to a TFileTime, ignoring
whether the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=DateTime:TDateTime=The TDateTime to convert.
[Result]
The TDateTime converted to TFileTime.
[Notes]
Count=1
1=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=SystemTimeToDosDateTime
4=DosDateTimeToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function DateTimeToSystemTime(DateTime: TDateTime): TSystemTime; 
[ShortDescr]
Converts a TDateTime to a TSystemTime.
[Description]
DateTimeToSystemTime converts the supplied TDateTime to a TSystemTime, ignoring
whether the supplied DateTime is UNC based or local.
[Parameters]
Count=1
1=DateTime:TDateTime=The TDateTime to convert.
[Result]
The TDateTime converted to TSystemTime.
[Notes]
Count=2
1=DateTimeToSystemTime just calls the VCL procedure DateTimeToSystemTime
2=The JCL DateTime conversion functions supplement routines found in the Delphi
RTL and the Win32 API. If a conversion function is not included here it most likely
can be found in either of those libraries.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=4
1=FileTimeToDateTime
2=DosDateTimeToSystemTime
3=SystemTimeToDosDateTime
4=DosDateTimeToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function LocalDateTimeToDateTime(DateTime: TDateTime): TDateTime;
[ShortDescr]
Converts a local TDateTime to a UNC based TDateTime
[Description]
LocalDateTimeToDateTime converts a local TDateTime to a UNC (coordinated universal
time) based TDateTime. The function uses the settings for the time zone and daylight
saving time.
[Parameters]
Count=1
1=DateTime:TDateTime=The local TDateTime to convert to UNC based time.
[Result]
The UNC based TDateTime. If the function fails it raises an EJclDateTimeError exception.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function LocalDateTimeToFileTime(DateTime: TDateTime): FileTime;
[ShortDescr]
Converts a local TDateTime to a UNC based TFileTime
[Description]
LocalDateTimeToFileTime converts a local TDateTime to a UNC (coordinated universal
time) based TFileTime. The function uses the settings for the time zone and daylight
saving time.
[Parameters]
Count=1
1=DateTime:TDateTime=The local TDateTime to convert to UNC based file time.
[Result]
The UNC based TFileTime. If the function fails it raises an EJclDateTimeError exception.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function DateTimeToLocalDateTime(DateTime: TDateTime): TDateTime;
[ShortDescr]
Converts a UNC based TDateTime to a local TDateTime
[Description]
DateTimeToLocalDateTime converts a UNC (coordinated universal time) based TDateTime
to a local TDateTime. The function uses the settings for the time zone and daylight
saving time.
[Parameters]
Count=1
1=DateTime:TDateTime=The UNC based TDateTime to convert to local time.
[Result]
The local TDateTime. If the function fails it raises an EJclDateTimeError exception.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function FileTimeToStr(const FileTime: TFileTime): string;
[ShortDescr]
Converts a TFileTime to a string.
[Description]
FileTimeToStr converts the TFileTime to a string.
[Parameters]
Count=1
1=FileTime:TFileTime=The TFileTime to convert.
[Result]
The string representation of FileTime.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function DosDateTimeToStr(DateTime: Integer): string;
[ShortDescr]
Converts a DOS DateTime to a string.
[Description]
Converts a DOS DateTime to a string.
[Parameters]
Count=1
1=DateTime:Integer=The DOS DateTime to convert.
[Result]
String representation of the DOS DateTime or an empty string on failure.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
<DECL>--------------------------------------------------------------------------
[Declaration]
function TimeOfDateTimeToSeconds(DateTime: TDateTime): Integer;
[ShortDescr]
Returns the number of seconds in a DateTime.
[Description]
Returns the number of seconds in a DateTime. Basically it extracts the hour, minutes
and seconds from the date time and returns the result of the formula
(3600 * Hours) + (60 * Minutes) + Seconds, but is much faster than doing it this way.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime for which you want to know the number of seconds.
[Result]
The number of seconds in the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Heri Bender;hbender@ergonomics.ch
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function TimeOfDateTimeToMSecs(DateTime: TDateTime): Integer;
[ShortDescr]
Returns the number of milliseconds in a DateTime.
[Description]
Returns the number of milliseconds in a DateTime. Basically it extracts the hour, minutes
and seconds from the date time and returns the result of the formula
(3600000 * Hours) + (60000 * Minutes) + (1000 * Seconds) + MSek, but is much faster than doing it this way.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime for which you want to know the number of milliseconds.
[Result]
The number of milliseconds in the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function HoursToMSecs(Hours: Integer): Integer;
[ShortDescr]
Converts hours to milliseconds.
[Description]
HoursToMSecs converts hours to milliseconds. The maximum value for Hours is asserted
to Hours smaller than MaxInt / 60 / 60 / 1000.
[Parameters]
Count=1
1=Hours:Integer=The number of hours to convert to milliseconds.
[Result]
The number of milliseconds corresponding with Hours.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function MinutesToMSecs(Minutes: Integer): Integer;
[ShortDescr]
Converts minutes to milliseconds.
[Description]
MinutesToMSecs converts Minutes to milliseconds. The maximum value for Minutes is
asserted to Minutes smaller than MaxInt / 60 / 1000
[Parameters]
Count=1
1=Minutes:Integer=The number of minutes to convert to milliseconds.
[Result]
The number of milliseconds corresponding with Minutes.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function SecondsToMSecs(Seconds: Integer): Integer;
[ShortDescr]
Converts seconds to milliseconds.
[Description]
SecondsToMSecs converts Minutes to milliseconds. The maximum value for Seconds is
asserted to Seconds smaller than MaxInt / 1000
[Parameters]
Count=1
1=Seconds:Integer=The number of seconds to convert to milliseconds.
[Result]
The number of milliseconds corresponding with Seconds.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
SubCat=Conversion
Author=Charlie Calvert;ccalvert@inprise.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ISOWeekNumber(DateTime: TDateTime): Integer;
function ISOWeekNumber(DateTime: TDateTime; var YearOfWeekNumber: Integer): Integer;
function ISOWeekNumber(DateTime: TDateTime; var YearOfWeekNumber, WeekDay: Integer): Integer;
[ShortDescr]
Returns the week number of a given date. Optionally the reference-year for this week and the weekday can be requested
[Description]
ISOWeekNumber returns week number of the specified date according to
the ISO 8601 specification. Optionally the reference-year for this week and the 
weekday can be requested. In ISO 8601 weeks start with Monday and the first
week of a year is the one which includes the first Thursday. The function returns
the week number as the function result and the year through the var parameter.
[Parameters]
Count=3
1=DateTime:TDateTime=The DateTime for which to retrieve the year and week number.
2=YearOfWeekNumber:Integer=(Optional) The year the returned week belongs to.
3=WeekDay:Integer=(Optional) The day in this week.
[Result]
The function returns the week number of the specified DateTime. The year this
week belongs to and the day in this week are returned through the var parameters.
[Notes]
Count=3
1=The specified DateTime is assumed to be after 1/1/0001 and before 1/1/10000).
2=According to ISO 8601 the reference year for the week can be the same as in DateTime, the previous or the next year.
3=The constants ISOFirstWeekDay=2 and ISOFirstWeekMinDays=4 are defined for ISO compatibility.
Other values might be useful in some instances and can be set in the source code.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Peter J. Haas;PeterJHaas@t-online.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=ISOWeekToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function ISOWeekToDateTime(Year, Week, Day:Integer): TDateTime;
[ShortDescr]
Returns the date denoted by year, week and weekday. 
[Description]
ISOWeekToDateTime returns the date denoted by year, week and weekday. 
according to the ISO 8601 specification. 
[Parameters]
Count=3
1=Year:Integer=base-year of the ISO-week.
2=Week:Integer=ISO week of the year.
3=Day:Integer=Day in the week (1=Monday, ... 7=Sunday).
[Result]
The function returns the TDateTime value of the specified day
[Notes]
Count=3
1=The specified date is assumed to be after 1/1/0001 and before 1/1/10000).
2=According to ISO 8601 the reference year for the week can be the same as in DateTime, the previous or the next year.
3=The constants ISOFirstWeekDay=2 and ISOFirstWeekMinDays=4 are defined for ISO compatibility, 
Other values might be useful in some instances and can be set in the source code.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Peter J. Haas;PeterJHaas@t-online.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=ISOWeekNumber
<DECL>--------------------------------------------------------------------------
[Declaration]
function DayOfTheYear(DateTime: TDateTime; var Year: Integer): Integer;
function DayOfTheYear(DateTime: TDateTime): Integer;
[ShortDescr]
Returns the day of the year (1... 366) and optionally the year. 
[Description]
Returns the day of the year (1... 366) and optionally the year. 
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime for which to retrieve the year and the number of the day in that year.
2=Year:Integer=(Optional) The year of the date.
[Result]
The function returns the number of the day in that year.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;mschnell@marianne.gihub.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=DayOfTheYearToDateTime
<DECL>--------------------------------------------------------------------------
[Declaration]
function DayOfTheYearToDateTime(Year, Day: Integer): TDateTime;
[ShortDescr]
Encodes the DateTime denoted by a year and the number of a day in that year. 
[Description]
DayOfTheYearToDateTime encodes the DateTime denoted by a year and the number of a day in that year. 
[Parameters]
Count=2
1=Year:Integer=The year of the date.
2=Day:Integer=The number of a day in that year.
[Result]
The function returns the DateTime denoted by a year and the number of a day in that year. 
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;mschnell@marianne.gihub.de
Delphi=3,4,5
Windows NT/2000=Requires Windows NT 3.1 or later.
Windows 95/98=Requires Windows 95 or later.
[SeeAlso]
Count=1
1=DayOfTheYear
<DECL>--------------------------------------------------------------------------
[Declaration]
function EasterSunday(Year: Integer): TDateTime;
[ShortDescr]
Returns the date of Easter Sunday for a given year.
[Description]
EasterSunday returns the date of Easter Sunday for the specified year. The year
must be specified with 4 digits - for example 1999.
[Parameters]
Count=1
1=Year:Integer=The year for which you want to know the date of Easter Sunday.
[Result]
The date of Easter Sunday in the specified year.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Marc Convents;marc.convents@progen.be
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CenturyOfDate(DateTime: TDateTime): Integer;
[ShortDescr]
Extracts the century from a DateTime.
[Description]
CenturyOfDate returns the century of the specified DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then CenturyOfDate(D) returns 21
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the century.
[Result]
The century of the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Anthony Steele;asteele@iafrica.com
Delphi=3,4,5
[SeeAlso]
Count=4
1=CenturyBaseYear
2=DayOfDate
3=MonthOfDate
4=YearOfDate
<DECL>--------------------------------------------------------------------------
[Declaration]
function CenturyBaseYear(DateTime: TDateTime): Integer;
[ShortDescr]
Gives the year "00" of the century specified by DateTime.
[Description]
CenturyBaseYear returns the year "00" of the century specified by DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then CenturyBaseYear(D) returns 2000.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the year "00" of the century.
[Result]
The year "00" of the century of the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=4
1=CenturyOfDate
2=DayOfDate
3=MonthOfDate
4=YearOfDate
<DECL>--------------------------------------------------------------------------
[Declaration]
function YearOfDate(DateTime: TDateTime): Integer;
[ShortDescr]
Extracts the year from a DateTime.
[Description]
YearOfDate returns the year of the specified DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then YearOfDate(D) returns 2000.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the year.
[Result]
The year of the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
[SeeAlso]
Count=4
1=CenturyOfDate
2=CenturyBaseYear
3=DayOfDate
4=MonthOfDate
<DECL>--------------------------------------------------------------------------
[Declaration]
function MonthOfDate(DateTime: TDateTime): Integer;
[ShortDescr]
Extracts the month from a DateTime.
[Description]
Extracts the month from a DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then MonthOfDate(D) returns 2.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the month.
[Result]
The month of the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
[SeeAlso]
Count=4
1=CenturyOfDate
2=CenturyBaseYear
3=DayOfDate
4=YearOfDate
<DECL>--------------------------------------------------------------------------
[Declaration]
function DayOfDate(DateTime: TDateTime): Integer;
[ShortDescr]
Extracts the day from a DateTime.
[Description]
Extracts the day from a DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then DayOfDate(D) returns 17.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the day.
[Result]
The day of the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
[SeeAlso]
Count=4
1=CenturyOfDate
2=CenturyBaseYear
3=MonthOfDate
4=YearOfDate
<DECL>--------------------------------------------------------------------------
[Declaration]
function HourOfTime(DateTime: TDateTime): Integer;
[ShortDescr]
Extracts the hour from a DateTime.
[Description]
Extracts the hour from a DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then HourOfTime(D) returns 12.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the hour.
[Result]
The hour of the specified DateTime.
[Notes]
Count=2
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
2=12:00:00 AM evaluates to 0.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function MinuteOfTime(DateTime: TDateTime): Integer;
[ShortDescr]
Extracts the minutes from a DateTime.
[Description]
Extracts the minutes from a DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then MinuteOfTime(D) returns 37.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the minutes.
[Result]
The minutes of the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function SecondOfTime(DateTime: TDateTime): Integer;
[ShortDescr]
Extracts the seconds from a DateTime.
[Description]
Extracts the seconds from a DateTime.
For example: if D is assumed to be StrToDateTime('2/17/2000 12:37:21 PM');
then SecondOfTime(D) returns 21.
[Parameters]
Count=1
1=DateTime:TDateTime=The DateTime from which to extract the seconds.
[Result]
The seconds of the specified DateTime.
[Notes]
Count=1
1=The specified DateTime is assumed to be valid (with JCLDate negative years and dates > year 9999 are valid).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function IsLeapYear(DateTime: TDateTime): Boolean; 
function IsLeapYear(Year: Integer): Boolean; 
[ShortDescr]
Tests whether DateTime represents a leap year.
[Description]
Tests whether the specified Year or DateTime represents a leap year.
[Parameters]
Count=1
1=DateTime:TDateTime=The year or DateTime to test.
[Result]
True if DateTime is a leap year or False if it's not.
[Notes]
Count=1
1=The specified DateTime is assumed to be after 1/1/0001 and before 1/1/10000).
2=The overloaded function avoids an erroneous result if the user thinks he calls SysUtils.IsLeapYear
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function DaysInMonth(DateTime: TDateTime): Integer;
[ShortDescr]
Returns the number of days in the month represent by a DateTime.
[Description]
[Parameters]
Count=1
1=DateTime:TDateTime=DateTime that determines the month for which you want to know
the number of days.
[Result]
The number of days in the month in which DateTime lies.
[Notes]
Count=1
1=The specified DateTime is assumed to be after 1/1/0001 and before 1/1/10000).
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Nick Hodges;nick@xapware.com
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Make4DigitYear(Year, Pivot: Integer): Integer;
[ShortDescr]
Converts a 2 digit year into a 4 digit year.
[Description]
Make4DigitYear converts a two digit year into a 4 digit year using Pivot as the
base of a 100 year window. If Year is smaller the Pivot then the result will be
2000 + year, if the Year is greater or equal to Pivot the result is 1900 + Year.
[Parameters]
Count=2
1=Year:Integer=The 2 digit year to convert. Is asserted to be in the range 0..100
2=Pivot:Integer=The base of the 100 year window. Is asserted to be in the range 0..100
[Result]
The 4 digit year.
[Notes]
Count=1
1=If Year or Pivot is 100 they are converted to 0 first.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
[SeeAlso]
Count=1
1=MakeYear4Digit
<DECL>--------------------------------------------------------------------------
[Declaration]
function MakeYear4Digit(Year, WindowsillYear: Integer): Integer;
[ShortDescr]
Converts a 2 digit year into a 4 digit year.
[Description]
"Window" technique for years to translate 2 digits to 4 digits.
The window is 100 years wide. The windowsill year is the lower edge of the window.
A windowsill year of 1900 is equivalent to putting 1900 before every 2-digit year.
If WindowsillYear is 1940, then 40 is interpreted as 1940, 00 as 2000 and 39 as 2039.
A common default is 1950.
[Parameters]
Count=2
1=Year:Integer=The 2 digit year to convert. Is asserted to be in the range 0..100
2=WindowsillYear:Integer=windowsill year
[Result]
The 4 digit year.
[Notes]
Count=1
1=If Year is 100 it is converted to 0 first.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Anthony Steele
Delphi=3,4,5
[SeeAlso]
Count=1
1=Make4DigitYear
<DECL>--------------------------------------------------------------------------
[Declaration]
function EncodeDate(Year: Integer; Month, Day: Word): TDateTime; 
[ShortDescr]
Works like EncodeDate in SysUtils, but can do negative years and years > 9999.
[Description]
Works like EncodeDate in SysUtils, but can do negative years and years > 9999.
[Parameters]
Count=3
1=Year:Integer=Year of date to convert.
2=Month:Word=Month of date to convert.
3=Day:Word=Day of date to convert
[Result]
The date converted to TDateTime.
[Notes]
Count=4
1=With JCLDate negative years and dates > year 9999 are valid in nearly all functions handling TDateTime.
2=As people did not use 12 Months before year 0001, and supposedly will not after 9999, 
we just use the solar year and a month = 1/12 of a solar year in such years.
3=Year 0 does not exist.
4=To activate this function JCLDateTime must appear after SysUtils in the uses clause or it must be explicitly denoted as JCLDateTime.EncodeDate.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=1
1=DecodeDate
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure DecodeDate(Date: TDateTime; var Year, Month, Day: Word);
procedure DecodeDate(Date: TDateTime; var Year: Integer; var Month, Day: Word);
procedure DecodeDate(Date: TDateTime; var Year, Month, Day: Integer);
[ShortDescr]
Works like DecodeDate in SysUtils, but can do negative years and years > 9999.
[Description]
Works like EncodeDate in SysUtils, but can do negative years and years > 9999.
[Parameters]
Count=4
1=Date:TDateTime=date to be converted.
2=Year:Integer=Year of the converted date.
3=Month:Word=Month of the converted date.
4=Day:Word=Day of the converted date.
[Notes]
Count=4
1=With JCLDate negative years and dates > year 9999 are valid in nearly all functions handling TDateTime.
2=As people did not use 12 Months before year 0001, and supposedly will not after 9999, 
we just use the solar year and a month = 1/12 of a solar year in such years.
3=Year 0 does not exist.
4=To activate this function JCLDateTime must appear after SysUtils in the uses clause or it must be explicitly denoted as JCLDateTime.DecodeDate.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=1
1=EncodeDate
<DECL>--------------------------------------------------------------------------
[Declaration]
function CreationDateTimeOfFile(const SR: TSearchRec): TDateTime;
[ShortDescr]
Extracts the creation date of the file specified by SR.
[Description]
Extracts the creation date of the file specified by SR. SR must be defined by a previoous call of FindFirst or FindNext. 
[Parameters]
Count=1
1=SR: TSearchRec: SearchRecord holding the file information.
[Result]
The creation date date of the file specified by SR, converted to TDateTime.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=2
1=LastAccessDateTimeOfFile
2=LastWriteDateTimeOfFile
<DECL>--------------------------------------------------------------------------
[Declaration]
function LastAccessDateTimeOfFile(const SR: TSearchRec): TDateTime;
[ShortDescr]
Extracts the last access date of the file specified by SR.
[Description]
Extracts the last access date of the file specified by SR. SR must be defined by a previoous call of FindFirst or FindNext. 
[Parameters]
Count=1
1=SR: TSearchRec: SearchRecord holding the file information.
[Result]
The last access date date of the file specified by SR, converted to TDateTime.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=2
1=CreationDateTimeOfFile
2=LastWriteDateTimeOfFile
<DECL>--------------------------------------------------------------------------
[Declaration]
function LastWriteDateTimeOfFile(const SR: TSearchRec): TDateTime;
[ShortDescr]
Extracts the last write date of the file specified by SR.
[Description]
Extracts the last write date of the file specified by SR. SR must be defined by a previoous call of FindFirst or FindNext. 
[Parameters]
Count=1
1=SR: TSearchRec: SearchRecord holding the file information.
[Result]
The last write date date of the file specified by SR, converted to TDateTime.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=2
1=CreationDateTimeOfFile
2=LastAccessDateTimeOfFile
<DECL>--------------------------------------------------------------------------
[Declaration]
function FormatDateTime(Form: String; DateTime: TDateTime): String;
[ShortDescr]
Enhences FormatDateTime by the additional Format tokens w, i, e and f.
[Description]
Enhences FormatDateTime by additional Format tokens:
  <TABLE>
  <TR VALIGN="top">
  <TH align=left width=23%>Token</TH><TH align=left width=77%>Meaning</TH>
  </TR>
  <TR VALIGN="top">
  <TD width=23%>w or W</TD><TD width=77%>Week no according to ISO</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=23%>ww or WW</TD><TD width=77%>Week no according to ISO forced two digits</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=23%>ii or II</TD><TD width=77%>Year of the ISO-week denoted by w forced two digits</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=23%>iiii or IIII</TD><TD width=77%>Year of the ISO-week denoted by w (4 digits for 0001..9999)</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=23%>e or E</TD><TD width=77%>Number of the Day in the ISO-week denoted by w (ISO-Notation 1=Monday...)</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=23%>f or F</TD><TD width=77%>Number of the Day in the year denoted by y</TD>
  </TR>
  <TR VALIGN="top">
  <TD width=23%>fff or FFF</TD><TD width=77%> Number of the Day in the year denoted by y forced three digits</TD>
  </TR>
  </TABLE>
[Parameters]
Count=2
1=Form: String: Format String.
2=DateTime: TDateTime: Date to be formatted
[Result]
String holding the formatted date.
[Notes]
Count=2
1=To activate this function JCLDateTime must appear after SysUtils in the uses clause or it must be explicitly denoted as JCLDateTime.FormatDateTime.
2=The help for SysUtils.FormatDateTime does not state that unrecognized characters in the format string are passed unchanged. If this feature was erroneously used, JCLDateTime.FormatDateTime is not 100% compatible, as it defines additional tokens.
[Quick Info]
BCB=3,4,5
Unit=JclDateTime
Category=Date and Time
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
