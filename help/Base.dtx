@@$BaseServices
<GROUP JCL>
<TITLE Base Services>
<TOPICORDER 200>
--------------------------------------------------------------------------------
@@$BaseServices.Compatibility
<GROUP BaseServices>
<TITLE Compatibility>
<TOPICORDER 100>
--------------------------------------------------------------------------------
@@$BaseServices.Dynamicarrays
<GROUP BaseServices>
<TITLE Dynamic arrays>
<TOPICORDER 200>
--------------------------------------------------------------------------------
@@$BaseServices.Dynamicloading
<GROUP BaseServices>
<TITLE Dynamic loading>
<TOPICORDER 300>
--------------------------------------------------------------------------------
@@$BaseServices.EJclError
<GROUP BaseServices>
<TITLE EJclError>
<TOPICORDER 400>
--------------------------------------------------------------------------------
@@$BaseServices.EJclWin32Error
<GROUP BaseServices>
<TITLE EJclWin32Error>
<TOPICORDER 500>
--------------------------------------------------------------------------------
@@$BaseServices.FPCCompatibility
<GROUP BaseServices>
<TITLE FPC Compatibility>
<TOPICORDER 600>
--------------------------------------------------------------------------------
@@$BaseServices.Int64support
<GROUP BaseServices>
<TITLE Int64 support>
<TOPICORDER 700>
--------------------------------------------------------------------------------
@@$BaseServices.Numericformattingroutines
<GROUP BaseServices>
<TITLE Numeric formatting routines>
<TOPICORDER 800>
--------------------------------------------------------------------------------
@@$BaseServices.Pointermanipulation
<GROUP BaseServices>
<TITLE Pointer manipulation>
<TOPICORDER 900>
--------------------------------------------------------------------------------
@@$BaseServices.TObjectList
<GROUP BaseServices>
<TITLE TObjectList>
<TOPICORDER 1000>
--------------------------------------------------------------------------------
@@JclVersion
<GROUP BaseServices>
Summary:
  Constants describing the JCL version.
Description:
  The JclVersion constants define the version of JCL. Major, Minor, Release and
  Build are merely placeholders, you can lookup the actual value in JclBase.pas.
    <TABLE>
Constant           Description
-----------------  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JclVersion         All of the other version values packed into a single integer. The separate values are moved into the individual bytes. From the most significant byte towards the least significant: Major, Minor, Release, Build
JclVersionMajor    Major version of JCL
JclVersionMinor    Minor version of JCL. Incremented for each minor release such as when minor additions and/or bug fixes have been made
JclVersionBuild    Build number of JCL. This is roughly equivalent to the number of days that JCL has been worked on (starting February 2000)
JclVersionRelease  If set to 1 this is an official release. If 0 this is a preview or beta version.
</TABLE>

Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@string
<GROUP BaseServices.FPCCompatibility>
Summary:
  ResStringRec is a pointer to a resource string.
Description:
  ResStringRec is a pointer to a resource string used with the creation of exceptions.
  This type is provided for compatibility with FPC. When compiling with Delphi or
  Kylix use the type defined in SysUtils.pas instead.
Quick info:
  Donator: JCL Team
--------------------------------------------------------------------------------
@@SysErrorMessage
<GROUP BaseServices.FPCCompatibility>
Summary:
  Converts OS error codes into strings.
Description:
  SysErrorMessage returns an error message string that corresponds to the specified
  OS error code. This routine is provided for compatibility with FPC. When compiling
  with Delphi or Kylix use the SysErrorMessage from the RTL instead (SysUtils.pas).
Parameters:
  ErrNo - The Windows API error code for which to retrieve the associated error message.
Result:
  The error message string associated with the specified Windows API error code.
Quick info:
  Donator: JCL Team
--------------------------------------------------------------------------------
@@EJclError
<GROUP BaseServices.EJclError>
Summary:
  Base exception class for all JCL exceptions.
Description:
  EJclError is the base class used for all exception classes in the JCL. It inherits
  directly from Exception without adding any new functionality. It only exists to
  provide a distinction between exceptions raised by the JCL and those raised by
  the RTL/VCL and 3rd parties. It does introduce two constructors, CreateResRec and
  CreateResRecFmt, which are replacements for the Exception class methods CreateRes
  and CreateResFmt respectively (to remove the need for overloads and backwards
  compatibility).
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclError.CreateResRecFmt
Summary:
  Creates an instance of EJclError with a message loaded from the application's resource and then formatted.
Description:
  Creates an instance of EJclError with a message loaded from the application's
  resource and then formatted with additional information. The message is specified
  using the ResStringRec parameter and is used as:
    <p class="syntax">
    resourcestring
      RsMyResource = 'Oops, an error occurred with code %u';
    raise EJclError.CreateResRecFmt(@RsMyResource, [GetLastError]);
    </p>
Parameters:
  ResStringRec - Pointer to a resource string. See the example above.
  Args - Array of value used to format the message string with. See the Format function for more information on how to use these parameters (internally Format is used to do the formatting so the semantics are identical).
See also:
  CreateResRec
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclError.CreateResRec
Summary:
  Creates an instance of EJclError with a simple message loaded from the application's resource.
Description:
  Creates an instance of EJclError with a simple message loaded from the application's
  resource. The message is specified using the ResStringRec parameter and is used as:
    <p class="syntax">
    resourcestring
      RsMyResource = 'Oops, an error occurred';
    raise EJclError.CreateResRec(@RsMyResource);
    </p>
Parameters:
  ResStringRec - Pointer to a resource string. See the example above.
See also:
  CreateResRecFmt
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclWin32Error
<GROUP BaseServices.EJclWin32Error>
Summary:
  Base class for exceptions raised in response to Win32 errors.
Description:
  The EJclWin32Error exception class is used as the base class for exceptions that
  are raised in response to the failure of a Win32 API function that sets LastError.
  The EJclWin32Error constructors automatically call GetLastError, the result of which
  is made available to the programmer through the LastError property. Additionally it
  appends a human-readable string to the passed in exception Msg corresponding to
  the last error. This message is separated from the passed in Msg by a carriage
  return and is made available through the LastErrorMsg property.
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclWin32Error.Create
Summary:
  Instantiates an EJclWin32Error with a simple string.
Description:
  Create instantiates an EJclWin32Error exception class. The Msg
  parameter is the string which is displayed in the exception dialog box and is
  also available through the Message property.
Parameters:
  Msg - The string to be associated with the exception. The programmer can query the class for this string using the Message property. If the exception is unhandled the RTL displays this message in the exception dialog box.
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclWin32Error.CreateFmt
Summary:
  Instantiates an EJclWin32Error with a formatted string.
Description:
  CreateFmt instantiates EJclWin32Error exception class. The Msg
  parameter is the string which is displayed in the exception dialog box and is
  also available through the Message property. See the Format function for more
  information about formatting a string.
Parameters:
  Msg - String containing format specifiers to be replaced with values from the Args array.
  Args - Array of constants which are formatted according to the format specifiers in the Msg parameter.
See also:
  Create
  CreateRes
  CreateResRec
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclWin32Error.CreateRes
Summary:
  Instantiates an instance of EJclWin32Error with a string loaded from the application's resource.
Description:
  CreateRes instantiates an EJclWin32Error exception class. Ident must be the unique
  ID of a string resource which is displayed in the exception dialog box and is
  also available through the Message property.
Parameters:
  Ident - Unique ID of a string resource.
See also:
  Create
  CreateFmt
  CreateResRec
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclWin32Error.CreateResRec
Summary:
  Instantiates an instance of EJclWin32Error with a string loaded from the application's resource.
Description:
  CreateRes instantiates an EJclWin32Error exception class. ResStringRec is a pointer
  to a message which is loaded from the application's resource.
Parameters:
  ResStringRec - ResStringRec is a pointer to a resource string.
See also:
  Create
  CreateFmt
  CreateRes
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclWin32Error.LastError
Summary:
  Contains the LastError.
Description:
  The LastError property returns the error code retrieved by a call to GetLastError
  at the time the exception was raised.
See also:
  LastErrorMsg
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@EJclWin32Error.LastErrorMsg
Summary:
  Error string corresponding to LastError.
Description:
  The LastErrorMsg property contains the error message string associated with the last
  error code.
See also:
  LastError
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@Float
<GROUP BaseServices>
Summary:
  Generic floating point type.
Description:
  Float represents a generic floating point type and is used mostly in JclMath.
  Float is conditionally defined as either Extended, Double or Single with Extended
  being the default. You can change the type that Float is defined as globally
  by using the MATH_PRECISION_X compiler directives.
  See Compiler Directives
  for more information.
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@LongWord
<GROUP BaseServices>
Summary:
  Alias for Cardinal.
Description:
  LongWord is an alias for Cardinal and as such represents an unsigned 32-bit
  integer. For Delphi 4 and C++ Builder 4 up this type is 'defined' in System.pas,
  in earlier versions this type didn't exist so it is defined in JclBase.
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@TSysCharSet
<GROUP BaseServices>
Summary:
  A set of characters.
Description:
  TSysCharSet represents a set of characters. For Delphi 4 and C++ Builder 4 up this
  type is defined in SysUtils, in earlier versions this type didn't exist so it is
  defined in JclBase.
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@I64Assign
<GROUP BaseServices.Int64support>
Summary:
  Initializes an Int64 to the supplied values.
Description:
  I64Assign implements initialization for an Int64 from the supplied long integers.
Parameters:
  I - The Int64 to initialize
  Low - Low 32 bits for the Int64
  High - High 32 bits for the Int64
See also:
  I64Copy
  I64Compare
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@I64Copy
<GROUP BaseServices.Int64support>
Summary:
  Copies an Int64
Description:
  I64Copy copies the value of Source into Dest. Source is unaffected by this.
Parameters:
  Dest - Destination Int64
  Source - Source Int64
See also:
  I64Assign
  I64Compare
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@I64Compare
<GROUP BaseServices.Int64support>
Summary:
  Compares two 64 bit integers.
Description:
  I64Compares the two supplied 64-bit integers for equality.
Parameters:
  I1 - First Int64
  I2 - Second Int64
Result:
  If I1 equals I2 the result is 0, if I1 is larger than I2 the result is greater than
  0 (specifically 1) and if I1 is smaller than I2 the result is smaller than 0
  (specifically -1).
See also:
  I64Assign
  I64Copy
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@CardinalsToI64
<GROUP BaseServices.Int64support>
Summary:
  Packs the supplied 32 bit values in an Int64
Description:
  CardinalsToInt64 packs the two supplied 32 bit values into a single Int64. Note
  that this routine is only available for compilers that natively support Int64.
Parameters:
  I - The 64 bit value into which to pack the high and low parts.
  LowPart - Low 32 bits for the supplied Int64
  HighPart - High 32 bits for the supplied Int64
See also:
  I64ToCardinals
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@I64ToCardinals
<GROUP BaseServices.Int64support>
Summary:
  Extracts the high and low 32 bit values from an Int64.
Description:
  I64ToCardinals extracts the high and low 32 bit values from the supplied Int64.
  Note that this routine is only available for compilers that natively support Int64.
Parameters:
  I - The 64 bit value from which to extract the high and low parts.
  LowPart - Low 32 bits of the supplied Int64
  HighPart - High 32 bits of the supplied Int64
See also:
  CardinalsToI64
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@TDynArray
<GROUP BaseServices.Dynamicarrays>
Summary:
  A dynamic array of some type.
Description:
  TDynArray represents a dynamic array. Depending on the compiler version this is an
  actual dynamic array or a simulated dynamic array. The tables below show the
  declaration of the dynamic array types. When the compiler natively supports
  dynamic arrays you can work with types just as if they were declared using the
  array of Type syntax. <P>If the compiler doesn't support dynamic arrays you
  must use the various DynArrayXxx routines. Before you can use a TDynArray you
  must initialize it using DynArrayInitialize.
  To query or change the length of the array you use DynArrayLength
  and DynArraySetLength respectively. To
  reference an element of the array you use MyArray^[Index] where Index is the index
  of the element between 0 and the length of the array minus 1. When you are done
  with the array you must release it's memory by calling DynArrayFinalize.
    <P><B>Compiler supports dynamic arrays</B> (Note that routines that take a TDynArray
    as a parameter need an actual TDynArray so you can't declare the parameter using
    the "array of Type" syntax):
    <TABLE>
Type               Declaration
-----------------  -----------------
TDynByteArray      array of Byte
TDynShortArray     array of Shortint
TDynSmallintArray  array of Smallint
TDynWordArray      array of Word
TDynIntegerArray   array of Integer
TDynLongintArray   array of Longint
TDynCardinalArray  array of Cardinal
TDynInt64Array     array of Int64
TDynExtendedArray  array of Extended
TDynDoubleArray    array of Double
TDynSingleArray    array of Single
</TABLE>

    <P><B>Compiler does not support dynamic arrays</B> (See the various DynArrayXxx routines).
      The TDynXxxArray types are declared as a pointer to PDynXxxArray types. The
      use of the 'P' and 'T' prefix are reversed here to maintain consistency with
      the situation where dynamic arrays are supported. As an example the full
      declaration of TDynByteArray is:
      PDynByteArray = array [0..DynByteArrayHigh] of Byte; 
      TDynByteArray = ^PDynByteArray; 
      Keep in mind that it is the TDynArray variant that actually use in your code
      but that in reality this is a pointer and as such must be dereferenced before
      you can access an element of the array.
    <TABLE>
Type               Declaration
-----------------  --------------------------------------------
TDynByteArray      ^array [0..DynByteArrayHigh] of Byte
TDynShortArray     ^array [0..DynShortintArrayHigh] of Shortint
TDynSmallintArray  ^array [0..DynSmallintArrayHigh] of Smallint
TDynWordArray      ^array [0..DynWordArrayHigh] of Word
TDynIntegerArray   ^array [0..DynIntegerArrayHigh] of Integer
TDynLongintArray   ^array [0..DynLongintArrayHigh] of Longint
TDynCardinalArray  ^array [0..DynCardinalArrayHigh] of Cardinal
TDynInt64Array     ^array [0..DynInt64ArrayHigh] of Int64
TDynExtendedArray  ^array [0..DynExtendedArrayHigh] of Extended
TDynDoubleArray    ^array [0..DynDoubleArrayHigh] of Double
TDynSingleArray    ^array [0..DynSingleArrayHigh] of Single
</TABLE>

Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@DynArrayHigh
<GROUP BaseServices.Dynamicarrays>
Summary:
  Upper bound for dynamic array of some type.
Description:
  DynArrayHigh contains the upper bound for a dynamic array of some type. The table
  below shows these values for each supported type. These value are obtained by
  dividing 2GB (the maximum array size) by the size of the type (in bytes). Note
  that DynFloatArrayHigh depends on the MATH_PRECISION_X compiler directive and
  as such equals DynExtendedArrayHigh, DynDoubleArrayHigh or DynSingleArrayHigh.
    <TABLE>
Constant              Value
--------------------  ----------
DynByteArrayHigh      2147483646
DynShortArrayHigh     2147483646
DynSmallintArrayHigh  1073741822
DynWordArrayHigh      1073741822
DynIntegerArrayHigh   536870908
DynLongintArrayHigh   536870908
DynCardinalArrayHigh  536870908
DynInt64ArrayHigh     268435448
DynExtendedArrayHigh  214748363
DynDoubleArrayHigh    536870908
DynSingleArrayHigh    268435448
</TABLE>

Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@DynArrayAllocSize
<GROUP BaseServices.Dynamicarrays>
Summary:
  Returns the allocation size for a dynamic array.
Description:
  DynArrayAllocSize returns the amount of memory, in bytes, that are allocated for
  the supplied dynamic array. Since dynamic arrays are allocated with some additional
  maintenance data the return value will always be at least 12 bytes more than the
  memory needed to hold the actual elements.
Parameters:
  A - The dynamic array for which you want to know the allocation size. This array <U>must</U> have been previously initialized with DynArrayInitialize or the result will be unpredictable.
Result:
  The amount of dynamic memory, in bytes, reserved for the dynamic array.
See also:
  DynArrayLength
  DynArrayElemSize
  DynArrayInitialize
  DynArrayFinalize
  DynArraySetLength
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@DynArrayLength
<GROUP BaseServices.Dynamicarrays>
Summary:
  Returns the length of a dynamic array.
Description:
  DynArrayLength returns the length of the supplied dynamic array in terms of the
  number of elements contained in the array. This is always the value supplied to
  the last call to DynArraySetLength or DynArrayInitialize.
  Note that a dynamic array is allowed to have a length of 0.
Parameters:
  A - The dynamic array whose length you want.
Result:
  The length of the supplied dynamic array in terms of number of elements.
See also:
  DynArrayAllocSize
  DynArrayElemSize
  DynArrayInitialize
  DynArrayFinalize
  DynArraySetLength
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@DynArrayElemSize
<GROUP BaseServices.Dynamicarrays>
Summary:
  Returns the size of an element in the array.
Description:
  DynArrayElemSize returns the size, in bytes, of the elements contained in the
  dynamic array. This function is not very useful for application programmers but
  is used internally.
Parameters:
  A - The dynamic array you want to query for its element size.
Result:
  The size of an individual element, in bytes.
See also:
  DynArrayAllocSize
  DynArrayLength
  DynArrayInitialize
  DynArrayFinalize
  DynArraySetLength
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@DynArrayInitialize
<GROUP BaseServices.Dynamicarrays>
Summary:
  Initializes a dynamic array for use.
Description:
  DynArrayInitialize initializes a dynamic array variable for use. You must call
  this function before using the dynamic array. The function allocates memory
  for the maintenance data and initial elements, if directed to do so. Initial
  elements are initialized to 0 and can be used immediately without having to
  call DynArraySetLength. When you are done using the array you must
  release its memory by calling DynArrayFinalize.
Parameters:
  A - The dynamic array variable to initialize;
  ElementSize - Size, in bytes, of the elements contained in the dynamic array. Always use the SizeOf operator for this parameter. For example, if A is declared as a TDynIntegerArray then use SizeOf(Integer) for this parameter.
  InitialLength - Initial size of the array. That is, the number of elements in the array. The function allocates enough memory to hold at least InitialLength number of elements and initializes them to 0. You can immediately start to use them without the need to call DynArraySetLength. You can pass 0 if you don't want to initialize the length of the array.
See also:
  DynArrayAllocSize
  DynArrayLength
  DynArrayElemSize
  DynArrayFinalize
  DynArraySetLength
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@DynArrayFinalize
<GROUP BaseServices.Dynamicarrays>
Summary:
  Releases the memory reserved for the dynamic array.
Description:
  DynArrayFinalize releases the memory reserved for the dynamic array. You must
  always call this function when done using the dynamic array. Note that setting
  the array's length to 0 with DynArraySetLength does not release all
  memory associated with the dynamic array.
Parameters:
  A - The dynamic array variable to finalize.
See also:
  DynArrayAllocSize
  DynArrayLength
  DynArrayElemSize
  DynArrayInitialize
  DynArraySetLength
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@DynArraySetLength
<GROUP BaseServices.Dynamicarrays>
Summary:
  Sets the length of the dynamic array.
Description:
  DynArraySetLength sets the length of the specified dynamic array. The array
  must have previously been initialized with DynArrayInitialize. This
  function maintains the contents of the elements in the array before resizing it
  and in the situation where the array grows, the new elements are initialized to 0.
Parameters:
  A - The dynamic array to resize.
  NewLength - The new length, in terms of number of elements, of the array. This value must be greater than or equal to 0. Note that setting the array's length to 0 does not release all of it's associated memory. You must call DynArrayFinalize when done using the dynamic array.
See also:
  DynArrayAllocSize
  DynArrayLength
  DynArrayElemSize
  DynArrayInitialize
  DynArrayFinalize
Quick info:
  Donator: Marcel van Brakel
--------------------------------------------------------------------------------
@@TObjectList
<GROUP BaseServices.TObjectList>
Summary:
  TList descendent to maintain a list of TObject descendants.
Description:
  TObjectList is a TList descendant adapted to maintain a list of TObject descendants
  which can optionally be owned by the class. If the class owns the items, it will
  automatically free the objects when the list is cleared. This class is only provided
  for backward compatibility and is not a full-fledged implementation of TObjectList
  as found in Delphi 5 and up.
Quick info:
  Donator: Petr Vones
--------------------------------------------------------------------------------
@@TObjectList.Clear
Summary:
  Deletes all items from the list.
Description:
  Clear empties the list, frees the memory used to store the Objects array, and
  sets Count and Capacity to 0. If OwnsObjects is True, Clear also frees the objects
  in the list.
Quick info:
  Donator: Petr Vones
--------------------------------------------------------------------------------
@@TObjectList.Create
Summary:
  Creates an instance of TObjectList
Description:
  Creates an instance of TObjectList and initializes the OwnsObjects property.
Parameters:
  AOwnsObjects - Initial value for the OwnsObjects property.
Quick info:
  Donator: Petr Vones
--------------------------------------------------------------------------------
@@TObjectList.OwnsObjects
Summary:
  Determines whether the class owns it's items.
Description:
  The OwnsObjects property determines whether the class owns the objects it stores.
  If set to True, clearing the list through the Clear method will free all objects
  in addition to removing them from the list. If set to False, clearing the list
  through the Clear method merely removes the items from the list but does not free
  the objects.
Quick info:
  Donator: Petr Vones
--------------------------------------------------------------------------------
@@RaiseLastOSError
<GROUP BaseServices.Compatibility>
Summary:
  Raises an exception for the last occurring OS or system library error.
Description:
  Call RaiseLastOSError to raise an EWin32Error exception for the last OS API call that
  failed. RaiseLastOSError retrieves the code for the last occurring API call error,
  if any. If this belongs to a previously occurring error, RaiseLastOSError raises an
  EWin32Error exception with the error code and message associated with that error.
  This routine is provided for backwards compatibility.
Quick info:
  Donator: JCL Team
--------------------------------------------------------------------------------
@@IInterface
<GROUP BaseServices.Compatibility>
Summary:
  IInterface is the base class for all Object Pascal interfaces.
Description:
  IInterface is the base class for all Object Pascal interfaces. This interface
  declaration is provided for backwards compatibility. When compiling with a pre
  Delphi 6 compiler it is declared as an alias for IUnknown. In Delphi 6 and above,
  this interface is declared in the System.pas unit and IUnknown is declared as an
  alias for IInterface. For more information see the Delphi for IUnknown or IInterface
  depending on your Delphi version.
Quick info:
  Donator: JCL Team
--------------------------------------------------------------------------------
