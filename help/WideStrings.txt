<DECL>--------------------------------------------------------------------------
[Declaration]
TWideStrings = class (TPersistent)
[ShortDescr]
TWideStrings is the abstract base class for objects that represent a list of WideStrings.
[Description]
TWideStrings is the abstract base class for objects that represent a list of
WideStrings. It is very similar to the Delphi TStrings class with the one
fundamental difference; instead of storing a list of string it stores a list
WideStrings. TWideStrings introduces properties and methods to:<BR>
  <UL>
    <LI>Add or delete WideStrings at specified positions in the list.
    <LI>Access the WideStrings at specified positions.
    <LI>Rearrange the WideStrings in the list.
    <LI>Persistence (load from and save to a file).
    <LI>Associate an object with an item in the list.
  </UL>
[Quick Info]
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
constructor Create;
[ShortDescr]
[Description]
Creates an instance of TWideStrings and initializes the object for use. Since
TWideStrings is an abstract base class you cannot actually instantiate it, instead
use a derived class such as TWideStringList. The TWideStrings constructor only
initializes the language used by the class to the users default language.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
destructor Destroy; override;
[ShortDescr]
Destroys an object instance.
[Description]
Destroys the object instance for which this method is called. It is not a recommended
coding style to call the destructor directly, instead you should call the Free
method or even better use the FreeAndNil procedure.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Add(const S: WideString): Integer; virtual;
[ShortDescr]
Adds a WideString to the end of the list.
[Description]
Adds a WideString to the end of the list and returns the index of the new WideString.
[Parameters]
Count=1
1=S:WideString=The WideString to add at the end of the list.
[Result]
Zero based index of the newly inserted WideString.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=4
1=Insert
2=InsertObject
3=Append
4=AddObject
<DECL>--------------------------------------------------------------------------
[Declaration]
function AddObject(const S: WideString; AObject: TObject): Integer; virtual;
[ShortDescr]
Adds a WideString and associated object to the end of the list.
[Description]
AddObject adds a WideString to the end of the list and associates an object with
the WideString.
[Parameters]
Count=2
1=S:WideString=The WideString to add to the end of the list.
2=AObject:TObject=The object to associate with the WideString. You can later retrieve the
object by using the <REF Target"..\Properties\Objects">Objects</REF> property.
[Result]
Zero based index at which the object is inserted.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=4
1=Insert
2=InsertObject
3=Append
4=Add
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Append(const S: WideString);
[ShortDescr]
Appends a WideString to the list.
[Description]
Appends a WideString to the list. This method is identical to the <REF>Add</REF>
method except that it does not return the index at which the WideString was
inserted. Use this method rather then Add when the index is not needed or for
descendent classes for which the index does not have any meaning.
[Parameters]
Count=1
1=S:WideString=The WideString to add to the list.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=4
1=Insert
2=InsertObject
3=Add
4=AddObject
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure AddStrings(Strings: TStrings); overload; virtual;
procedure AddStrings(Strings: TWideStrings); overload; virtual;
[ShortDescr]
Copies strings from another TStrings or TWideStrings into this object.
[Description]
Use AddStrings to add the strings from a TStrings or TWideStrings descendant to
this list. If the source list has objects associated with it's items a reference
to these objects is copied as well (only a reference, no deep copy is made). Note
that the strings in the source list are implicitly converted to WideStrings based
on the systems locale for the overloaded method that accepts a TStrings.
[Parameters]
Count=1
1=Strings:T(Wide)Strings=The source list from which to copy the items to this list.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=2
1=Assign
2=AssignTo
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Assign(Source: TPersistent);
[ShortDescr]
Assign sets the list of WideStrings based on the Source parameter.
[Description]
Assign sets the list of WideStrings based on the Source parameter. If the Source
parameter is of type TStrings or TWideStrings, Assign first clears the list and
then copies the items from the Source object including associated objects, if
any. If Source is not of the correct type Assign simply calls inherited. Note
that, as with the <REF>AddStrings</REF> method, if the Source is of type TStrings
the strings are implicitly converted to WideStrings based on the systems locale.
[Parameters]
Count=1
1=Source:TPersistent=An object from which to assign the list. This object must be
of type TStrings or TWideStrings.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure AssignTo(Dest: TPersistent); override;
[ShortDescr]
AssignTo assigns itself to the specified object.
[Description]
AssignTo assigns itself to the specified Dest(ination) object. For AssignTo to
do anything the Dest object must be of type TStrings or TWideStrings. Conceptually
AssignTo is equivalent to Dest.Assign(Self) except that this method enables a
TWideString to be assigned to a TStrings which otherwise wouldn't be possible.
[Parameters]
Count=1
1=Dest:TPersistent=The TStrings or TWideStrings descendant to which to assign
this list.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure BeginUpdate;
[ShortDescr]
Marks the beginning of modifications to the list.
[Description]
Call BeginUpdate immediately before you modify the list and <REF>EndUpdate</REF>
immediately after. All properties and methods that modify the list automatically call
BeginUpdate and EndUpdate. BeginUpdate calls <REF>SetUpdateState</REF> which can
be overridden by descendants to receive a notification of updates. This way
descendants can optimize updates such as refreshing/repainting visible controls.
[Notes]
Count=1
1=Calls to BeginUpdate and EndUpdate can be nested in all imaginable ways, but
eventually the calls must be balanced.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=1
1=EndUpdate
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Clear; virtual; abstract;
[ShortDescr]
Clears the list of WideStrings and associated objects.
[Description]
Clear is an abstract method implemented by descendents to clear the list of
WideStrings and associated objects. Note that, unless otherwise stated in the
documentation for the descendent class, clearing the list of objects does not
free the objects, it only removes the references to the objects.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Delete(Index: Integer); virtual; abstract;
[ShortDescr]
Deletes the item at a specified position.
[Description]
Delete is an abstract method implemented by descendent classes to delete an item
at a specified position from the list. If the WideString has an associated object,
the reference to that object is deleted as well.
[Parameters]
Count=1
1=Index:Integer=Zero based index of the WideString to delete form the list.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure EndUpdate;
[ShortDescr]
Marks the end of an update sequence.
[Description]
Call <REF>BeginUpdate</REF> immediately before you modify the list and EndUpdate
immediately after. All properties methods that modify the list automatically call
BeginUpdate and EndUpdate. When the UpdateCount managed by BeginUpdate and EndUpdate
reaches zero, EndUpdate calls <REF>SetUpdateState</REF> which can
be overridden by descendants to receive a notification of updates. This way
descendants can optimize updates such as refreshing/repainting visible controls.
[Notes]
Count=1
1=Calls to BeginUpdate and EndUpdate can be nested in all imaginable ways, but
eventually the calls must be balanced.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=1
1=BeginUpdate
<DECL>--------------------------------------------------------------------------
[Declaration]
function Equals(Strings: TWideStrings): Boolean;
[ShortDescr]
Compares two TWideStrings for equality.
[Description]
Equals compares the list for which it is called with the list supplied as the
argument. The function compares all strings in the lists and if they are all
equal the function returns True. If one or more strings are not equal or the
number of strings in the two lists differ, the function returns False. Note
that the function only compares the strings in both lists, it ignores the
associated objects, if any.
[Parameters]
Count=1
1=Strings:TWideStrings=The list with which to compare.
[Result]
If the strings in two lists are identical, that is all individual strings are
equal and both lists have the same number of strings, the function returns True,
in all other cases the function returns False.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Exchange(Index1, Index2: Integer); virtual;
[ShortDescr]
Swaps the WideStrings at the specified positions.
[Description]
Exchange swaps the strings at the specified positions. If either string has an
associated object the objects are exchanged as well.
[Parameters]
Count=2
1=Index1:Integer=Index of the first WideString to exchange.
2=Index2:Integer=Index of the second WideString to exchange.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetSeparatedText(Separators: WideString): WideString; virtual;
[ShortDescr]
Returns the contents of the list in a single buffer with customizable separator.
[Description]
GetSeparatedText returns a dynamically allocated buffer which contains a concatenation
of the individual strings in the list. The individual strings are terminated
with the specified Separators string. As such this is identical to GetText except
that the separator characters are customizable.
[Result]
WideString holding the concatenation of the individual strings in the
list. If the list is empty the returned string is empty.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetText: PWideChar; virtual;
[ShortDescr]
Returns the contents of the list in a single buffer.
[Description]
GetText returns a dynamically allocated buffer which contains a concatenation
of the individual strings in the list. The individual strings are terminated
by a carriage-return linefeed pair.
[Result]
Pointer to the buffer holding the concatenation of the individual strings in the
list. If the list is empty the returned pointer points to an empty buffer.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function IndexOf(const S: WideString): Integer; virtual;
[ShortDescr]
Returns the position of a string in the list.
[Description]
IndexOf Returns the zero-based index of the first occurrence of S in the list. If
S is not found the method returns -1.
[Parameters]
Count=1
1=S:WideString=The string for which you want to know the index of the first occurrence.
[Result]
Zero based index of the first occurrence of S in the list. If S does not exist in
the list -1 is returned.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=2
1=IndexOfName
2=IndexOfObject
<DECL>--------------------------------------------------------------------------
[Declaration]
function IndexOfName(const Name: WideString): Integer;
[ShortDescr]
Returns the position of the first string with the form Name=Value with the specified name part.
[Description]
IndexOfName returns the zero based index of the first occurrence of the string of the form
Name=Value where the Name part matches the specified Name. If no such occurrence
exists in the list the function returns -1. These kind of strings are commonly
found in .ini files which are usually not Unicode based but can be loaded into
TWideStrings anyway.
[Parameters]
Count=1
1=Name:WideString=The Name for which to search in the list.
[Result]
Zero based index of the first occurrence of a string whose Name part matches the
specified name. If no occurrence is found -1 is returned.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=2
1=IndexOf
2=IndexOfObject
<DECL>--------------------------------------------------------------------------
[Declaration]
function IndexOfObject(AObject: TObject): Integer;
[ShortDescr]
Returns the index of the string associated with a given object.
[Description]
IndexOfObject returns the zero based index of the first string associated with
the specified object. Note that the object comparison is simply a pointer
comparison since this class has no knowledge of the object stored in it.
[Parameters]
Count=1
1=AObject:TObject=The object to search for.
[Result]
Zero based index of the first string associated with the specified object or -1
if the object is not associated with any of the strings.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Insert(Index: Integer; const S: WideString); virtual; abstract;
[ShortDescr]
Inserts a WideString at a specific position.
[Description]
Abstract method implemented by descendants to insert a WideString at a specific
position within the list. Index denotes the zero based position at which to insert,
specifying 0 will insert at the beginning (first position) of the list, 1 will
insert at the second position etc.
[Parameters]
Count=2
1=Index:Integer=The zero based index at which to insert the new string.
2=S:WideString=The string to insert at the specified position.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=4
1=InsertObject
2=Add
3=AddObject
4=Append
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure InsertObject(Index: Integer; const S: WideString; AObject: TObject);
[ShortDescr]
Inserts a WideString at a specified position and associates it with an object.
[Description]
InsertObject inserts the supplied string at the specified position in the list
and associates the supplied object with it. Index denotes the zero based position
at which to insert, specifying 0 will insert at the beginning (first position)
of the list, 1 will insert at the second position etc.
[Parameters]
Count=3
1=Index:Integer=The zero based index at which to insert the new string.
2=S:WideString=The string to insert at the specified position.
3=AObject:TObject=The object to associate with the string.
[Result]
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure LoadFromFile(const FileName: String); virtual;
[ShortDescr]
Loads the lines from a textfile into the list.
[Description]
Loads a text from a file into the list. Each line in the file, as indicated by
a WideNull, LineFeed, CarriageReturn, VerticalTab, FormFeed, LineSeparator or
ParagraphSeparator, is appended as a string in the list. If a byte-order mark is
present in the file it is assumed to be a Unicode textfile and read as such. If
no byte-order mark is present it is assumed to be an ANSI textfile.
[Parameters]
Count=1
1=FileName:string=The fully qualified name of the file containing the text to load.
[Notes]
Count=1
1=The class remembers whether an opened file originally contained Unicode by
setting the <REF Target"..\Properties\SaveUnicode">SaveUnicode</REF> property
appropriately.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=3
1=LoadFromStream
2=SaveToFile
3=SaveToStream
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure LoadFromStream(Stream: TStream);
[ShortDescr]
Loads the lines from a stream into the list.
[Description]
Loads the text from a stream into the list. Each line in the stream, as indicated by
a WideNull, LineFeed, CarriageReturn, VerticalTab, FormFeed, LineSeparator or
ParagraphSeparator, is appended as a string in the list. If a byte-order mark is
present in the stream it is assumed to be a Unicode text and read as such. If
no byte-order mark is present it is assumed to be a ANSI text.
[Parameters]
Count=1
1=Stream:TStream=The TStream from which to load the text.
[Notes]
Count=1
1=The class remembers whether an opened stream originally contained Unicode by
setting the <REF Target"..\Properties\SaveUnicode">SaveUnicode</REF> property
appropriately.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=3
1=LoadFromFile
2=SaveToFile
3=SaveToStream
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Move(CurIndex, NewIndex: Integer); virtual;
[ShortDescr]
Moves a WideString from one position to another.
[Description]
Move moves the string at position CurIndex to position NewIndex. Both indices
are zero based and if the WideString has an associated object, that object remains
associated with it.  The remaining strings are reshuffled as appropriate.
[Parameters]
Count=2
1=CurIndex:Integer=Zero based index of the WideString to move.
2=NewIndex:Integer=Zero based index of the position to move the WideString to.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SaveToFile(const FileName: String); virtual;
[ShortDescr]
Saves the contents of the list to a file.
[Description]
SaveToFile writes the contents of the list to the specified file. The individual
strings are separated by a carriage-return linefeed pair. SaveToFile uses the
value of the SaveUnicode property to determine whether to save the contents as
Unicode or ANSI text. If SaveUnicode is False the text is saved as ANSI and in
the process is implicitly converted using the systems locale. However, if there
exist a potential information loss the user is notified through
the <REF Target"..\Events\OnConfirmConversion">OnConfirmConversion</REF>
event. If SaveUnicode is True the text is saved as Unicode but is first prepended
with the BOM_LSB_FIRST value to identify the text as Unicode appearing in with
the least-significant-byte first byte-order mark.
[Parameters]
Count=1
1=FileName:string=Fully qualified name of the file to save the strings to.
[Notes]
Count=1
1=Upon exit the Saved property is updated to reflect the result of the method.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=2
1=SaveToStream
2=OnConfirmConversion;..\Events\OnConfirmConversion
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SaveToStream(Stream: TStream); virtual;
[ShortDescr]
Writes the contents of the list to a stream.
[Description]
SaveToStream writes the contents of the list to the specified stream. The individual
strings are separated by a carriage-return linefeed pair. SaveToStream uses the
value of the SaveUnicode property to determine whether to save the contents as
Unicode or ANSI text. If SaveUnicode is False the text is saved as ANSI and in
the process is implicitly converted using the systems locale. However, if there
exist a potential information loss the user is notified through
the <REF Target"..\Events\OnConfirmConversion">OnConfirmConversion</REF>
event. If SaveUnicode is True the text is saved as Unicode but is first prepended
with the BOM_LSB_FIRST value to identify the text as Unicode appearing in with
the least-significant-byte first byte-order mark.
[Notes]
Count=1
1=Upon exit the Saved property is updated to reflect the result of the method.
[Parameters]
Count=1
1=Stream:TStream=TStream descendent to write the strings to.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=2
1=SaveToFile
2=OnConfirmConversion;..\Events\OnConfirmConversion
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetText(const Value: WideString); virtual;
[ShortDescr]
Sets the text property.
[Description]
SetText replaces the list with the strings specified by the Value parameter. This
method assumed that the individual strings are separated by a WideNull, LineFeed,
CarriageReturn, VerticalTab, FormFeed, LineSeparator or ParagraphSeparator.
[Parameters]
Count=1
1=Value:WideString=WideString containing the strings with which to replace the current contents.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Capacity: Integer read GetCapacity write SetCapacity;
[ShortDescr]
Indicates the number of items the list can hold.
[Description]
Capacity determines the number of strings that the list can hold without having
to resize/reallocate the internal storage. For TWideStrings reading Capacity
returns the Count property and setting Capacity does nothing. Descendant classes
can, and usually will, override this behavior in an appropriate manner.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property CommaText: WideString read GetCommaText write SetCommaText;
[ShortDescr]
Lists the WideStrings in the TWideStrings in system data format (SDF).
[Description]
CommaText gets or sets all the strings in the TWideStrings object in a single
comma-delimited string. Strings in the list that include spaces, commas or quotes will be contained in double quotes; any double quotes in a string will be repeated. 
For example, if the list contains the following strings:<BR>
Hell,o 1<BR>
Hel"lo 2<BR>
Hello 3<BR>
Hello4<BR>
CommaText will return:<BR>
"Hell,o 1","Hel""lo 2","Hello 3",Hello4<BR>
To assign CommaText, create the string as SDF formatted text. The SDF
format specifies strings are to be separated by commas or spaces and optionally enclosed in
double quotes. Double quote marks that occur within the string are repeated to
distinguish them from the quotes that surround the string. If a space or comma
occurs within the string, the string must be enclosed in double quotes or the space or comma will be treated as a delimeter. To indicate an empty string, enter two commas next
to each other. Spaces that appear next to another delimiter are ignored (white space). For
example, suppose CommaText is set to:<BR>
"Hel,lo 1", "He""llo 2" , Hello 3,Hello4<BR>
The list will then contain:<BR>
Hel,lo 1<BR>
He"llo 2<BR>
Hello<BR>
3<BR>
Hello4<BR>
[Notes]
Count=1
1=TODO Description is copied from VCL helpfile. Rewrite to avoid cp issues!!!  BLW -Check rewrite
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Count: Integer read GetCount;
[ShortDescr]
Represents the number of strings in the list.
[Description]
Abstract property which indicates the number of WideStrings in the list. You can
use this property to iterate over all the items in the list. When doing so keep
in mind that the Strings property accepts a zero based index and as such the
last string in the list is at index Count - 1.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Objects[Index: Integer]: TObject read GetObject write PutObject;
[ShortDescr]
Represents the set of objects associated with the strings.
[Description]
Objects contains a set of objects associated with the strings contained in the
list. Reading the Objects property in TWideStrings returns nil and setting this
property does nothing. Descendent classes can, and usually will, override this
behavior to allow you to associate objects with the strings. The Objects and
Strings properties are in synch, that is, the object at index zero is the object
associated with the string at index 0, the same goes for index 1, 2, ... Count - 1.
If a string is not associated with an object, reading the Objects property returns
nil.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Values[const Name: WideString]: WideString read GetValue write SetValue;
[ShortDescr]
Retrieves the Value part if the list contains strings of the form Name=Value.
[Description]
When the list contains string of the form Name=Value then you can use the Values
property to get or set the Value part of these strings. Name is the name part of
the string whose Value you want to get or set. If the list does not contain a
string with the specified Name, reading this property will return an empty string
and writing will cause the string to be added to the list. Setting the Value part
to an empty string causes the entire WideString to be deleted from the list.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=2
1=Names
2=Items
<DECL>--------------------------------------------------------------------------
[Declaration]
property Names[Index: Integer]: WideString read GetName;
[ShortDescr]
Retrieves the Name part if the list contains strings of the form Name=Value.
[Description]
When the list contains string of the form Name=Value then you can use the Names
property to access the Name part of these strings. Index is the zero based index
of the string whose name part to retrieve. If the string is not of the form
Name=Value the property will return an empty string.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=2
1=Values
2=Items
<DECL>--------------------------------------------------------------------------
[Declaration]
property Saved: Boolean read FSaved;
[ShortDescr]
Reflects the result of saving the list to a file or stream.
[Description]
The Saved property reflects the result of the last SaveToFile and/or SaveToStream
method call. If that call actually wrote the list to a file or stream, this property
is set to True, in all other cases it is set to False.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property SaveUnicode: Boolean read FSaveUnicode write FSaveUnicode;
[ShortDescr]
Determines if the class saves data as Unicode or ANSI.
[Description]
Determines whether the SaveToFile and SaveToStream methods write the data as
Unicode or ANSI. If set to True these methods save the data as Unicode, if set
to False the data is implicitly converted to and saved as ANSI. In the latter
case the OnConfirmConversion event may be fired if the conversion would have the
potential of information loss.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Strings[Index: Integer]: WideString read Get write Put; default;
[ShortDescr]
Represents the set of WideStrings managed by the class.
[Description]
Partial abstract property which contains the set of strings managed by the class.
Descendent classes must implement the <REF>Get</REF> method (Put is implemented
through Delete and Insert). Reading the Strings property returns the WideString
at the position indicated by the zero based index. Setting the property sets the
WideString at the specified index. Note that a possibly associated object is not
affected by this. Note that Strings is the default property for TWideStrings and
as such can be omitted when reading the Strings property. For example<BR>
MyWideStrings.Strings[0]<BR>
is equivalent to<BR>
MyWideStrings[0]
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Text: WideString read GetText write SetText;
[ShortDescr]
Lists the strings in the TStrings object as a single string with the individual strings delimited by carriage returns and line feeds.
[Description]
The Text property enables you the get or set the contents of the string in the
list as a single WideString. Reading the Text property returns a WideString with
the individual strings separated by a carriage-return linefeed pair, setting the
Text property replaces the list with the contents of the supplied WideString.
The supplied string is separated into individual strings based on the presence
of a carriage-return or linefeed (they don't have to appear in pairs). An
alternative to the Text property is the CommaText property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=1
1=CommaText
<DECL>--------------------------------------------------------------------------
[Declaration]
property OnConfirmConversion: TConfirmConversionEvent read FOnConfirmConversion write FOnConfirmConversion;
TConfirmConversionEvent = procedure(Sender: TWideStrings; var Allowed: Boolean) of object;
[ShortDescr]
[Description]
When saving the list to a file or stream the class uses the SaveUnicode property
to determine whether to save the list as Unicode or ANSI. If the SaveUnicode
property is False the list is implicitly converted to and saved as ANSI. However,
this potentially results in information loss if the list contains strings with
characters that are not from the ANSI set (e.g. with values above $00FF). In this
case the Save methods fire the OnConfirmConversion event to allow the user to
reconsider the decision on how to save the data. Usually you will want to
either save as Unicode instead or abort entirely. To save as Unicode instead you
can set the SaveUnicode property from within the event handler. To abort the
saving you can set the Allowed parameter of the event to False (it is True when the
event is triggered so there is no need to explicitly assign True). If there is
no event handler attached the save is implicitly aborted. You can use the Saved
property to check whether the list was actually saved.
[Quick Info]
Kind=Event
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=1
1=CommaText
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure DefineProperties(Filer: TFiler); override;
[ShortDescr]
DefineProperties registers the Text property as a private property for streaming.
[Description]
DefineProperties registers the Text property as a private property for streaming.
This is necessary due to a bug in the handling of text DFM's in Classes.pas which
prevents WideStrings from loading under certain circumstances. Zbysek Hlinka
 (zhlinka@login.cz) brought this to my attention and also supplied a solution.
See ReadData and WriteData methods for implementation details.
[Parameters]
Count=1
1=Filer:TFiler=The TFiler object. See TPersistent.DefineProperties in the VCL
help for information.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Error(const Msg: string; Data: Integer);
[ShortDescr]
Utility method which raising an EStringListError exception.
[Description]
Error is a utility method used by various other methods for raising an
EStringListError exception.
[Parameters]
Count=2
1=Msg:string=The runtime error message to display in the exception dialog box.
The exception object is created with the CreateFmt constructor and as such this
message can contain a integer format specifier.
2=Data:Integer=The Data argument is passed to the CreateFmt constructor of the
EStringListError constructor as its Args parameter and as such replaces the first
format specifier found in the Msg argument.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Get(Index: Integer): WideString; virtual; abstract;
[ShortDescr]
Abstract property read method for the Strings property.
[Description]
Get is the abstract property read method for the Strings property. Descendent
classes must implement this method and return a WideString given an Index.
[Parameters]
Count=1
1=Index:Integer=Zero based Index of the WideString. The Index must be between 0
and Count - 1 (inclusive).
[Result]
The WideString at the specified Index. If the specified Index is invalid an
exception is raised.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetCapacity: Integer; virtual;
[ShortDescr]
Property read method of the Capacity property.
[Description]
Property read method of the Capacity property.
Capacity determines the number of strings that the list can hold without having
to resize/reallocate the internal storage. The TWideStrings implementation simply
returns the number of strings in the list by querying the Count property. However,
descendent classes can, and usually will, override this method to return the
actual capacity of the list.
[Result]
The capacity of the list.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetCount: Integer; virtual; abstract;
[ShortDescr]
Property read method of the Count property.
[Description]
GetCount is the abstract property read method of the Count property. Descendent
classes must implement this method and return the number of items in the Strings
list.
[Result]
The number of strings in the list.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetObject(Index: Integer): TObject; virtual;
[ShortDescr]
Property read method of the Objects property.
[Description]
GetObject is the abstract property read method of the Objects property. Descendent
classes must implement this method and return the Object at the specified Index.
[Parameters]
Count=1
1=Index:Integer=The zero based index of the object to retrieve. The index must be
between 0 and Count - 1 (inclusive).
[Result]
The TObject at the specified index. If the index is invalid an exception is raised.
If no object exists at the specified index the method returns nil.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetText: WideString; virtual;
[ShortDescr]
Property read method of the Text property.
[Description]
GetText is the property read method of the Text property. It's purpose is to
list the strings in the TWideStrings object as a single string with the individual
WideStrings delimited by carriage returns and line feeds. The default implementation
of this method is usually sufficient, however, descendent classes can override
this method to provide a faster implementation. Note that this method is also
called internally by the GetText method.
[Result]
The WideStrings in the list as a single string with the individual strings delimited
by a carriage return - linefeed.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Put(Index: Integer; const S: WideString); virtual;
[ShortDescr]
Property write method of the Strings property.
[Description]
Put is the property write method of the Strings property. It is implemented by
first deleting the item at the specified index and then inserting the new string
at that same index.
[Parameters]
Count=2
1=Index:Integer=The zero based index of the WideString to set.
2=S:WideString=New value for the WideString at the specified Index.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure PutObject(Index: Integer; AObject: TObject); virtual;
[ShortDescr]
Property write method of the Objects property.
[Description]
PutObject is the property write method of the Objects property. In TWideStrings
PutObject does nothing. It is up to descendent classes to override this method
and implement it in an appropriate manner.
[Parameters]
Count=2
1=Index:Integer=The zero based Index of the object to set.
2=AObject:TObject=The object to place at the specified index.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetCapacity(NewCapacity: Integer); virtual;
[ShortDescr]
Property write method of the Capacity property.
[Description]
SetCapacity is the property write method of the Capacity property. In TWideStrings
the SetCapacity does not do anything. Descendent classes can optionally override
this method to implement a capacity scheme. In this case the SetCapacity method
should take steps to ensure that the list of WideStrings is expanded in such a
manner that the list will not have to be reallocated again until the list holds more 
than Capacity number of strings.
[Parameters]
Count=1
1=NewCapacity:Integer=The new capacity for the list.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetUpdateState(Updating: Boolean); virtual;
[ShortDescr]
Called whenever the update state of the class changes.
[Description]
SetUpdateState is called whenever the update state of the class changes. Thus,
it is called for each first BeginUpdate and for each last EndUpdate. SetUpdateState
in TWideStrings is merely a place-holder and does nothing. Descendent classes
can override this method to receive notification of changes to the update state.
[Parameters]
Count=1
1=Updating:Boolean=Denotes the current state of the class. If True the state has
just switched to the update state, if False the state just changed to normal (non-update).
Thus, when BeginUpdate is called, SetUpdateState is called with True as its argument.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetLanguage(Value: LCID); virtual;
[ShortDescr]
[Description]
SetLanguage is the property write method of the Language property. The TWideStrings
implementation does nothing except store the new value. Descendent classes may
override this method to respond to language changes such as re-sorting the list. 
[Parameters]
Count=1
1=Value:LCID=The new language locale.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStrings
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
TWideStringList = class(TWideStrings)
[ShortDescr]
[Description]
TWideStringList is a TWideStrings descendent which maintains a list of WideStrings.
The class implements the abstract methods of TWideStrings and introduces some new
methods and properties to:<BR>
  <UL>
    <LI>Search for WideStrings in the list.
    <LI>Sort the WideStrings in the list.
    <LI>Prohibit duplicates from being inserted into the list.
    <LI>Respond to changes in the list.
  </UL>
[Quick Info]
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Add(const S: WideString): Integer; override;
[ShortDescr]
Adds a WideString to the end of the list.
[Description]
Adds a WideString to the list and returns the index of the new WideString. If the
list is unsorted the string is appended to the list. If the list is sorted and
the specified string does not exist in the list yet, the string is inserted at
the correct position. If the string does exist the request is either ignored or
an exception is raised depending on the value of the Duplicates property.
[Parameters]
Count=1
1=S:WideString=The WideString to add at the end of the list.
[Result]
Zero based index of the newly inserted WideString.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Clear; override;
[ShortDescr]
Clears the list of WideStrings and associated objects.
[Description]
Clear clears the list of WideStrings and associated objects. Note that references
to associated objects are removed, but the objects themselves are not destroyed.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Delete(Index: Integer); override;
[ShortDescr]
Deletes the item at a specified position.
[Description]
Delete is an abstract method implemented by descendent classes to delete an item
at a specified position from the list. If the WideString has an associated object,
the reference to that object (but not the object itself) is deleted as well.
[Parameters]
Count=1
1=Index:Integer=Zero based index of the WideString to delete from the list.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Exchange(Index1, Index2: Integer); override;
[ShortDescr]
Swaps the WideStrings at the specified positions.
[Description]
Exchange swaps the strings at the specified positions. If either string has an
associated object the objects are exchanged as well.
[Parameters]
Count=2
1=Index1:Integer=Index of the first WideString to exchange.
2=Index2:Integer=Index of the second WideString to exchange.
[Notes]
Count=1
1=Do not call Exchange on a sorted list except to exchange two identical strings
with different associated objects. Exchange does not check whether the list is
sorted and as such calling it may destroy the sort order.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Find(const S: WideString; var Index: Integer): Boolean; virtual;
[ShortDescr]
Locates the position of a string in a sorted list and whether the string exists.
[Description]
Find returns the position in a sorted list where S should be inserted.
If the specified string already exists the method returns True and Index contains
it's zero based index, if the string does not exist in the list the method returns
False and Index contains the zero based index where S should be inserted. Note
that you should use Find only for sorted lists. For an unsorted list use IndexOf
instead.
[Parameters]
Count=2
1=S:WideString=The string to search for.
2=Index:Integer=The zero based index of S or the position in the list where S
should be inserted if it does not exist in the list yet.
[Result]
If the specified string exists in the list the method returns True, otherwise it
returns False.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function IndexOf(const S: WideString): Integer; override;
[ShortDescr]
Returns the position of a string in the list.
[Description]
IndexOf Returns the zero-based index of the first occurrence of S in the list. If
S is not found the method returns -1.
[Parameters]
Count=1
1=S:WideString=The string for which you want to know the index of the first occurrence.
[Result]
Zero based index of the first occurrence of S in the list. If S does not exist in
the list -1 is returned.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Insert(Index: Integer; const S: WideString); override;
[ShortDescr]
Inserts a WideString at a specific position.
[Description]
Insert inserts a WideString at a specific position
within the list. Index denotes the zero based position at which to insert,
specifying 0 will insert at the beginning (first position) of the list, 1 will
insert at the second position etc. Note that you cannot insert a string into a
sorted list. An attempt to do so raises an exception.
[Parameters]
Count=2
1=Index:Integer=The zero based index at which to insert the new string.
2=S:WideString=The string to insert at the specified position.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Sort; virtual;
[ShortDescr]
Sorts the strings in the list.
[Description]
Sorts the strings in the list in ascending order. Note that the sort procedure
uses the Language property to determine the sort order of the strings.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Changed; virtual;
[ShortDescr]
Called every time after a change has occurred to the list.
[Description]
Changed is called every time after a change has occurred to the list. If the list
is being updated Changed does nothing, otherwise it fires the OnChange event.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=3
1=Changing
2=OnChange;..\Properties\OnChanged
3=OnChanging;..\Properties\OnChanging
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Changing; virtual;
[ShortDescr]
[Description]
Changing is called every time before a change is about to be made to the list. If
the list is being updated Changing does nothing, otherwise it fires the
OnChanging event.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=3
1=Changed
2=OnChange;..\Properties\OnChanged
3=OnChanging;..\Properties\OnChanging
<DECL>--------------------------------------------------------------------------
[Declaration]
function Get(Index: Integer): WideString; override;
[ShortDescr]
Property read method for the Items property.
[Description]
Get is the property read method for the Items property. Get returns the string
at the specified index or raises an exception if the Index is invalid.
[Parameters]
Count=1
1=Index:Integer=Zero based index of the string to retrieve. Must be in the range
0 to Count - 1 or an exception is raised.
[Result]
The string at the specified index. If the index is invalid an exception is raised.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetCapacity: Integer; override;
[ShortDescr]
Property read method of the Capacity property.
[Description]
GetCapacity is the property read method of the Capacity property. GetCapacity
returns the current capacity of the list which equals the maximum number of
strings the list can hold without having to resize its internal data structures.
[Result]
Capacity of the list.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetCount: Integer; override;
[ShortDescr]
Property read method of the Count property.
[Description]
GetCount is the property read method of the Count property. GetCount returns the
number of strings that are currently in the list.
[Result]
The number of strings in the list.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetObject(Index: Integer): TObject; override;
[ShortDescr]
Property read method of the Objects property.
[Description]
GetObject is the property read method of the Objects property. GetObject returns
the object reference associated with the string at the specified Index. If no
object is associated with that string GetObject returns nil.
[Parameters]
Count=1
1=Index:Integer=Zero based index of the string for which you want to retrieve
the associated object. Index must be within the range 0 to Count - 1 or an
exception is raised.
[Result]
The object associated with the string at the specified index or nil if the string
has no associated object.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure Put(Index: Integer; const S: WideString); override;
[ShortDescr]
Property write method of the Items property.
[Description]
Put is the property write method of the Items property. Put sets the value of
the string at the specified index which must be in the range 0 to Count - 1 or
an exception is raised. Note that Put can not be used to insert a string into
a sorted list.
[Parameters]
Count=2
1=Index:Integer=Zero based index of the string whose value you want to change.
2=S:WideString=The new value for the string at the specified index.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure PutObject(Index: Integer; AObject: TObject); override;
[ShortDescr]
Property write method of the Objects property
[Description]
PutObject is the property write method of the Objects property. PutObject associates
the string at the specified index with the supplied object. Index must be in the
range 0 to Count - 1 or an exception is raised.
[Parameters]
Count=2
1=Index:Integer=Zero based index of the string with which the specified object
must be associated.
2=AObject:TObject=The object with which to associate the string at the specified index.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetCapacity(NewCapacity: Integer); override;
[ShortDescr]
Property write method of the Capacity property.
[Description]
SetCapacity is the property write method of the Capacity property. SetCapacity
resizes the internal data structures used by TWideStringList to store its items so
that subsequent additions to the list do not need to resize them until the
Capacity is reached. This can significantly increase overall performance when
adding strings to the list.
[Parameters]
Count=1
1=NewCapacity:Integer=The new capacity for the list.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetUpdateState(Updating: Boolean); override;
[ShortDescr]
Called when the update state changes.
[Description]
SetUpdateState is called whenever the update state of the list changes. The update
state of the list is considered changed when the update count either becomes zero
or changes from zero to non-zero. The update count is changed by the user calling
BeginUpdate and EndUpdate.
[Parameters]
Count=1
1=Updating:Boolean=True if the list enters the update state (update count larger
then 0) otherwise False.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetLanguage(Value: LCID); override;
[ShortDescr]
TODO The property write method of Language property.
[Description]
TODO SetLanguage is the property write method of Language property. The TWideStringList
implementation does nothing except store the new value and re-sort the list. 
[Parameters]
Count=1
1=Value:LCID=The locale of the new language.
[Quick Info]
Kind=Method
Visibility=Protected
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Duplicates: TDuplicates read FDuplicates write FDuplicates;
TDuplicates = (dupIgnore, dupAccept, dupError);
[ShortDescr]
Specifies whether duplicate items can be added to the list.
[Description]
Set Duplicates to specify what should happen when an attempt is made to add
duplicate strings to the list. Duplicates can have the following values:
  <UL>
  <LI>dupIgnore Ignores attempts to add duplicate strings to the list.
  <LI>dupAccept Permits duplicate strings in the list.
  <LI>dupError Raises an exception when an attempt is made to add a string that already exists.
  </UL>
Note that setting Duplicates when the list is not empty does not affect those
strings already in the list. Therefore you should set Duplicates before adding
items or clear the list first. Also note that Duplicates has no effect on a list
which is not sorted.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property Sorted: Boolean read FSorted write SetSorted;
[ShortDescr]
Specifies whether the strings in the list should be sorted.
[Description]
Setting sorted to True causes the strings in the list to be sorted in ascending
order. Using Add to insert a string into a sorted list automatically inserts it
at the appropriate position. Setting sorted to False will enforce no ordering on
the strings in the list. You can use the Insert method to insert items into an
unsorted list at an arbitrary position or Add to add a string to the end of the
list.
[Notes]
Count=2
1=Do not use Insert to add an item into a sorted list.
2=The order of the strings in a sorted list is determined using the Language property.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
property OnChange: TNotifyEvent read FOnChange write FOnChange;
[ShortDescr]
Occurs immediately after the list of strings has changed.
[Description]
The OnChange event is fired immediately after the list of strings has changed.
The changes that cause an OnChange event are addition, deletion, moving (e.g. exchange)
and the modification of a string. Note that before the modification is made
the <REF>OnChanging</REF> event is fired.
[Notes]
Count=1
1=This event is only fired when the updatecount is 0 (BeginUpdate and EndUpdate
calls are balanced).
[Quick Info]
Kind=Event
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=1
1=OnChanging
<DECL>--------------------------------------------------------------------------
[Declaration]
property OnChanging: TNotifyEvent read FOnChanging write FOnChanging;
[ShortDescr]
Occurs immediately before the list of strings is changed.
[Description]
The OnChanging event is fired immediately before changes are made to the list of
strings. Changes that cause an OnChange event are addition, deletion, moving (e.g.
exchange) and the modification of a string. Note that after the modification is
made the <REF>OnChange</REF> event is fired.
[Notes]
Count=1
1=This event is only fired when the updatecount is 0 (BeginUpdate and EndUpdate
calls are balanced).
[Quick Info]
Kind=Event
Visibility=Public
Unit=JclUnicode
Category=Unicode
SubCat=TWideStringList
Author=Mike Lischke;public@lischke-online.de
Delphi=4,5
BCB=4,5
[SeeAlso]
Count=1
1=OnChange
