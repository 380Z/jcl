<DECL>--------------------------------------------------------------------------
[Declaration]
T8087Exceptions = set of T8087Exception;
T8087Exception = (emInvalidOp, emDenormalizedOperand, emZeroDivide, emOverflow, emUnderflow, emPrecision);
[ShortDescr]
An enumeration describing the set of available FPU exception masks.
[Description]
An enumeration which describes the set of available FPU exception masks. Note that
you can use the All8087Exceptions constant whenever you need a set which includes
all exception flags.
[Enumeration]
Count=6
1=emInvalidOp=Invalid operation mask.
2=emDenormalizedOperand=Denormalized operation mask.
3=emZeroDivide=Division by zero mask.
4=emOverflow=Overflow mask.
5=emUnderflow=Underflow mask.
6=emPrecision=Precision error mask.
[Quick Info]
Kind=Type
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
All8087Exceptions = [Low(T8087Exception)..High(T8087Exception)];
[ShortDescr]
A set containing all FPU exception flags.
[Description]
All8087Exceptions is a pre-initialized set which contains all of the
available FPU exception flags (from the T8087Exception enumeration).
[Quick Info]
Kind=Constant
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function ClearPending8087Exceptions: T8087Exceptions;
[ShortDescr]
Clears all pending FPU exceptions.
[Description]
The ClearPending8087Exceptions function clears all pending FPU exceptions.
[Result]
The result is the set of exception flags that were set before the entire mask
was cleared.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=T8087Exceptions;Types\T8087Exceptions
2=GetPending8087Exceptions
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetPending8087Exceptions: T8087Exceptions;
[ShortDescr]
Returns a set of pending FPU exception flags.
[Description]
The GetPending8087Exceptions routine returns a set of flags representing the
pending FPU exceptions. Note that the pending exceptions are not cleared. To get
the pending exceptions and clear them use the <REF>ClearPending8087Exceptions</REF>
routine.
[Result]
The result is the set of pending FPU exceptions.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=T8087Exceptions;Types\T8087Exceptions
2=ClearPending8087Exceptions
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetMasked8087Exceptions: T8087Exceptions;
[ShortDescr]
Returns the set of masked FPU exceptions.
[Description]
GetMasked8087Exceptions returns a set of flags representing the FPU exceptions
that are currently masked (i.e. the exceptions ignored by the FPU).
[Result]
The result is the set of masked FPU exceptions.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=4
1=T8087Exceptions;Types\T8087Exceptions
2=SetMasked8087Exceptions
3=Unmask8087Exceptions
4=Mask8087Exceptions
<DECL>--------------------------------------------------------------------------
[Declaration]
function SetMasked8087Exceptions(Exceptions: T8087Exceptions; ClearBefore: Boolean = True): T8087Exceptions;
[ShortDescr]
Sets the FPU exception mask.
[Description]
The SetMasked8087Exceptions routine sets the masked exception flags of the FPU's
control word. In effect this means that afterwards the FPU no longer raises an
exception of the kind included in the Exceptions parameter, instead it ignores
the error situation. Note that by default exceptions previously masked are cleared if they
do not appear in the Exception parameter.
[Parameters]
Count=2
1=Exceptions:<REF Target"Types\T8087Exceptions">T8087Exceptions</REF>=Set of exceptions to mask.
2=ClearBefore:Boolean=If set to True the routine clears pending exceptions, if any,
before modifying the exception mask. This is the default behavior.  If set to False 
the routine does not clear pending exceptions.
[Result]
The result is the exception mask before it was modified.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=4
1=T8087Exceptions;Types\T8087Exceptions
2=GetMasked8087Exceptions
3=Unmask8087Exceptions
4=Mask8087Exceptions
<DECL>--------------------------------------------------------------------------
[Declaration]
function Mask8087Exceptions(Exceptions: T8087Exceptions): T8087Exceptions;
[ShortDescr]
Masks additional exceptions.
[Description]
Mask8087Exceptions masks the exceptions specified by the Exceptions parameter.
Unlike <REF>SetMasked8087Exceptions</REF> the original exception mask is left
intact. For example, if the current exception mask equals [emInvalidOp, emDenormalizedOperand],
and you call Mask8087Exceptions([emZeroDivide]), then upon return the exception
mask equals [emInvalidOp, emDenormalizedOperand, emZeroDivide].
[Parameters]
Count=1
1=Exceptions:<REF Target"Types\T8087Exceptions">T8087Exceptions</REF>=Set of exceptions to mask, in addition to the current
set of masked exceptions.
[Result]
The set of exceptions that were masked upon routine entry. Upon exit the set of
masked exceptions equals Result + Exceptions.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=4
1=T8087Exceptions;Types\T8087Exceptions
2=Unmask8087Exceptions
3=GetMasked8087Exceptions
4=SetMasked8087Exceptions
<DECL>--------------------------------------------------------------------------
[Declaration]
function Unmask8087Exceptions(Exceptions: T8087Exceptions; ClearBefore: Boolean = True): T8087Exceptions;
[ShortDescr]
Unmasks the specified exceptions.
[Description]
The Unmask8087Exceptions routine unmasks the exceptions specified by the Exceptions
parameter. Note that exceptions not included in the Exceptions parameter are left
unchanged, unlike <REF>SetMasked8087Exceptions</REF> which modifies the entire
mask.
[Parameters]
Count=2
1=Exceptions:<REF Target"Types\T8087Exceptions">T8087Exceptions</REF>=The set of exceptions to unmask.
2=ClearBefore:Boolean=If set to True any pending exceptions are cleared before
the routine returns, if set to False pending exceptions are not cleared.
[Result]
The set of exceptions that were masked upon routine entry. Upon exit the set of
masked exceptions equals Result - Exceptions.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Robert Rossmair;Robert.Rossmair@t-online.de
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=4
1=T8087Exceptions;Types\T8087Exceptions
2=Mask8087Exceptions
3=GetMasked8087Exceptions
4=SetMasked8087Exceptions
<DECL>--------------------------------------------------------------------------
[Declaration]
T8087Precision = (pcSingle, pcReserved, pcDouble, pcExtended);
[ShortDescr]
Used for retrieving and setting the FPU precision control.
[Description]
T8087Precision is an enumeration used to set and retrieve the FPU precision control.
[Enumeration]
Count=4
1=pcSingle=Single precision (short)
2=pcReserved=Reserved, never actually used (convenience)
3=pcDouble=Double precision (long)
4=pcExtended=Extended precision (temporary)
[Quick Info]
Kind=Type
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
T8087Rounding = (rcNearestOrEven, rcDownInfinity, rcUpInfinity, rcChopOrTruncate);
[ShortDescr]
Enumeration used for retrieving and setting the FPU rounding control.
[Description]
T8087Rounding is an enumeration used to set and retrieve the FPU rounding control.
[Enumeration]
Count=4
1=rcNearestOrEven=Rounds to the nearest or even
2=rcDownInfinity=Rounds down towards negative infinity
3=rcUpInfinity=Rounds up towards positive infinity
4=rcChopOrTruncate=Chops or truncates towards zero
[Quick Info]
Kind=Type
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=Get8087Rounding;..\Get8087Rounding
2=Set8087Rounding;..\Set8087Rounding
<DECL>--------------------------------------------------------------------------
[Declaration]
T8087Infinity = (icProjective, icAffine);
[ShortDescr]
Enumeration used for retrieving and setting the FPU infinity control.
[Description]
T8087Infinity is an enumeration used to set and retrieve the FPU infinity control.
[Enumeration]
Count=2
1=icProjective=Infinity is always assumed to be unsigned.
2=icAffine=Allows positive and negative infinity.
[Quick Info]
Kind=Type
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=1
1=Set8087Precision;..\Set8087Infinity
2=Get8087Precision;..\Get8087Infinity
<DECL>--------------------------------------------------------------------------
[Declaration]
function Set8087Infinity(const Infinity: T8087Infinity): T8087Infinity;
[ShortDescr]
Sets the infinity control of the FPU.
[Description]
Set8087Infinity adjusts the infinity control setting of the mathematical
coprocessor.
[Parameters]
Count=1
1=Infinity:<REF Target"Types\T8087Infinity">T8087Infinity</REF>=New value for the
infinity control of the FPU. See <REF Target"Types\T8087Infinity">T8087Infinity</REF>
for the possible values and their meaning.
[Result]
The previous infinity setting of the FPU.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=7
1=Set8087Precision
2=Set8087Rounding
3=Get8087Infinity
4=Get8087Precision
5=Get8087Rounding
6=Get8087ControlWord
7=Set8087ControlWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Set8087Precision(const Precision: T8087Precision): T8087Precision;
[ShortDescr]
Sets the precision control of the FPU.
[Description]
Set8087Precision adjusts the precision control setting of the mathematical
coprocessor.
[Parameters]
Count=1
1=Precision:<REF Target"Types\T8087Precision">T8087Precision</REF>=New value for the
precision control of the FPU. See <REF Target"Types\T8087Precision">T8087Precision</REF>
for the possible values and their meaning.
[Result]
The previous precision setting of the FPU.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=7
1=Set8087Infinity
2=Set8087Rounding
3=Get8087Infinity
4=Get8087Precision
5=Get8087Rounding
6=Get8087ControlWord
7=Set8087ControlWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Set8087Rounding(const Rounding: T8087Rounding): T8087Rounding;
[ShortDescr]
Sets the rounding control of the FPU.
[Description]
Set8087Rounding adjusts the rounding control setting of the mathematical
coprocessor.
[Parameters]
Count=1
1=Rounding:<REF Target"Types\T8087Rounding">T8087Rounding</REF>=New value for the
rounding control of the FPU. See <REF Target"Types\T8087Rounding">T8087Rounding</REF>
for the possible values and their meaning.
[Result]
The previous rounding setting of the FPU.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=7
1=Set8087Infinity
2=Set8087Precision
3=Get8087Infinity
4=Get8087Precision
5=Get8087Rounding
6=Get8087ControlWord
7=Set8087ControlWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Get8087Infinity: T8087Infinity;
[ShortDescr]
Returns the infinity setting of the FPU.
[Description]
Get8087Infinity returns the infinity control setting of the mathematical
coprocessor. The infinity setting controls how the FPU interprets infinity values.
[Result]
The infinity setting of the FPU in the form of an enumerated type.
See <REF Target"Types\T8087Infinity">T8087Infinity</REF> for the possible values
and their meaning.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=7
1=Get8087Precision
2=Get8087Rounding
3=Set8087Infinity
4=Set8087Precision
5=Set8087Rounding
6=Get8087ControlWord
7=Set8087ControlWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Get8087Precision: T8087Precision;
[ShortDescr]
Returns the precision setting of the FPU.
[Description]
Get8087Precision returns the precision control setting of the mathematical
coprocessor.
[Result]
The precision setting of the FPU. See <REF Target"Types\T8087Precision">T8087Precision</REF>
for the possible values and their meaning.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=7
1=Get8087Infinity
2=Get8087Rounding
3=Set8087Infinity
4=Set8087Precision
5=Set8087Rounding
6=Get8087ControlWord
7=Set8087ControlWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Get8087Rounding: T8087Rounding;
[ShortDescr]
Returns the rounding setting of the FPU.
[Description]
Get8087Rounding returns the rounding control setting of the mathematical
coprocessor.
[Result]
The rounding setting of the FPU. See <REF Target"Types\T8087Rounding">T8087Rounding</REF>
for more information about the possible values and their meaning.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=7
1=Get8087Infinity
2=Get8087Precision
3=Set8087Infinity
4=Set8087Precision
5=Set8087Rounding
6=Get8087ControlWord
7=Set8087ControlWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Set8087ControlWord(const Control: Word): Word;
[ShortDescr]
Sets the 80x87 control word
[Description]
Set8087ControlWord sets the 80x87 control word (register). See <REF>Get8087ControlWord</REF>
for details on the individual bits of the Control parameter.
[Parameters]
Count=1
1=Control:Word=New value for the 80x87 control word.
[Result]
Previous value of the control word.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=Get8087ControlWord
2=Get8087StatusWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Get8087ControlWord: Word;
[ShortDescr]
Returns the 80x87 control word.
[Description]
Get8087ControlWord returns the 80x87 control word (register). This is the FPU's
register that controls how the FPU operates with regard to things such as precision,
rounding and infinity control. See the table below for the meaning of the individual
bits. Note that although this routine might be handy at times, the Get8087Infinity, Get8087Precision and Get8087Rounding functions are preferred as they shield you from the low level bit manipulation. 
 <TABLE>
 <TR VALIGN="top">
 <TH align=left width=20%>Bit(s)</TH>
 <TH align=left width=80%>Description</TH>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>0 (IM)</TD>
 <TD width=80%>Invalid operation mask</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>1 (DM)</TD>
 <TD width=80%>Denormalized operand mask</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>2 (ZM)</TD>
 <TD width=80%>Division by zero mask</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>3 (OM)</TD>
 <TD width=80%>Overflow mask</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>4 (UM)</TD>
 <TD width=80%>Underflow mask</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>5 (PM)</TD>
 <TD width=80%>Precision error mask</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>8,9 (PC)</TD>
 <TD width=80%>Precision control<BR>
   <UL>
     <LI>00 Single precision
     <LI>01 Reserved
     <LI>10 Double precision
     <LI>11 Extended precision
   </UL></TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>10,11 (RC)</TD>
 <TD width=80%>Rounding control<BR>
   <UL>
     <LI>00 Round to nearest or even
     <LI>01 Round down
     <LI>10 Round up
     <LI>Chop or truncate toward 0
   </UL>
 </TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>12 (IC)</TD>
 <TD width=80%>Infinity control<BR>
   <UL>
      <LI>0 projective 
      <LI>1 affine
   </UL>
 </TD>
 </TR>
 </TABLE>
[Result]
The 80x87 control word.
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
SubCat=Hardware
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=Get8087StatusWord
2=Set8087ControlWord
<DECL>--------------------------------------------------------------------------
[Declaration]
function Get8087StatusWord(ClearExceptions: Boolean): Word;
[ShortDescr]
Returns the 80x87 status word.
[Description]
Get8087StatusWord returns the 80x87 status word. This is the FPU's register that
reflects it's overall status. The meaning of the individual bits are documented
in the table below.
[Parameters]
Count=1
1=ClearExceptions:Boolean=If True the function clears any pending floating point
exceptions before returning the status word. If False the function does not clear
pending exceptions (it's the difference between using FSTSW and FNSTSW).
[Result]
The contents of the 80x87 status word.<BR>
 <TABLE>
 <TR VALIGN="top">
 <TH align=left width=20%>Bit(s)</TH>
 <TH align=left width=80%>Description</TH>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>0 (IE)</TD>
 <TD width=80%>Invalid error such as stack overflow/underflow.</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>1 (DE)</TD>
 <TD width=80%>Denormalized error meaning at least one operand was denormalized</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>2 (ZE)</TD>
 <TD width=80%>Zero error indicates the divisor was 0 while the dividend was
   non-zero or non-infinity</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>3 (OE)</TD>
 <TD width=80%>Overflow error indicating the result of an operation was too large
   to be represented. If overflow error is masked a result of infinity was returned</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>4 (UE)</TD>
 <TD width=80%>Underflow error indicating the result of an operation was too small
   to be represented.</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>5 (PE)</TD>
 <TD width=80%>Precision error indicating an operand or the result exceeds the selected precision.</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>6 (SF)</TD>
 <TD width=80%>Used in some newer coprocessors to denote overflow or underflow.</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>7 (ES)</TD>
 <TD width=80%>Error summary is set if any of the unmasked error bits is set.</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>8-10, 14 (C0-C2,C3)</TD>
 <TD width=80%>Condition code bits indicate certain conditions such as NAN. These
   are opcode dependent. See the Intel reference.</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>11-13 (TOP)</TD>
 <TD width=80%>Stack top pointer. Register which functions as top of stack,
   usually 0.</TD>
 </TR>
 <TR VALIGN="top">
 <TD width=20%>15 (B)</TD>
 <TD width=80%>Busy bit indicating the coprocessor is performing some task.</TD>
 </TR>
 </TABLE>
[Quick Info]
Unit=Jcl8087
Category=Math Routines
SubCat=Hardware
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
[SeeAlso]
Count=2
1=Set8087ControlWord
2=Get8087ControlWord
