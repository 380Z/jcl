<DECL>--------------------------------------------------------------------------
[Declaration]
function JclSetToList(const TypeInfo: PTypeInfo; const Value;
  const WantBrackets: Boolean; const WantRanges: Boolean;
  const Strings: TStrings): string;
[ShortDescr]
Converts a set to a list of enumeration values.
[Description]
JclSetToList converts a set to a list of enumeration values. Additionally
the set value is returned as a string optionally surrounded by brackets and
optionally using ranges if adjacent values are set.
[Parameters]
Count=5
1=TypeInfo:PTypeInfo=RTTI of the set as returned by System.TypeInfo(<I>set type</I>).
2=Value:=Set value.
3=WantBrackets:Boolean=Flag to surround the result with brackets ('[' and ']').
When set to True, brackets will be present in the resulting string but not in the
list.
4=WantRanges:Boolean=Flag to use range specifiers for adjacent values. When set
to True adjacent values will be specified as '<I>First value</I> .. <I>Last value</I>'.
Ranges will be used in both the list as well as the resulting string.
5=Strings:TStrings=TStrings decendant to receive a list of values. Caller is responsible
of creating/destroying the list. The list is <B>not</B> cleared on entry to
JclSetToList.
[Result]
The string will be the concatenation of all added values in the Strings parameter,
optionally surrounded by '['and ']' depending on the value of WantBrackets.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Theo Bebekis;bebekis@otenet.gr
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclSetToStr(const TypeInfo: PTypeInfo; const Value;
  const WantBrackets: Boolean = False;
  const WantRanges: Boolean = False): string;
[ShortDescr]
Converts a set to a string of enumeration values.
[Description]
JclSetToStr converts a set to a string representing the set, optionally
surrounded by brackets and optionally using ranges if adjacent values are set.
 <P>
JclSetToStr uses JclSetToList to do the conversion.
[Parameters]
Count=4
1=TypeInfo:PTypeInfo=RTTI of the set as returned by System.TypeInfo(<I>set type</I>).
2=Value:=Set value.
3=WantBrackets:Boolean=Flag to surround the result with brackets ('[' and ']').
When set to True, brackets will be present in the resulting string but not in the
list.
4=WantRanges:Boolean=Flag to use range specifiers for adjacent values. When set
to True adjacent values will be specified as '<I>First value</I> .. <I>Last value</I>'.
[Result]
The string will be the concatenation of all added values in the Strings parameter,
optionally surrounded by '['and ']' depending on the value of WantBrackets.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Theo Bebekis;bebekis@otenet.gr
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure JclStrToSet(const TypeInfo: PTypeInfo; var SetVar;
  const Value: string);
[ShortDescr]
Converts a string to a set value.
[Description]
JclStrToSet converts a string to a set value. The string may or may not contain
brackets ('[' and ']') and/or ranges ('<I>First value</I> .. <I>Last value</I>').
Value/ranges must be seperated by a comma (','). If the string contains illegal
values an exception is raised.
[Parameters]
Count=3
1=TypeInfo:PTypeInfo=RTTI of the set as returned by System.TypeInfo(<I>set type</I>).
2=SetVar:=Set value.
3=Value:string=String representing a set value.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure JclIntToSet(const TypeInfo: PTypeInfo; var SetVar;
  const Value: Integer);
[ShortDescr]
Converts an integer value to a set.
[Description]
JclIntToSet converts an integer to a set value. Each bit in the integer value
represents a value in the set. Note that the set variable in memory might be
shifted up to 7 bits left. The actual number of bits shifted is equal to the
ordinal of the first value modulo 8
[Parameters]
Count=3
1=TypeInfo:PTypeInfo=RTTI of the set as returned by System.TypeInfo(<I>set type</I>).
2=SetVar:=Set value.
3=Value:Integer=Integer representing a set value.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Theo Bebekis;bebekis@otenet.gr
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclSetToInt(const TypeInfo: PTypeInfo; const SetVar): Integer;
[ShortDescr]
Converts a set value to an integer.
[Description]
JclSetToInt converts a set value to an integer. Each bit in the integer value
represents a value in the set. Note that the set variable in memory might be
shifted up to 7 bits left. The actual number of bits shifted is equal to the
ordinal of the first value modulo 8
[Parameters]
Count=2
1=TypeInfo:PTypeInfo=RTTI of the set as returned by System.TypeInfo(<I>set type</I>).
2=SetVar:=Set value.
[Result]
The return value is an Integer representing the set.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Theo Bebekis;bebekis@otenet.gr
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclGUIDToString(const GUID: TGUID): string;
[ShortDescr]
Converts a GUID to a string.
[Description]
JclGUIDToString converts a GUID to a string. Note that the ComObj unit also has
a GUIDToString function but it requires the ole.dll to do the conversion.
[Parameters]
Count=1
1=GUID:TGUID=GUID to convert to a string.
[Result]
A string representing the GUID.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclStringToGUID(const S: string): TGUID;
[ShortDescr]
Converts a string to a GUID.
[Description]
JclStringToGUID converts a string to a GUID. Note that the ComObj unit also has
a StringToGUID function but it requires the ole.dll to do the conversion.
[Parameters]
Count=1
1=S:string=String representing a GUID.
[Result]
The GUID the string is representing.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclEnumValueToIdent(const TypeInfo: PTypeInfo; const Value): string;
[ShortDescr]
Converts an enumeration value to it's identifier.
[Description]
JclEnumValueToIdent converts an enumeration value to it's identifier. JclEnumValueToIdent
does exactly the same as GetEnumName but doesn't require an ordinal value. In
addition JclEnumValueToIdent will do a range check on the value and return a
"Value out of range" string if it's out of range.
[Parameters]
Count=2
1=TypeInfo:PTypeInfo=RTTI of the enumeration as returned by System.TypeInfo(<I>enum type</I>),
JclGenerateEnum* or JclGenerateSubRange function.
2=Value:=Enumeration value.
[Result]
The identifier name of the value if the value is in range. If it's out of range
the resulting string will contain "Value out of range (ordinal=<I>Ord(Value)</I>)."
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Theo Bebekis;bebekis@otenet.gr
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclStrToTypedInt(const Value: string;
  const TypeInfo: PTypeInfo): Integer;
[ShortDescr]
Converts a string to an integer.
[Description]
JclStrToTypedInt converts a string to an integer. Besides the normal StrToInt,
JclStrToTypedInt will first check if a conversion function for the integer type
exists (ie. if RegisterIntegerConsts is called for the type). If such a function
exists the string may also contain identifiers. An example of a typed Integer is
TCursor.
[Parameters]
Count=2
1=Value:string=Value to convert
2=TypeInfo:PTypeInfo=Pointer to the RTTI for the integer type. This pointer can
be obtained through a call to System.TypeInfo(<I>type</I>) or JclGenerateSubRange.
[Result]
The Integer value the string represents.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclTypedIntToStr(const Value: Integer;
  const TypeInfo: PTypeInfo): string;
[ShortDescr]
Converts a Integer to a string.
[Description]
JclTypedIntToStr converts an integer to a string. Besides the normal IntToStr,
JclTypedIntToStr will first check if a conversion function for the Integer type
exists (ie. if RegisterIntegerConsts is called for the type). If such a function
exists the resulting string may contain an identifier instead of a number. An
example of a typed Integer is TCursor.
[Parameters]
Count=2
1=Value:Integer=Value to convert
2=TypeInfo:PTypeInfo=Pointer to the RTTI for the integer type. This pointer can
be obtained through a call to System.TypeInfo(<I>type</I>) or JclGenerateSubRange.
[Result]
A string representing the given value.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Conversions
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclGenerateSetType(const BaseType: PTypeInfo;
  const TypeName: ShortString): PTypeInfo;
[ShortDescr]
Generates the RTTI structure for a new set.
[Description]
JclGenerateSetType generates the RTTI structure for a new set type.
[Parameters]
Count=2
1=BaseType:PTypeInfo=RTTI of the ordinal type (as returned by
System.TypeInfo(<I>ordinal type</I>), JclGenerateEnum* or JclGenerateSubRange).
2=TypeName:ShortString=Name of the newly generated RTTI.
[Result]
The return value is a pointer to the RTTI info.
[Notes]
Count=1
1=All generated types are stored in a list and get freed on finalization of the
JclRTTI unit. Optionally you can use RemoveTypeInfo to remove a specific type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI generation
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclGenerateEnumType(const TypeName: ShortString;
  const Literals: array of string): PTypeInfo;
[ShortDescr]
Generates the RTTI structure for a new enumeration base type.
[Description]
JclGenerateEnumType generates the RTTI structure for a new enumeration type.
[Parameters]
Count=2
1=TypeName:ShortString=Name of the newly generated RTTI.
2=Literals:array of string=Array of literals. Opposed to the Delphi syntax, literals
can contain any ASCII character. Literals can be a maximum of 256 characters long.
[Result]
The return value is a pointer to the RTTI info.
[Notes]
Count=1
1=All generated types are stored in a list and get freed on finalization of the
JclRTTI unit. Optionally you can use RemoveTypeInfo to remove a specific type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI generation
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclGenerateEnumTypeBasedOn(const TypeName: ShortString;
  const BaseType: PTypeInfo; const PrefixCut: Byte): PTypeInfo;
[ShortDescr]
Generates the RTTI structure for a new enumeration base type based on an existing
enumeration.
[Description]
JclGenerateEnumTypeBasedOn generates the RTTI structure for a new enumeration type,
based on an existing enumeration.
[Parameters]
Count=3
1=TypeName:ShortString=Name of the newly generated RTTI.
2=BaseType:PTypeInfo=Pointer to RTTI of enumeration type to base the new type on.
The pointer can be obtained from a call to System.TypeInfo(<I>ordinal type</I>),
JclGenerateEnum* or JclGenerateSubRange.
3=PrefixCut:Byte=Number of characters to skip from the left. Additionally this
value can be set to PREFIX_CUT_LOWERCASE (skip all leading lowercase characters)
or PREFIX_CUT_EQUAL (skip all common leading characters).
[Result]
The return value is a pointer to the RTTI info.
[Notes]
Count=1
1=All generated types are stored in a list and get freed on finalization of the
JclRTTI unit. Optionally you can use RemoveTypeInfo to remove a specific type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI generation
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclGenerateSubRange(const BaseType: PTypeInfo; const TypeName: string;
  const MinValue, MaxValue: Integer): PTypeInfo;
[ShortDescr]
Generates the RTTI structure for a new sub range type.
[Description]
JclGenerateSubRange generates the RTTI structure for a new sub range type.
[Parameters]
Count=4
1=BaseType:PTypeInfo=Pointer to RTTI of ordinal type to base the new type on.
The pointer can be obtained from a call to System.TypeInfo(<I>ordinal type</I>),
JclGenerateEnum* or JclGenerateSubRange.
2=TypeName:ShortString=Name of the newly generated RTTI.
3=MinValue:Integer=Minium value for the sub range.
4=MaxValue:Integer=Maximum value for the sub range.
[Result]
The return value is a pointer to the RTTI info.
[Notes]
Count=1
1=All generated types are stored in a list and get freed on finalization of the
JclRTTI unit. Optionally you can use RemoveTypeInfo to remove a specific type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI generation
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure RemoveTypeInfo(const TypeInfo: PTypeInfo);
[ShortDescr]
Removes a generated RTTI structure.
[Description]
RemoveTypeInfo removes a user generated RTTI structure.
[Parameters]
Count=1
1=TypeInfo:PTypeInfo=Pointer to the user generated RTTI as returned by
JclGenerateEnumType, JclGenerateEnumTypeBasedOn or JclGenerateSubRange.
[Notes]
Count=1
1=All generated types are stored in a list and get freed on finalization of the
JclRTTI unit. Optionally you can use RemoveTypeInfo to remove a specific type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI generation
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclHookIs(const IsProc: TJclIsFunc): Boolean;
[ShortDescr]
Hooks the is/as class operators.
[Description]
JclHookIs hooks the <B>is</B> and <B>as</B> class operators. The <B>as</B> operator
will be hooked to a function that uses the <B>is</B> operator to check the valid
cast. If it's valid the object is simply returned, otherwise the normal exception
will be raised ('Invalid cast').<P>
The <B>is</B> operator is hooked to the specified function. JclRTTI provides two
functions: JclIsClass and JclIsClassByName.<BR>
The first is an exact copy of the function found in the system unit, and checks
the class based on RTTI (or rather VMT) pointers. The second checks the class
based on it's name.
[Parameters]
Count=1
1=IsProc:TJclIsFunc=Function to use as the <B>is</B> operator.
[Result]
If the hook was successfully set True will be returned, False otherwise.
[Notes]
Count=1
1=This procedure changes the executable code (with the risk of completly
destroying your application).
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Class operator hooking
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclIsHooked: Boolean;
[ShortDescr]
Checks if the class operators are hooked.
[Description]
JclIsHooked checks if the class operators are hooked.
[Result]
If the class operators are hooked True will be returned, False otherwise.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Class operator hooking
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclUnhookIs: Boolean;
[ShortDescr]
Unhooks the is/as class operators.
[Description]
JclUnhookIs unhooks the <B>is</B> and <B>as</B> class operators.
[Result]
If the class operators were hooked and could be unhooked successfully True will
be returned, False othwerwise.
[Notes]
Count=1
1=This procedure changes the executable code (with the risk of completly
destroying your application).
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Class operator hooking
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclIsClass(const AnObj: TObject; const AClass: TClass): Boolean;
[ShortDescr]
Is class operator replacement
[Description]
JclIsClass is an <B>is</B> class operator replacement. This implementation is
an exact copy of the one in the system.pas unit.<P>
JclIsClass is primarily intended to be used by the JclIsHook function. Because
JclIsClass is an exact copy of the version in system.pas it's probably not very
usefull to hook the <B>is</B> operator to an exact copy. It was used during
testing.
[Result]
If AnObj's class is AClass or inherits from AClass the function returns True,
otherwise it returns False.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Class operator hooking
Author=Borland
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclIsClassByName(const AnObj: TObject; const AClass: TClass): Boolean;
[ShortDescr]
Is class operator replacement
[Description]
JclIsClassByName is an <B>is</B> class operator replacement. This implementation
checks the class by it's name.<P>
JclIsClassByName checks the name of AnObj's class with the name of AClass. If
they're not equal (case insensitive), the parent tree is checked. If an equal
name is found, the entire path to the root is checked as well. Only if the path
exactly matches AnObj <B>is</B> AClass is assumed to be True.
[Result]
If AnObj's class is AClass or inherits from AClass the function returns True,
otherwise it returns False.
[Notes]
Count=1
1=Although the names of all classes upto the root matches, it's not certain that
AnObj actually is of AClass. To increase certainty, one should also check the
unit name where the class is declared and possibly also it's InstanceSize.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=Class operator hooking
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function JclTypeInfo(const ATypeInfo: PTypeInfo): IJclTypeInfo;
[ShortDescr]
Retrieve RTTI information
[Description]
JclTypeInfo retrieves and interface to RTTI information given a pointer to the
type info structure. ATypeInfo can be obtained through a call to
System.TypeInfo(<I>type identifier</I>) or through one of the JclGenerate*
functions.
[Result]
An interface reference to the RTTI info for the specified type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclBaseInfo = interface
[ShortDescr]
Basic type info interface
[Description]
IJclBaseInfo is the base interface of type information retrieval. It provides two
method for outputting the RTTI
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclBaseInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure WriteTo(const Dest: IJclInfoWriter);
[ShortDescr]
Write RTTI information to the info writer.
[Description]
WriteTo writes the RTTI information to the info writer.
[Parameters]
Count=1
1=Dest:IJclInfoWriter=Info writer object to write to.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclBaseInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure DeclarationTo(const Dest: IJclInfoWriter);
[ShortDescr]
Writes the Pascal declaration of the type to the info writer.
[Description]
DeclarationTo writes the Pascal declaration to the info writer. Note that the
declaration for some types is not exact, more specifically the declarations for
interface and class types. That is because not all information needed is in the
RTTI.
[Parameters]
Count=1
1=Dest:IJclInfoWriter=Info writer object to write to.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclBaseInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclTypeInfo = interface(IJclBaseInfo)
[ShortDescr]
Generic RTTI interface.
[Description]
IJclTypeInfo is the generic interface of RTTI. It provides for methods and
properties to query the type name, type kind, pointer to the type info and a
pointer to the type data.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetName: string;
[ShortDescr]
Retrieves the name of the type.
[Description]
GetName retrieves the name of the type. GetName is the read specifier for the
Name property.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetTypeData: PTypeData;
[ShortDescr]
Retrieves a pointer to the type data.
[Description]
GetTypeData retrieves a pointer to the type data of the type. GetTypeData is the
read specifier for the TypeData property.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetTypeInfo: PTypeInfo;
[ShortDescr]
Retrieves a pointer to the type info.
[Description]
GetTypeInfo retrieves a pointer to the type info of the type. GetTypeInfo is the
read specifier for the TypeInfo property.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetTypeKind: TTypeKind;
[ShortDescr]
Retrieves the type kind.
[Description]
GetTypeKind retrieves the type kind of the type. GetTypeKind is the read
specifier for the TypeKind property. For more information please refer to the
Delphi help on TTypeKind.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string;
[ShortDescr]
Retrieves the name of the type.
[Description]
Name retrieves the name of the type.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property TypeData: PTypeData;
[ShortDescr]
Retrieves a pointer to the type data.
[Description]
TypeData retrieves a pointer to the type data of the type.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property TypeInfo: PTypeInfo;
[ShortDescr]
Retrieves a pointer to the type info.
[Description]
TypeInfo retrieves a pointer to the type info of the type.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property TypeKind: TTypeKind;
[ShortDescr]
Retrieves the type kind.
[Description]
TypeKind retrieves the type kind of the type. For more information please refer
to the Delphi help on TTypeKind.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclOrdinalTypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Ordinal RTTI interface.
[Description]
IJclOrdinalTypeInfo is the base interface for ordinal types. It provides
methods and properties to query the ordinal type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetOrdinalType: TOrdType;
[ShortDescr]
Retrieves the ordinal type.
[Description]
GetOrdinalType retrieves the ordinal type. GetOrdinalType is the read specifier
for the OrdinalType property. See Delphi's help on TOrdType.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property OrdinalType: TOrdType;
[ShortDescr]
Retrieves the ordinal type.
[Description]
OrdinalType retrieves the ordinal type. See Delphi's help on TOrdType.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclOrdinalRangeTypeInfo = interface(IJclOrdinalTypeInfo)
[ShortDescr]
Ordinal range RTTI interface.
[Description]
IJclOrdinalRangeTypeInfo is the base interface for ranged ordinal types. It
provides methods and properties to query the minimum and maximum values.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalRangeTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetMinValue: Int64;
[ShortDescr]
Retreives the minimum value.
[Description]
GetMinValue retrieves the minimum value for the ordinal type. GetMinValue is the
read specifier for the MinValue property.
[Result]
The minimum value of the range.
[Notes]
Count=1
1=Although Int64 is not an ordinal type, it is used in this interface for the min
and max values because it allows for all possible ranges (signed or unsigned 32-bit
Integer values). This is not the case for Delphi 4 because Delphi 4
doesn't indicate that a type is an unsigned long.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalRangeTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetMaxValue: Int64;
[ShortDescr]
Retreives the maximum value.
[Description]
GetMaxValue retrieves the maximum value for the ordinal type. GetMaxValue is the
read specifier for the MaxValue property.
[Result]
The maximum value of the range.
[Notes]
Count=1
1=Although Int64 is not an ordinal type, it is used in this interface for the min
and max values because it allows for all possible ranges (signed or unsigned 32-bit
Integer values). This is not the case for Delphi 4 because Delphi 4
doesn't indicate that a type is an unsigned long.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalRangeTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property MinValue: Int64;
[ShortDescr]
Retreives the minimum value.
[Description]
MinValue retrieves the minimum value for the ordinal type.
[Notes]
Count=1
1=Although Int64 is not an ordinal type, it is used in this interface for the min
and max values because it allows for all possible ranges (signed or unsigned 32-bit
Integer values). This is not the case for Delphi 4 because Delphi 4
doesn't indicate that a type is an unsigned long.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalRangeTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property MaxValue: Int64;
[ShortDescr]
Retreives the maximum value.
[Description]
MaxValue retrieves the maximum value for the ordinal type.
[Notes]
Count=1
1=Although Int64 is not an ordinal type, it is used in this interface for the min
and max values because it allows for all possible ranges (signed or unsigned 32-bit
Integer values). This is not the case for Delphi 4 because Delphi 4
doesn't indicate that a type is an unsigned long.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclOrdinalRangeTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclEnumerationTypeInfo = interface(IJclOrdinalRangeTypeInfo)
[ShortDescr]
Enumeration RTTI interface.
[Description]
IJclEnumerationTypeInfo is the interface for enumeration types. It provides
methods and properties to query the base type, the name list and locating a name.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetBaseType: IJclEnumerationTypeInfo;
[ShortDescr]
Retrieves an interface to the base type
[Description]
GetBaseType retrieves an interface to the base type for the enumeration. If the
enumeration is the base type an interface to the object is returned.
 <P>
Under normal circumstances an enumeration can have at most 1 base type (a sub
range is always the sub range of the base type, never a sub range of a sub range).
GetBaseType is the read specifier for the BaseType property.
[Result]
An interface pointer to the base type for this enumeration. If this enumeration
is the base type, a pointer to the same object is returned.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetNames(const I: Integer): string;
[ShortDescr]
Retrieves a name of the enumeration
[Description]
GetNames retrieves a name given an ordinal value. No range check is performed and
it is possible to retrieve names of ordinals that are not part of the sub range.
GetNames is the read specifier for the Names property.
[Parameters]
Count=1
1=I:Integer=Ordinal value to get the name of.
[Result]
Enumeration name of the given ordinal.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetUnitName: string;
[ShortDescr]
Retrieves the unit name of the enumeration
[Description]
GetUnitName retrieves the unit name where the type is declared. GetUnitName is
the read specifier for the UnitName property.
[Result]
Name of the unit where the type is declared.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function IndexOfName(const Name: string): Integer;
[ShortDescr]
Retrieves a the inbdex of a name of the enumeration
[Description]
IndexOfName retrieves the index for a given name. If the names does not exist
within the sub range -1 is returned.
[Parameters]
Count=1
1=Name:string=Enumeration name to get the ordinal for.
[Result]
If the enumeration name exists within the sub range, it's ordinal value is returned,
otherwise -1 is returned.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property BaseType: IJclEnumerationTypeInfo;
[ShortDescr]
An interface to the base type
[Description]
BaseType holds a reference to an interface to the base type for the enumeration.
If the enumeration is the base type an interface to the object is returned.
 <P>
Under normal circumstances an enumeration can have at most 1 base type (a sub
range is always the sub range of the base type, never a sub range of a sub range).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Names[const I: Integer]: string; default;
[ShortDescr]
A name of an enumeration value
[Description]
Names retrieves a name given an ordinal value. No range check is performed and
it is possible to retrieve names of ordinals that are not part of the sub range.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property UnitName: string;
[ShortDescr]
The unit name of the enumeration
[Description]
UnitName holds the unit name where the type is declared.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEnumerationTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclSetTypeInfo = interface(IJclOrdinalTypeInfo)
[ShortDescr]
Set RTTI interface.
[Description]
IJclSetTypeInfo is the interface for set types. It provides methods and properties
to query the base type and convert values from/to a string list.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclSetTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetBaseType: IJclOrdinalTypeInfo;
[ShortDescr]
Retrieves an interface to the base type
[Description]
GetBaseType retrieves an interface to the base type for the set. GetBaseType is
the read specifier for the BaseType property.
 <P>
 <B>Background:</B><BR>
When the compiler finds a set declaration similar to <I>TMySet = <B>set of</B>
(<valuelist>)</I> an implicit enumeration type is generated for that set. The
distinction between a set based on a declared enumeration or an implicit enumeration
can be made by examining the name of the base type. If it starts with a dot
(".") it's an implicit type generated by the compiler.
[Result]
An interface pointer to the base type for this set.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclSetTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure GetAsList(const Value;  const WantRanges: Boolean; const Strings: TStrings);
[ShortDescr]
Convert a set value to a list of strings.
[Description]
Convert a set value to a list of members. Optionally adjacent members in the
set are specified as a range instead of separate strings.
[Parameters]
Count=3
1=Value:=Set variable to convert to a list of member values.
2=WantRanges:Boolean=Flag to determine if ranges are to be used for adjacent members.
3=Strings:TStrings=TStrings descendant to retrieve the list of values/ranges set
in Value. Caller is responsible for instantiating, clearing and freeing the list object.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclSetTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SetAsList(out Value; const Strings: TStrings);
[ShortDescr]
Convert a a list of strings to a set value.
[Description]
Convert a list of string values to a set value. Strings can be any valid set member or
ranges of set members.
[Parameters]
Count=2
1=Value:=Set variable to retrieve the the set value.
2=Strings:TStrings=TStrings descendant holding the list of members/ranges. Caller
is responsible for instantiating and freeing the list object.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclSetTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property BaseType: IJclOrdinalTypeInfo;
[ShortDescr]
An interface to the base type
[Description]
BaseType is an interface to the base type for the set
 <P>
 <B>Background:</B><BR>
When the compiler finds a set declaration similar to <I>TMySet = <B>set of</B>
(<valuelist>)</I> an implicit enumeration type is generated for that set. The
distinction between a set based on a declared enumeration or an implicit enumeration
can be made by examining the name of the base type. If it starts with a dot
(".") it's an implicit type generated by the compiler.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclSetTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclFloatTypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Float RTTI interface.
[Description]
IJclFloatTypeInfo is the interface for float types. It provides
methods and properties to query the float type.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclFloatTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFloatType: TFloatType;
[ShortDescr]
Retrieve float type.
[Description]
GetFloatType retrieves the float type. See TFloatType in the TypInfo unit for
more information. GetFloatType is the read specifier for the FloatType property
[Result]
The float type of this float info object.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclFloatTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property FloatType: TFloatType;
[ShortDescr]
The float type.
[Description]
FloatType holds the float type. See TFloatType in the TypInfo unit for
more information.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclFloatTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclStringTypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Short string RTTI interface.
[Description]
IJclStringTypeInfo is the interface for short string types. It provides
methods and properties to query the maximum string length.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclStringTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetMaxLength: Integer;
[ShortDescr]
Retrieve teh maximum length.
[Description]
GetMaxLength retrieves the maximum string length. GetMaxLength is the read
specifier for the MaxLength property
[Result]
The float type of this float info object.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclStringTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property MaxLength: Integer;
[ShortDescr]
The maximum string length.
[Description]
MaxLength holds the maximum string length for this ShortString type.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclStringTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
TJclPropSpecKind = (pskNone, pskStaticMethod, pskVirtualMethod, pskField, pskConstant);
[ShortDescr]
Property access specifier kind
[Description]
TJclPropSpecKind is the access specifier kind for the read, write or stored
specifier of a given property.
[Enumeration]
Count=5
1=pskNone=Specifier does not exist.
2=pskStaticMethod=Specifier uses a static method. The specifier value holds the
address of the method.
3=pskVirtualMethod=Specifier uses a virtual method. The specifier value holds the
VMT slot of the method.
4=pskField=Specifier uses a field. The specifier value holds the offset (relative
to the start of the instance) to the field.
5=pskConstant=Specifier uses a constant. The specifier value holds the constant.
Note that constants are used for the stored specifier only.
[Quick Info]
Kind=Type
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclPropInfo = interface
[ShortDescr]
Class RTTI property interface.
[Description]
IJclPropInfo is the interface for properties of class types. It provides
methods and properties to query the read, write and stored specifier values /
types, property name and index, default value and index specifier.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo\IJclPropInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclClassTypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Class RTTI interface.
[Description]
IJclClassTypeInfo is the interface for class types. It provides
methods and properties to query the class reference, parent info, property info
and unit of declaration.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetClassRef: TClass;
[ShortDescr]
Retrieve a class reference
[Description]
GetClassRef retrieves the class reference to the class. GetClassRef is the read
specifier for the ClassRef property.
[Result]
A class reference to the class.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetParent: IJclClassTypeInfo;
[ShortDescr]
Retrieve an interface to the RTTI of the parent class
[Description]
GetParent retrieves an interface to the RTTI of the parent class. If the class
has no parent, GetParent will return <B>nil</B>. GetParent is the read specifier
for the Parent property.
[Result]
If the class has a parent the function will return an interface to the RTTI of
the parent, otherwise the function returns <B>nil</B>.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetTotalPropertyCount: Integer;
[ShortDescr]
Retrieve the number of published properties.
[Description]
GetTotalPropertyCount retrieves the number of published properties. This number
includes all published properties of the parent tree. To find the number of
properties declared by the class, query the PropertyCount property.
GetTotalPropertyCount is the read specifier for the TotalPropertyCount property.
[Result]
The number of published properties declared by the class and it's ancestors.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetPropertyCount: Integer;
[ShortDescr]
Retrieve the number of published properties declared in this class
[Description]
GetPropertyCount retrieves the number of properties published by this class. To
find the number of published properties in this class and it's ancestors, query the
TotalPropertyCount property. GetPropertyCount is the read specifier for the
PropertyCount property.
[Result]
The number of published properties declared by the class.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetProperties(const PropIdx: Integer): IJclPropInfo;
[ShortDescr]
Retrieve an interface to the property.
[Description]
GetProperties retrieves an interface to the property at the given index. Valid
index values run from 0 up to TotalPropertyCount-1. Up to PropertyCount are
properties declared by this class. GetProperties is the read specifier for the
Properties property.
[Parameters]
Count=1
1=PropIdx:Integer=Index of property to retrieve.
[Result]
An interface to the requested property.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetUnitName: string;
[ShortDescr]
Retrieve the unit name where the class is declared
[Description]
GetUnitName retrieves the name of the unit where the class is declared.
GetUnitName is the read specifier for the UnitName property.
[Result]
The name of the unit where the class is declared.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property ClassRef: TClass;
[ShortDescr]
Class reference
[Description]
ClassRef holds the class reference to the class.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Parent: IJclClassTypeInfo;
[ShortDescr]
Retrieve an interface to the RTTI of the parent class
[Description]
Parent holds an interface to the RTTI of the parent class. If the class has no
parent, Parent will be <B>nil</B>.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property TotalPropertyCount: Integer;
[ShortDescr]
Number of published properties.
[Description]
TotalPropertyCount holds the number of published properties. This number
includes all published properties of the ancestor tree. To find the number of
properties declared by the class, query the PropertyCount property.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property PropertyCount: Integer;
[ShortDescr]
Number of published properties declared in this class
[Description]
PropertyCount holds the number of properties published by this class. To
find the number of published properties in this class and it's ancestors, query
the TotalPropertyCount property.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Properties[const PropIdx: Integer]: IJclPropInfo;
[ShortDescr]
Array of interfaces to the properties.
[Description]
Properties is an array of interfaces to the properties. Valid index values run
from 0 up to TotalPropertyCount-1. Up to PropertyCount-1 are properties declared
by this class.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property UnitName: string;
[ShortDescr]
Unit name where the class is declared
[Description]
UnitName holds the name of the unit where the class is declared.
[Quick Info]
Unit=JclRTTI
Kind=property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclClassTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclEventParamInfo = interface
[ShortDescr]
Event RTTI parameter interface.
[Description]
IJclEventParamInfo is the interface for parameters of event types. It provides
methods and properties to obtain parameter flags, name and type name for the
parameter. Note that for event parameters the type name is stored, not a pointer
to the RTTI and it's therefor impossible to get RTTI info for parameters.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFlags: TParamFlags;
[ShortDescr]
Retrieve parameter flags.
[Description]
GetFlags retrieves the parameter flags that show if a given parameter is specified
using <B>const</B>, <B>var or <B>out</B> and if the parameter is an <B>array of</B>
the specified type. GetFlags is the read specifier for the Flags property.
[Result]
A set of parameter flags for this parameter.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetName: string;
[ShortDescr]
Retrieve parameter name.
[Description]
GetName retrieves the parameter name. GetName is the read specifier for the Name
property.
[Result]
The parameter name.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetRecSize: Integer;
[ShortDescr]
Retrieve parameter RTTI record size.
[Description]
GetRecSize retrieves the parameter RTTI record size. GetRecSize is the read
specifier for the RecSize property.
[Result]
The size of the record for this parameter in the RTTI structure. 
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetTypeName: string;
[ShortDescr]
Retrieve parameter type name.
[Description]
GetTypeName retrieves the parameter type name. For event parameters there's no
RTTI pointer to the type, just the name. GetTypeName is the read specifier for
the TypeName property.
[Result]
If it's a typed parameter the function will return the name of that type,
otherwise an empty string is returned.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetParam: Pointer;
[ShortDescr]
Retrieve pointer to the parameter record.
[Description]
GetParam retrieves the pointer to the parameter record. GetParam is the read
specifier for the Param property.
[Result]
A pointer to the parameters' record in the RTTI structure.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Flags: TParamFlags;
[ShortDescr]
Parameter flags.
[Description]
Flags holds the parameter flags that show if a given parameter is specified
using <B>const</B>, <B>var or <B>out</B> and if the parameter is an <B>array of</B>
the specified type. 
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Name: string;
[ShortDescr]
Parameter name.
[Description]
Name holds the parameter name.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property RecSize: Integer;
[ShortDescr]
Parameter RTTI record size.
[Description]
RecSize holds the parameter RTTI record size.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property TypeName: string;
[ShortDescr]
Parameter type name.
[Description]
TypeName holds the parameter type name. For event parameters there's no
RTTI pointer to the type, just the name.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Param: Pointer;
[ShortDescr]
Pointer to the parameter record.
[Description]
Param holds the pointer to the parameter record.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo\IJclEventParamInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclEventTypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Event RTTI interface.
[Description]
IJclEventTypeInfo is the interface for event types. It provides methods and
properties to query the method type (function or procedure), parameter info and
the result type name (for functions).
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetMethodKind: TMethodKind;
[ShortDescr]
Method kind.
[Description]
GetMethodKind retrieves the method type (either a procedure or a function).
GetMethodKind is the read specifier of the MethodKind property.
[Result]
If the event is a procedure the function will return mkProcedure, otherwise
mkFunction is returned.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetParameterCount: Integer;
[ShortDescr]
Retrieves the number of parameters
[Description]
GetParameterCount retrieves the number of parameters declared. GetParameterCount
is the read specifier of the ParameterCount property.
[Result]
The number of parameters declared in the event.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetParameters(const ParamIdx: Integer): IJclEventParamInfo;
[ShortDescr]
Retrieves an interface to the parameter info.
[Description]
GetParameters retrieves an interface to parameter info. GetParameters is the
read specifier of the Parameters property.
[Parameters]
Count=1
1=ParamIdx:Integer=Index (0-based) of parameter to retrieve.
[Result]
An interface to the requested parameter.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetResultTypeName: string;
[ShortDescr]
Retrieves the result type name.
[Description]
GetResultTypeName retrieves the result type name. If the MethodKind = mkProcedure,
GetResultTypeName will return an empty string. GetResultTypeName is the read
specifier of the ResultTypeName property.
[Result]
If MethodKind = mkFunction teh function returns the name of result type, otherwise
the function returns an empty string.
[Quick Info]
Unit=JclRTTI
Kind=Method
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property MethodKind: TMethodKind;
[ShortDescr]
Method kind
[Description]
MethodKind holds the method type (either a procedure or a function).
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property ParameterCount: Integer;
[ShortDescr]
Number of parameters
[Description]
ParameterCount holds the number of parameters declared. 
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Parameters[const ParamIdx: Integer]: IJclEventParamInfo;
[ShortDescr]
An array of interface's to the parameter info
[Description]
Parameters is an array to parameter info interfaces. The index is 0-based.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property ResultTypeName: string;
[ShortDescr]
Result type name.
[Description]
ResultTypeName holds the result type name. If the MethodKind = mkProcedure,
ResultTypeName will be an empty string.
[Quick Info]
Unit=JclRTTI
Kind=Property
Visibility=Public
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclEventTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclInterfaceTypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Interface RTTI interface.
[Description]
IJclInterfaceTypeInfo is the RTTI interface for interface types. It provides
methods and properties to query the parent interface, the interface GUID,
it's flags unit name of declaration and number of properties (Delphi 6 only).
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetParent: IJclInterfaceTypeInfo;
[ShortDescr]
Retrieve a reference to the parent interface.
[Description]
GetParent retrieves an interface to the parent interface of this type. If the
interface has no parent nil is returned. GetParent is the read specifier of the
Parent property.
[Result]
A reference to the parent interface RTTI. If the interface has no parent <B>nil</B>
will be returned instead.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetFlags: TIntfFlagsBase;
[ShortDescr]
Retrieve the interface flags.
[Description]
GetFlags retrieves the interface flags. There are three possible flags: <BR><UL>
 <IL>ifHasGUID - Interface has a GUID</IL>
 <IL>ifDispInterface - Interface is an <B>dispinterface</B>
 <IL>ifDispatch - Interface supports the IDispatch interface</IL></UL> <BR>
GetFlags is the read specifier of the Flags property.
[Result]
A set of flags that apply to the interface.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetGUID: TGUID;
[ShortDescr]
Retrieve the interface GUID.
[Description]
GetGUID retrieves the interface GUID. If the interface has no GUID the null GUID
is returned. GetGUID is the read specifier of the GUID property.
[Result]
The GUID of the interface or the null GUID if the interface has no GUID.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetPropertyCount: Integer;
[ShortDescr]
Retrieve the number of properties in the interface.
[Description]
GetPropertyCount retrieves the number of properties declared in the interface.
Although the number of properties is stored, there's no information on individual
properties. GetPropertyCount is the read specifier of the PropertyCount property.
[Result]
The number of properties declared in the interface.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetUnitName: string;
[ShortDescr]
Retrieve the unit name of the interface.
[Description]
GetUnitName retrieves the unit name where the interface is declared. GetUnitName
is the read specifier of the UnitName property.
[Result]
The unit name where the interface is declared.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Parent: IJclInterfaceTypeInfo;
[ShortDescr]
A reference to the parent interface.
[Description]
Parent holds a reference to the parent interface of this type. If the interface
has no parent, Parent holds <B>nil</B>. 
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property Flags: TIntfFlagsBase;
[ShortDescr]
The interface flags.
[Description]
Flags hold the interface flags. There are three possible flags: <BR><UL>
 <IL>ifHasGUID - Interface has a GUID</IL>
 <IL>ifDispInterface - Interface is an <B>dispinterface</B>
 <IL>ifDispatch - Interface supports the IDispatch interface</IL></UL>
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property GUID: TGUID;
[ShortDescr]
The interface GUID.
[Description]
GUID holds the interface GUID. If the interface has no GUID the property will
hold the null GUID.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property UnitName: string;
[ShortDescr]
The unit name of the interface.
[Description]
UnitName holds the unit name where the interface is declared.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property PropertyCount: Integer;
[ShortDescr]
The number of properties in the interface.
[Description]
PropertyCount holds the number of properties declared in the interface.
Although the number of properties is stored, there's no information on individual
properties.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInterfaceTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclInt64TypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Int64 RTTI interface.
[Description]
IJclInt64TypeInfo is the interface for Int64 types. It provides methods and
properties to query the minimum and maximum values.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInt64TypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetMinValue: Int64;
[ShortDescr]
Retreives the minimum value.
[Description]
GetMinValue retrieves the minimum value. GetMinValue is the read specifier for
the MinValue property.
[Result]
The minimum value of the range.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInt64TypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetMaxValue: Int64;
[ShortDescr]
Retreives the maximum value.
[Description]
GetMaxValue retrieves the maximum value. GetMaxValue is the read specifier for
the MaxValue property.
[Result]
The maximum value of the range.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInt64TypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property MinValue: Int64;
[ShortDescr]
Retreives the minimum value.
[Description]
MinValue retrieves the minimum value.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInt64TypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property MaxValue: Int64;
[ShortDescr]
Retreives the maximum value.
[Description]
MaxValue retrieves the maximum value.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclInt64TypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=4,5,6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
IJclDynArrayTypeInfo = interface(IJclTypeInfo)
[ShortDescr]
Dynamic array RTTI interface.
[Description]
IJclDynArrayTypeInfo is the interface for dynamic array types. RTTI for dynamic
arrays is available as of Delphi 6. The interface provides methods and
properties to query the element size, it's type (both RTTI as well as varType),
the unit name of it's declaration and if the elements require clean-up.
[Quick Info]
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetElementSize: Longint;
[ShortDescr]
Retreives the element size.
[Description]
GetElementSize retrieves the size of each element. GetElementSize is the read
specifier for the ElementSize property.
[Result]
The size of each element.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetElementType: IJclTypeInfo;
[ShortDescr]
Retreives the interface to the element RTTI.
[Description]
GetElementType retrieves a reference to the interface for the RTTI of the elements.
Note that declarations as in <I>TMyArray = <B>array of record</B> x: Integer;
y: string; <B>end</B></I> do <B>not</B> generate RTTI for the elements.
GetElementType is the read specifier for the ElementType property.
[Result]
A reference to the RTTI interface for the elements or nil if there's no RTTI on
the elements.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetElementsNeedCleanup: Boolean;
[ShortDescr]
Determines if elements need cleanup.
[Description]
GetElementsNeedCleanup determines if the elements require cleanup when elements
are discarded. GetElementsNeedCleanup is the read specifier for the
ElementsNeedCleanup property.
[Result]
If the elements of the array need cleanup the function returns True, otherwise it
returns false.
[Notes]
Count=1
1=The decision is made by examining the elType member of the type data. If it's
not <B>nil</B> cleanup is required. For constructions that do not create RTTI
for the elements this decision might be wrong (notably with record constructs
containing long strings as in <I>TMyArray = <B>array of record</B> x: Integer;
y: string; <B>end</B></I>).
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetVarType: Integer;
[ShortDescr]
Retreives the OLE Automation varType equivalent.
[Description]
GetVarType retrieves the OLE Automation varType equivalent. GetVarType is the
read specifier for the VarType property.
[Result]
The OLE Automation varType equivalent
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetUnitName: string;
[ShortDescr]
Retrieves the unit name of the dynamic array
[Description]
GetUnitName retrieves the unit name where the type is declared. GetUnitName is
the read specifier for the UnitName property.
[Result]
Name of the unit where the type is declared.
[Quick Info]
Kind=Method
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetElementSize: Longint;
[ShortDescr]
The element size.
[Description]
ElementSize holds the size of each element.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
function GetElementType: IJclTypeInfo;
[ShortDescr]
Retreives the interface to the element RTTI.
[Description]
ElementType holds a reference to the interface for the RTTI of the elements.
Note that declarations as in <I>TMyArray = <B>array of record</B> x: Integer;
y: string; <B>end</B></I> do <B>not</B> generate RTTI for the elements.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property ElementsNeedCleanup: Boolean;
[ShortDescr]
Elements cleanup flag.
[Description]
ElementsNeedCleanup is the element cleanup flag.
[Notes]
Count=1
1=The decision is made by examining the elType member of the type data. If it's
not <B>nil</B> cleanup is required. For constructions that do not create RTTI
for the elements this decision might be wrong (notably with record constructs
containing long strings as in <I>TMyArray = <B>array of record</B> x: Integer;
y: string; <B>end</B></I>).
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
<DECL>--------------------------------------------------------------------------
[Declaration]
property VarType: Integer;
[ShortDescr]
The OLE Automation varType equivalent.
[Description]
VarType holds the OLE Automation varType equivalent.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
<DECL>--------------------------------------------------------------------------
[Declaration]
property UnitName: string;
[ShortDescr]
The unit name of the dynamic array
[Description]
UnitName holds the unit name where the type is declared.
[Quick Info]
Kind=Property
Visibility=Public
Unit=JclRTTI
Category=Runtime Type Information
SubCat=RTTI retrieval\IJclDynArrayTypeInfo
Author=Marcel Bestebroer;marcelb@zeelandnet.nl
Delphi=6
Kylix=1
FPC=1.x
