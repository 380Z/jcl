<DECL>--------------------------------------------------------------------------
[Declaration]
function ISqrt(const I: Smallint): Smallint;
[ShortDescr]
Returns the integral part of the square root.
[Description]
ISqrt calculates the integral part of the square root of the argument. That is,
it returns Int(Sqrt(I)). Valid values for I are 0..32767. The function does not
check the validity of the argument, i.e. it must be within the aforementioned range.
[Parameters]
Count=1
1=I:Smallint=The value for which to calculate ISqrt(I). Must be greater than or equal to 0.
[Result]
The integral part of the square root of the argument.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ModFloat(const X, Y: Float): Float;
[ShortDescr]
Returns the modulus of two floating point numbers.
[Description]
ModFloat calculates the modulus of the two floating point numbers. For floating
point numbers the modulus is calculated as: X - Floor(X / Y) * Y
[Parameters]
Count=2
1=X:Float=The first float
2=Y:Float=The second float
[Result]
Modulus of the two floating point numbers.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Float support
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=1
1=RemainderFloat
<DECL>--------------------------------------------------------------------------
[Declaration]
function RemainderFloat(const X, Y: Float): Float;
[ShortDescr]
Returns the remainder of two floating point numbers.
[Description]
RemainderFloat calculates the remainder of the two floating point numbers. For
floating point numbers the remainder is calculated as: X - Int(X / Y) * Y
[Parameters]
Count=2
1=X:Float=The first float
2=Y:Float=The second float
[Result]
The remainder of the two floating point numbers.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Float support
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=1
1=ModFloat
<DECL>--------------------------------------------------------------------------
[Declaration]
function DegMinSecToFloat(const Degs, Mins, Secs: Float): Float;
[ShortDescr]
Converts degrees, minutes, seconds to a float.
[Description]
DegMinSecToFloat converts, or packs, the supplied degrees, minutes and seconds
to a float.
[Parameters]
Count=3
1=Degs:Float=Degrees
2=Min:Float=Minutes
3=Sec:Float=Seconds
[Result]
Degrees, Minutes and Seconds converted to a float.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Conversion
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=1
1=FloatToDegMinSec
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure FloatToDegMinSec(const X: Float; var Degs, Mins, Secs: Float);
[ShortDescr]
Converts a float to degrees, minutes and seconds.
[Description]
FloatToDegMinSec converts a float to degrees, minutes and seconds.
[Parameters]
Count=4
1=X:Float=The float to convert to degrees, minutes and seconds.
2=Deg:Float=Receives the degrees.
3=Min:Float=Receives the minutes.
4=Sec:Float=Receives the seconds.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Conversion
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=1
1=DegMinSecToFloat
<DECL>--------------------------------------------------------------------------
[Declaration]
function FloatIsZero(const X: Float): Boolean;
[ShortDescr]
Tests if a float is zero.
[Description]
FloatIsZero tests whether the supplied floating point value equals zero within
the precision as specified by the <REF Target"..\Variables\PrecisionTolerance">PrecisionTolerance</REF>.
Thus the function returns True if (X &gt; -PT) and (X &lt; +PT).
[Parameters]
Count=1
1=X:Float=The floating point value to test.
[Result]
If the supplied floating point value equals zero within the precision as defined
by the <REF Target"..\Variables\PrecisionTolerance">PrecisionTolerance</REF>
global variable, the function returns True, otherwise it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Float support
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=1
1=FloatsEqual
<DECL>--------------------------------------------------------------------------
[Declaration]
function FloatsEqual(const X1, X2: Float): Boolean;
[ShortDescr]
Compares two floats for equality.
[Description]
FloatsEqual compares the two supplied floating point values for equality within
the precision defined by the <REF Target"..\Variables\PrecisionTolerance">PrecisionTolerance</REF>
global variable. Thus the two values are considered to be equal if the absolute
difference between them is smaller than the value defined by PrecisionTolerance.
[Parameters]
Count=2
1=X1:Float=First value to compare
2=X2:Float=Second value to compare
[Result]
If the two supplied values are equal within the precision defined by
the <REF Target"..\Variables\PrecisionTolerance">PrecisionTolerance</REF>
global variable, the function returns True, otherwise it returns False.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Float support
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=1
1=FloatIsZero
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SwapFloats(var X, Y: Float);
[ShortDescr]
Swaps two floating point values.
[Description]
SwapFloat swaps the two supplied floating point values. That is, at return from
this subroutine X contains the value of Y and Y contains the value of X.
[Parameters]
Count=2
1=X:Float=First float
2=Y:Float=Second float
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Float support
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Pythagoras(X, Y: Float): Float;
[ShortDescr]
Computes Sqrt(X^2 + Y^2)
[Description]
Computes Sqrt(X^2 + Y^2) without destructive underflow or overflow.
[Parameters]
Count=2
1=X:Float=First float
2=Y:Float=Second float
[Result]
Sqrt(X^2 + Y^2)
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=J. Debord;debord@alpha1.unilim.fr
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function NormalizeAngle(const Angle: Float): Float;
[ShortDescr]
Normalizes the given angle
[Description]
NormalizeAngle normalizes the given angle. That is, it makes sure that the angle
falls in the interval -PI..PI by iteratively adding or subtracting 2*PI.
[Parameters]
Count=1
1=Angle:Float=The angle to normalize.
[Result]
The normalized angle.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=J. Debord;debord@alpha1.unilim.fr
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function TenToY(const Y: Float): Float;
[ShortDescr]
Raises 10 to the power Y.
[Description]
TenToY calculates 10 to the power Y.
[Parameters]
Count=1
1=Y:Float=The exponent to raise 10 to.
[Result]
10 to the power Y.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Exponential
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=3
1=Power
2=PowerInt
3=TwoToY
<DECL>--------------------------------------------------------------------------
[Declaration]
function TwoToY(const Y: Float): Float;
[ShortDescr]
Raises 2 to the power Y.
[Description]
TenToY calculates 2 to the power Y.
[Parameters]
Count=1
1=Y:Float=The exponent to raise 2 to.
[Result]
2 to the power Y.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Exponential
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=3
1=Power
2=PowerInt
3=TenToY
<DECL>--------------------------------------------------------------------------
[Declaration]
function PowerInt(X: Float; N: Integer): Float;
[ShortDescr]
Returns X to the power N.
[Description]
PowerInt calculates X to the power N where N is an integer. This function uses
multiplication to raise X to the power N which is faster than using the
formal formula for Power (which uses Exp and Ln) and therefore you should favor
this function over <REF>Power</REF> when the exponent is an integer.
[Parameters]
Count=2
1=X:Float=Base value
2=N:Integer=Exponent
[Result]
X to the power N
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Exponential
Author=J. Debord;debord@alpha1.unilim.fr
Delphi=3,4,5
[SeeAlso]
Count=3
1=Power
2=TenToY
3=TwoToY
<DECL>--------------------------------------------------------------------------
[Declaration]
function RelativePrime(const X, Y: Cardinal): Boolean;
[ShortDescr]
Tests if two numbers are relatively prime.
[Description]
RelativePrime returns whether the two supplied numbers are relatively prime to each
other. Two numbers are said to be relatively prime if their greatest common divisor
equals 1. Another term used for relative prime is coprime.
[Parameters]
Count=2
1=X:Cardinal=First of the two values.
2=Y:Cardinal=Second of the two values.
[Result]
If the two numbers are relatively prime the result is True, otherwise the result is
False.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=2
1=GCD
2=LCM
<DECL>--------------------------------------------------------------------------
[Declaration]
function LCM(const X, Y: Cardinal): Cardinal;
[ShortDescr]
Returns the Least Common Multiple of two integers.
[Description]
The LCM function returns the Least Common Multiple (LCM) of the two supplied
integers.
[Parameters]
Count=2
1=X:Cardinal=First of the two values.
2=Y:Cardinal=Second of the two values.
[Result]
The least common multiple of X and Y.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=2
1=GCD
2=RelativePrime
<DECL>--------------------------------------------------------------------------
[Declaration]
function GCD(const X, Y: Cardinal): Cardinal;
[ShortDescr]
Returns the greatest common divisor.
[Description]
The GCD function returns the greatest common divisor (GCD) of the two supplied
integers. This is also sometimes referred to as the Highest Common Factor (HCF).
The function is implemented using Euclid's algorithm.
[Parameters]
Count=2
1=X:Cardinal=First of the two values.
2=Y:Cardinal=Second of the two values.
[Result]
The greatest common divisor of X and Y.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=ESB Consultancy;glenn@esbconsult.com.au
Delphi=3,4,5
[SeeAlso]
Count=2
1=LCM
2=RelativePrime
<DECL>--------------------------------------------------------------------------
[Declaration]
function CycleToGrad(const Cycles: Float): Float;
[ShortDescr]
Converts cycles to grads.
[Description]
CycleToGrad converts a given angle, in cycles, to the corresponding angle in grads.
[Parameters]
Count=1
1=Cycles:Float=The angle, in cycles, to convert.
[Result]
The angle in cycles.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Conversion
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function DegToGrad(const Degrees: Float): Float;
[ShortDescr]
Converts degrees to grads.
[Description]
DegToGrad converts a given angle, in degrees, to the corresponding angle in grads.
[Parameters]
Count=1
1=Degrees:Float=The angle, in degrees, to convert.
[Result]
The angle in grads.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Conversion
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GradToCycle(const Grads: Float): Float;
[ShortDescr]
Converts grads to cycles.
[Description]
GradToCycle converts a given angle, in grads, to the corresponding angle in cycles.
[Parameters]
Count=1
1=Grads:Float=The angle, in grads, to convert.
[Result]
The angle in cycles.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Conversion
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function GradToDeg(const Grads: Float): Float;
[ShortDescr]
Converts grads to degrees.
[Description]
GradToDeg converts a given angle, in grads, to the corresponding angle in degrees.
[Parameters]
Count=1
1=Grads:Float=The angle, in grads, to convert.
[Result]
The angle in degrees.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Conversion
Author=Marcel van Brakel;brakelm@bart.nl
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function LogBaseN(Base, X: Float): Float;
[ShortDescr]
Returns log base N.
[Description]
LogBaseN returns the log base N of X. This is calculated as LogN(X) := Log.2(X) / Log.2(N)
[Parameters]
Count=2
1=Base:Float=Base of log (N). Base must be larger than 0.0 and cannot be 1.0 or
an exception is raised.
2=X:Float=Value whose log base N to calculate. N must be larger than 0.0.
[Result]
Log base N of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Logarithmic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
[SeeAlso]
Count=2
1=LogBase2
2=LogBase10
<DECL>--------------------------------------------------------------------------
[Declaration]
function LogBase2(X: Float): Float;
[ShortDescr]
Returns log base 2.
[Description]
LogBase2 returns the log base 2 of X.
[Parameters]
Count=1
1=X:Float=Value whose log base 2 to calculate. X must be larger than 0.0.
[Result]
Log base 2 of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Logarithmic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
[SeeAlso]
Count=2
1=LogBase10
2=LogBaseN
<DECL>--------------------------------------------------------------------------
[Declaration]
function LogBase10(X: Float): Float;
[ShortDescr]
Returns log base 10.
[Description]
LogBase10 returns the log base 10 of X. This is calculated as Log10(X) := Log.2(X) * Log.10(2)
[Parameters]
Count=1
1=X:Float=Value whose log base 10 to calculate. X must be larger than 0.0.
[Result]
Log base 10 of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Logarithmic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
[SeeAlso]
Count=2
1=LogBase2
2=LogBaseN
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcCos(X: Float): Float;
[ShortDescr]
Calculates the inverse cosine of X.
[Description]
ArcCos calculates the inverse cosine of X. Meaning it returns the angle whose
cosine equals X. ArcCos is defined as ArcTan2(Sqrt(1.0 - X*X), X).
[Parameters]
Count=1
1=X:Float=Value for which to calculate the inverse cosine. Absolute value of X
must be smaller than 1.0.
[Result]
The inverse cosine of X in radians.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcCosH(X: Float): Float;
[ShortDescr]
Calculates the inverse hyperbolic cosine.
[Description]
ArcCosH calculates the inverse hyperbolic cosine of X. ArcCosH is defined as
Ln(X + Sqrt(X * X - 1).
[Parameters]
Count=1
1=X:Float=Value for which to calculate the inverse hyperbolic cosine. Must be
greater than or equal to 1.0.
[Result]
The inverse hyperbolic cosine of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcCot(X: Float): Float;
[ShortDescr]
Calculates the inverse of cotangent.
[Description]
ArcCot calculates the inverse cotangent. Meaning it returns the angle whose
cotangent equals X. ArcCot is calculated as -Arctan(X) + PI_2.
[Parameters]
Count=1
1=X:Float=Value whose ArcCot to calculate
[Result]
The angle whose cotangent equals X in radians.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcCotH(X: Float): Float;
[ShortDescr]
Calculates the inverse hyperbolic cotangent.
[Description]
ArcCotH calculates the inverse hyperbolic CotH. Meaning it returns the value
whose hyperbolic cotangent equals X. It is defined as Ln((X + 1.0) / (X - 1.0)) / 2.0.
[Parameters]
Count=1
1=X:Float=The value whose ArcCotH to calculate. Absolute value of X must be inequal
to 1.0.
[Result]
ArcCoth of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcCsc(X: Float): Float;
[ShortDescr]
Calculates the inverse cosecant.
[Description]
ArcCsc calculates the inverse cosecant. Meaning it returns the angle whose cosecant equals X.
ArcCsc is calculated as ArcTan(1.0 / Sqrt(1.0 - Sqr(X))) + (Sgn(X) - 1.0) * PI_2.
[Parameters]
Count=1
1=X:Float=Value whose ArcCsc to calculate. Absolute value of X must be smaller than 1.0.
[Result]
The angle, in radians, whose cosecant equals X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcCscH(X: Float): Float;
[ShortDescr]
Calculates the inverse hyperbolic cosecant.
[Description]
ArcCscH calculates the inverse hyperbolic cosecant. Meaning, it returns the value
whose hyperbolic cosecant equals X. ArcCscH is calculates as Ln((Sgn(X) * Sqrt (Sqr(X) + 1.0) + 1.0) / X)
[Parameters]
Count=1
1=X:Float=Value whose ArcCscH to calculate, cannot be 0.0.
[Result]
ArcCscH of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcSec(X: Float): Float;
[ShortDescr]
Calculates the inverse Sec.
[Description]
ArcSec calculates the inverse secant of X. Meaning it returns the angle whose
secant equals X.
[Parameters]
Count=1
1=X:Float=Value whose ArcSec to calculate. Absolute value of X must be smaller than 1.0.
[Result]
ArcSec of X in radians.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcSecH(X: Float): Float;
[ShortDescr]
Calculates the inverse hyperbolic secant.
[Description]
Calculates the inverse hyperbolic secant. Meaning it returns the value whose hyperbolic
secant equals X. ArcSecH is calculated as Ln((Sqrt(1.0 - Sqr(X)) + 1.0) / X).
[Parameters]
Count=1
1=X:Float=Value whose ArcSecH to calculate. X must be smaller than or equal to 1.0.
[Result]
Inverse hyperbolic secant of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcSin(X: Float): Float;
[ShortDescr]
Calculates the inverse sine.
[Description]
ArcSin calculates the inverse sine. Meaning it returns the angle whose sine
equals X.
[Parameters]
Count=1
1=X:Float=The value whose inverse sine to calculate. X must be smaller than or equal to 1.0.
[Result]
ArcSin of X in radians.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcSinH(X: Float): Float;
[ShortDescr]
Calculates the inverse hyperbolic sine.
[Description]
ArcSinH calculates the inverse hyperbolic sine of X. Meaning it returns the value
whose hyperbolic sine equals X.
[Parameters]
Count=1
1=X:Float=Value whose ArcSinH to calculate.
[Result]
ArcSinH of X
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcTan(X: Float): Float;
[ShortDescr]
Calculates the inverse tangent
[Description]
ArcTan calculates the inverse tangent of X. Meaning it returns the angle whose
tangent equals X.
[Parameters]
Count=1
1=X:Float=Value whose inverse tangent to calculate.
[Result]
Inverse tangent of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Arctan2(Y, X: Float): Float;
[ShortDescr]
Calculates the inverse tangent of Y / X
[Description]
ArcTan2 calculates the inverse tangent of Y / X. Meaning it returns the angle
whose tangent equals Y / X.
[Parameters]
Count=2
1=Y:Float=The value of Y in Y / X.
2=X:Float=The value of X in Y / X.
[Result]
The inverse tangent of Y / X in radians.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function ArcTanH(X: Float): Float;
[ShortDescr]
Returns the inverse hyperbolic tangent of X
[Description]
Returns the inverse hyperbolic tangent of X.
[Parameters]
Count=1
1=X:Float=Value whose inverse hyperbolic tangent to calculate.
[Result]
Inverse hyperbolic tangent of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Cos(X: Float): Float;
[ShortDescr]
Calculates the cosine of X
[Description]
Calculates the cosine of X.
[Parameters]
Count=1
1=X:Float=Angle, in radians, whose cosine to calculate.
[Result]
Cosine of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CosH(X: Float): Float;
[ShortDescr]
Returns the hyperbolic cosine of X.
[Description]
Returns the hyperbolic cosine of X. CosH is calculated as [Exp(X) + Exp(-X)] / 2.0.
[Parameters]
Count=1
1=X:Float=Value whose CosH to calculate.
[Result]
Hyperbolic cosine of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Cot(X: Float): Float;
[ShortDescr]
Returns the cotangent of the argument.
[Description]
Cot returns the cotangent of X. Cot(X) is defined as 1.0 / Tan(X).
[Parameters]
Count=1
1=X:Float=Angle, in radians, whose cotangent to calculate.
[Result]
Cotangent of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CotH(X: Float): Float;
[ShortDescr]
Returns the hyperbolic cotangent of X.
[Description]
Returns the hyperbolic cotangent of X. TODO add formula
[Parameters]
Count=1
1=X:Float=Value whose hyperbolic cotangent to calculate.
[Result]
TODO
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Csc(X: Float): Float;
[ShortDescr]
Returns the reciprocal of the sine of X.
[Description]
Returns the reciprocal of the sine of X (cosecant). Meaning, Csc(X) := 1.0 / Sin(X).
[Parameters]
Count=1
1=X:Float=Angle, in radians, whose Csc to calculate.
[Result]
Cosecant of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CscH(X: Float): Float;
[ShortDescr]
Hyperbolic Cosecant (csc).
[Description]
Returns the hyperbolic cosecant of X. This is defined as 2.0 / (Exp(X) - Exp(-X)).
[Parameters]
Count=1
1=X:Float=Value whose hyperbolic cosecant to calculate.
[Result]
Hyperbolic cosecant of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Sec(X: Float): Float;
[ShortDescr]
Returns the reciprocal of the cosine of the argument.
[Description]
Returns the reciprocal of the cosine of X, meaning: Sec(X) = 1.0 / Cos(X).
[Parameters]
Count=1
1=X:Float=Angle, in radians, whose Sec to calculate.
[Result]
Secant of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function SecH(X: Float): Float;
[ShortDescr]
Returns the hyperbolic secant of the argument.
[Description]
SecH calculates the hyperbolic secant of X, which is defined as 2.0 / (Exp(X) + Exp(-X))
[Parameters]
Count=1
1=X:Float=Value whose hyperbolic secant to calculate.
[Result]
Hyperbolic secant of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Sin(X: Float): Float;
[ShortDescr]
Returns the sine of the argument.
[Description]
Sin calculates the sine of X.
[Parameters]
Count=1
1=X:Float=Angle, in radians, whose sine to calculate.
[Result]
Sine of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
procedure SinCos(X: Float; var Sin, Cos: Float);
[ShortDescr]
Calculates the sine and cosine of the argument.
[Description]
SinCos calculates both the sine and cosine of the angle X in one call. This is
much faster than calling Sin() and Cos() separately.
[Parameters]
Count=3
1=X:Float=The angle, in radians, whose sine and cosine to calculate.
2=Sin:Float=Sine of X.
3=Cos:Float=Cosine of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function SinH(X: Float): Float;
[ShortDescr]
Returns the hyperbolic sine of the argument.
[Description]
SinH returns the hyperbolic sine of X. This is defined as [Exp(X) - Exp(-X)] / 2.0.
[Parameters]
Count=1
1=X:Float=Value whose hyperbolic sine to calculate.
[Result]
Hyperbolic sine of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Tan(X: Float): Float;
[ShortDescr]
Returns the tangent of the argument.
[Description]
Tan calculates the tangent of X. The tangent is defines as Sin(X) / Cos(X).
[Parameters]
Count=1
1=X:Float=Angle, in radians, whose tangent to calculate.
[Result]
Tangent of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Transcendental
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function TanH(X: Float): Float;
[ShortDescr]
Returns the hyperbolic tangent of the argument.
[Description]
TanH calculates the hyperbolic tangent of X which is defined
as [Sqr(Exp(X)) - 1.0] / [Sqr(Exp(X)) + 1.0].
[Parameters]
Count=1
1=X:Float=Value whose hyperbolic tangent to calculate.
[Result]
Hyperbolic tangent of X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Hyperbolic
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Power(const Base, Exponent: Float): Float;
[ShortDescr]
Returns Base to the power Exponent.
[Description]
Power calculates Base to the power Exponent. If Base equals 0 the result is 0,
if Exponent equals 0 the result is 1. If the exponent is an integer as opposed to
a floating point value you should use <REF>PowerInt</REF> instead.
[Parameters]
Count=2
1=Base:Float=Base value.
1=Exponent:Float=Exponent value.
[Result]
Base to the power Exponent.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Exponential
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
[SeeAlso]
Count=3
1=PowerInt
2=TenToY
3=TwoToY
<DECL>--------------------------------------------------------------------------
[Declaration]
function Ceiling(X: Float): Integer;
[ShortDescr]
Return the nearest integer value above X.
[Description]
Return the nearest integer value above X.
[Parameters]
Count=1
1=X:Float=The value to return the ceiling of.
[Result]
Nearest integer value above X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Floor(const X: Float): Float;
[ShortDescr]
Return the nearest integer value below X.
[Description]
Return the nearest integer value below X.
[Parameters]
Count=1
1=X:Float=The value to floor.
[Result]
Nearest integer value below X.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Factorial(N: Integer): Longint;
[ShortDescr]
Returns the factorial of the argument.
[Description]
Factorial returns the factorial of N. Factorial is defined as the product of 1..N,
or 1 * 2 * 3 ... N. This value grows very rapidly; to avoid an
overflow N must be smaller than 14.
[Parameters]
Count=1
1=X:Float=The value whose factorial to calculate. N must be smaller than 14.
[Result]
Factorial of N.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function MinFloat(const X, Y: Float): Float;
[ShortDescr]
Returns the smaller of the arguments
[Description]
MinFloat returns the smaller value of the two arguments. I.e. if X &lt; Y the result
is X, otherwise the result is Y.
[Parameters]
Count=2
1=X:Float=Value 1.
2=Y:Float=Value 2.
[Result]
The smaller of the two arguments.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Float support
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function MaxFloat(const X, Y: Float): Float;
[ShortDescr]
Returns the larger of the two arguments.
[Description]
MaxFloat returns the larger value of the two arguments. I.e. if X &gt; Y the result
is X, otherwise it's Y.
[Parameters]
Count=2
1=X:Float=Value 1.
2=Y:Float=Value 2.
[Result]
The larger of the two arguments.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Float support
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Sgn(const X: Float): Shortint;
[ShortDescr]
Returns the sign of the argument.
[Description]
Sgn returns the sign of X. If X &gt; 0 the result is 1, if X &lt; 0 the result is -1,
and finally if X = 0 the result is 0.
[Parameters]
Count=1
1=X:Float=Value whose sign to determine.
[Result]
Sign of X expressed as -1, 0 or +1.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function Signe(const X, Y: Float): Float;
[ShortDescr]
Returns the value of X with the same sign as Y.
[Description]
The result is the value of X with the same sign (positive or negative) as Y. If Y is zero, the result will be -X (the value of X with the sign reversed). If X is zero, the result will always be 0.
[Parameters]
Count=2
1=X:Float=The value you wish to assign a sign to.
2=Y:Float=The value that has the desired sign to assign to X.
[Result]
The value of X with the sign (positive or negative) of Y.
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=Miscellaneous
Author=Clayton Collie;ccollie@cau.edu
Delphi=3,4,5
<DECL>--------------------------------------------------------------------------
[Declaration]
function CheckCrc32(var X: array of Byte; N: Integer; Crc: Cardinal): Integer;
function CheckCrc32_A(var X: array of Byte; Crc: Cardinal): Integer;
function CheckCrc32_P(X: PByteArray; N: Integer; Crc: Cardinal): Integer;
[ShortDescr]
Checks and, if possible, corrects the data.
[Description]
Checks and, if possible, corrects the data.
[Parameters]
Count=3
1=X:array of Byte=The array which contains the data.
2=N:Integer=The number of elements in X.
3=Crc:Cardinal=Transmitted CRC value to check the data against.
[Result]
 <UL>
 <LI>0 No CRC error.
 <LI>1 Correctable error. If the false bit was in the data, it has been corrected.
 <LI>-1 Uncorrectable error (more than one false bit).
 </UL>
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=CRC
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=1
1=Crc32
<DECL>--------------------------------------------------------------------------
[Declaration]
function Crc32(const X: array of Byte; N: Integer; Crc: Cardinal = 0): Cardinal;
function Crc32_A(const X: array of Byte; Crc: Cardinal = 0): Cardinal;
function Crc32_P(X: PByteArray; N: Integer; Crc: Cardinal = 0): Cardinal;
[ShortDescr]
Calculates or checks a CRC.
[Description]
Calculates or checks a CRC.
[Parameters]
Count=3
1=X:array of Byte=The array which contains the data.
2=N:Integer=The number of elements in X.
3=Crc:Cardinal=(optional) if not defined or = 0: Crc32 calculates the CRC
for the data array or transmitted; if CRC is defined: the CRC value is
checked against the data.
[Result]
 <UL>
 <LI>If on input CRC not defined or = 0: The result is the created CRC.
 <LI>If on input CRC is defined: The result is 0 if the CRC was OK,
otherwise the function
  returns the residuum for the correction function.
 </UL>
[Quick Info]
BCB=3,4,5
Unit=JclMath
Category=Math Routines
SubCat=CRC
Author=Michael Schnell;Michael.Schnell@MARIANNE.gihub.de
Delphi=3,4,5
[SeeAlso]
Count=1
1=CheckCrc32
