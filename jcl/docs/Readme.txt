------------------------------------------------------------------------


  Jedi Code Library

Release 1.90
Build 1497
05-Apr-2004

------------------------------------------------------------------------

It has been a long time since we released the last version of the Jedi
Code Library (JCL). Now, a few months after our last beta release, we
are proud to present Version 1.90. A lot of stuff changed since the last
main release - nonetheless we tried to keep backwards compatability as
far as possible. One of the most noticeable changes is that we are now
crossplatform! JCL 1.90 supports writing platform independent VisualCLX
applications for Windows and x86-Linux.


      Supported Tools

    * C++Builder 5
    * C++Builder 6
    * Delphi 5
    * Delphi 6
    * Delphi 7
    * Kylix 3/C++
    * Kylix 3/Delphi

Notes:

    * Not every unit supports all tools. Look out for *.exc files in the
      tool-specific lib/ subdirectories for a list of units excluded
      from compilation.
    * JclTask made it onto the exclusion list because it depends on
      JwaWinType, JwaWinBase, JwaMsTask from Marcel van Brakels Win32
      API translation <http://members.chello.nl/m.vanbrakel2/win32api._zip>.
    * We didn't manage to persuade Kylix 3/C++ to build the CJclVClx
      package; this issue remains unresolved for the time being and will
      cause the installer to fail at the respective point of execution.


      JCL Distribution content:

Install.bat                   - Compile and run JCL Installer (Win32)
QInstall.bat                  - Compile and run CLX version of JCL Installer (Win32)
install.sh                    - Compile and run JCL Installer (Linux)
bin                           - Common place for sample application EXE files
lib                           - Common place for compiled units.
docs                          - Readme (this file) and other documents
examples                      - JCL example applications
examples\make.bat             - Builds selected examples and tools
examples\vcl                  - JCL example applications
examples\vcl\debugextension   - JCL Debug IDE expert for using JclDebug unit
                 \dialog      - Application exception dialog replacement
                 \threadnames - IDE expert showing class names for debugged threads
                 \tools       - Tools for creating files with JCL debug information
examples\vcl\delphitools      - Collection of system tools using JCL
examples\vcl\projectanalyzer  - Project Analyzer IDE expert
examples\visclx               - JCL example applications
examples\windows              - JCL example applications
help                          - Help file
install                       - Installer source code
packages                      - JCL runtime packages and project groups
source                        - JCL source code


      Feedback

If you have any comments or suggestions we would appreciate it if you
drop us a note. There are several ways to get in contact with us:

    * Write to jcl@delphi-jedi.org <mailto:jcl@delphi-jedi.org> or to
      jcl-testing@delphi-jedi.org <mailto:jcl-testing@delphi-jedi.org>
      This email account should not be used for support requests. If you
      need support please use either the newsgroups or the mailing list.
    * If you want to keep up to date about JCL then you can join the JCL
      mailing list by going to http://www.egroups.com/group/JEDI-JCL You
      can also use this list to voice your opinion, comments or suggestions.
    * If you prefer a newsgroup over a mailing list please join us at
      news://forums.talkto.net/jedi.jcl. The newsgroup is the point
      where you can discuss the JCL with other users and with the team
      itself.


      Issue Tracking

An issue tracking tool can be accessed via ('Code Library' category):

http://homepages.borland.com/jedi/issuetracker/

The general rule is: *If you want to get a bug fixed you need to log it!*

The JEDI issue tracker is based up on the Mantis BugTracker Open Source
project. More background information about it is available on its
homepage http://mantisbt.sourceforge.net

Please be aware that you are allowed there to enter feature request and
code donations as well.


      Debug Extension for JclDebug unit

The examples\vcl\debugExtension folder contains IDE expert which assists
to insert JCL Debug information into executable files. This can be
useful when use source location routines from JclDebug unit. These
routines needs some kind of special information to be able provide
source location for given address in the process. Currently there are
four options to get it work:

   1. Generate and deploy MAP file with your executable file. The file
      is generated by the linker. It needs to be set in Project|Options
      dialog -> Linker page, Detailed checkbox.
   2. Generate and deploy JDBG file file with your executable file. This
      is binary file based on MAP file but its size is typically about
      12% of original MAP file. You can generate it by MapToJdbg tool in
      jcl\examples\vcl\tools folder. The advantage over MAP file is
      smaller size and better security of the file content because it is
      not a plain text file and it also contains a checksum.
   3. Generate Borland TD32 debug symbols. These symbols are stored
      directly in the executable file but usually adds several megabytes
      so the file is very large. The advantage is you don't have to
      deploy any other file and it is easy to generate it by checking
      Include TD32 debug info in Linker option page.
   4. Insert JCL Debug info into executable file by the IDE expert. The
      size of added data is similar to JDBG file but it will be inserted
      directly into the executable file. This is probably best option
      because it combines small size of included data and no requirement
      of deploying additional files. In case you use this option you
      need install the JclDebugIde expert.

The IDE expert will add new item to IDE Project menu. Due some
differences in Open Tools API the use of the expert is slightly
different in Delphi 4. For Delphi 5, 6 and 7 it adds 'Insert JCL Debug
data' check item at the end of the Project menu. When the item is
checked, everytime the project is compiled by one of following commands:
Compile, Build, Compile All Projects, Build All Projects or Run
necessary JCL debug data are automatically inserted into the executable.
Moreover, for Build and Build All commands dialog with detailed
information of size of these data will be displayed. For Delphi 4 there
is 'Build JCL Debug' command only in the Project menu which performs a
build including these data.

You can generate those debug data for packages and libraries as well
using the expert. Each executable file in the project can use different
option from those listed above. It is not necessary to generate any
debug data for Borland runtime packages because the source location code
can use names of exported functions to get procedure or method name. To
get line number information for Borland RTL and VCL/CLX units you have
to check Use Debug DCUs checkbox in Project|Options dialog -> Compiler
tab (not available in Delphi 4). Unfortunately it is not possible to get
line number information for Borland runtime packages because Borland
does not provide detailed MAP files for them so you get procedure or
method name only.

In case you have more than one data source for an executable file by an
accident the best one is chosen in following order:

   1. JCL Debug data in the executable file
   2. JDBG file
   3. Borland TD32 symbols
   4. MAP file
   5. Library or Borland package exports

It is also possible to insert JCL debug data programmatically to the
executable file by using MakeJclDbg command line tool in
jcl\examples\vcl\delphitools folder. You can study included makefiles
which uses this tool for building delphitools examples.

To help using JclDebug exceptional stack tracking in application simple
dialog is provided in jcl\examples\debugextension\dialog folder. The
dialog replaces standard dialog displayed by VCL or CLX application when
an unhandled exception occurs. It has additional Detailed button showing
the stack, list of loaded modules and other system information. By
adding the dialog to the application exceptional stack tracking code is
automatically initialized so you don't have to care about it. You can
also turn on logging to text file by setting the Tag property of the
dialog to '1'. There is also version for CLX (ClxExceptDlg) but it works
on Windows only. These dialogs are intended to be added to Object
Repository.

*Short description of getting the JclDebug functionality in your project:*

   1. Close all running instances of Delphi
   2. Install JCL and IDE experts by the JCL Installer
   3. Run Delphi IDE and open your project
   4. Remove any TApplication.OnException handlers from your project (if
      any).
   5. Add new Exception Dialog by selecting File | New | Other ... |
      Dialogs tab, Select 'Exception Dialog' or 'Exception Dialog with
      Send' icon, Click OK button, Save the form (use
      ExceptionDialog.pas name, for example)
   6. Check Project | Insert JCL Debug data menu item
   7. Do Project | Build


      Makefiles

In order to compile examples and tools by one command we provide makefiles.

To use them, cd into the jcl/examples sub directory and at the command
prompt, type

> make

It should start to compile the covered projects using most recent
version of compiler from installed Delphi versions. All executable files
will be created in jcl/bin directory.


      Version Control

To always have access to the most recent changes in the JCL, you should
install a CVS client (we recommend TortoiseCVS and WinCVS) and download
the CVS repository files to your computer. With the CVS client, you can
update your local repository at any time.

For more instructions on how to set up CVS and use it with JVCL, see the
CVS instruction page
<http://sourceforge.net/docman/display_doc.php?docid=14033&group_id=1>.
You can also access the CVS repository via the web
<http://cvs.sourceforge.net/viewcvs.py/jcl/>.


      Downloads

Jedi Code Library: File List on SourceForge:

http://sourceforge.net/project/showfiles.php?group_id=47514


      Getting involved in JCL development

If you want to help out making JCL better or bigger or just plain
cooler, there are several ways in which you can help out. Here are some
of the things we need your help on:

    * Donate source code
    * Donate time writing help
    * Donate time writing demos
    * Donate time fixing bugs

JCL accepts donations from developers as long as the source fullfills
the requirements set up by the JEDI and JCL teams. To read more about
these requirements, visit the page http://homepages.borland.com/jedi/jcl

You can also donate your time by writing help for the source already in
JCL. We currently use Doc-o-Matic to create the finished help files but
the actual help sources are plain text files in a simple to understand
format. We can provide you with auto-generated templates with all
classes, properties, types etc already inserted. The "only" thing left
to do is fill in the actual help text for the help items. If you are
interested in writing help, contact us.

If you want to help fix bugs in JCL, go to Mantis and check the bug
report there. You can post replies as well as fixes directly in the bug
report. One of the JCL developers will pick up the report/fix and update
the CVS repository if the fix is satisfactory. If you report and fix a
lot of bugs, you might even get developer access to CVS so you can
update the JCL files directly.


      Fixed bugs

The following bugs have been fixed (among others) since the JCL 1.22 release

Mantis entry # 	description
#0000041	Todo Item not yet done: StrContainsChars
#0000046	TJclPeMapImgHooks.ReplaceImport does not work for host process
#0000056	JCLDebug is not catching exceptions that are raised from DLLs
#0000196	Display Call stack on exception box
#0000197	all files are readonly
#0000248	JclSysUtils.StrToBoolean does not accept 'Y', 'N', 'T', 'F'
#0000253	StrStripNonNumbersChars
#0000271	GetSizeOfFile(const FileName: string) does not work for size > 4GB
#0000278	TDllVersion: wrong unit
#0000303	RunningProcessesList: FullPath option does not work any more
#0000321	Use TStrings instead of TStringList in procedure
StringListCustomSort
#0000342	Memory leak
#0000349	ModFloat(-2, 2) gives 2, which is wrong
#0000365	GetShellProcessName does not work on Win9x systems
#0000401	ERangeError in GetCPUSpeed
#0000444	ASCIIZ and Unicode
#0000445	ASCIIZ and Unicode
#0000512	RunningProcessesList does not return full path on XP
#0000533	RunningProcessesList does not return full path on XP
#0000605	AddressType reported as the addressname
#0000632	TJclPeImage.StampToDateTime simplification
#0000640	Compilation under Linux.
#0000670	JCLSYSINFO - GetMacAddresses does not fall back on
GetMacAddressesSnmp
#0000683	GetBIOSDate does not work on Win9x/Me systems
#0000718	Missing JclBase in uses gives error in D5
#0000744	JclRTTI causes access violation locating IsClass
#0000785	SystemTimeToFileTime and DosDateTimeToFileTime do nothing.
#0000789	ThreadID defined as Integer - fails on win95/98/ME
#0000801	JclSysInfo.GetCPUSpeed - division by zero
#0000845	GetWindowsVersion - Errors!!!
#0000856	SetVirtualMethod causes Access Violation
#0000868	ERangeError raised in StrReplaceCS
#0000872	Passing empty string to strReplace causes exception
#0000920	Add addrress type for telex, at the moment only types for smtp
and fax
#0000921	Add addrress type for telex, at the moment only types for smtp
and fax
#0000929	User home directory in Win 2000/XP
#0000938	Changes o IniFiles not written
#0000961	StackTrace, Exception Handler
#0000967	CreateStrackList function
#0000977	AdvBuildFileList does not return files
#0000981	Division by zero in JclSysInfo
#0001004	AdvBuildFileList fails to match
#0001006	Division by 0 and runtime error 216
#0001007	GetCPUSpeed() crashes on Hyperthreading CPUs
#0001013	JclDateTime & TIME_ZONE_ID_UNKNOWN
#0001024	TerminateApp calls CloseHandle even if OpenProcess fails
#0001074	Dr. Watson when GetCPUInfo is called
#0001109	TJclFileVersionInfo: add property ItemByName or function
GetItemByName
#0001112	Linking JclGraphUtils GPFs under XP Home Edition
#0001118	type incompatible pointer assignment
#0001123	StrReplaceCI and StrSmartCase ignore national chars
#0001133	DelTree('') deletes c:*:* !!!
#0001137	StrMatches with a search of '*' won't match empty string
#0001147	Call of CharPos with Index=1 returns 2 if first char of string
do match
#0001156	Error in conversion
#0001167	EZeroDivide is raised in GetCPUSpeed
#0001185	BCB is not defined for VER110
#0001226	Files without any attributes aren't returned by AdvBuildFileList
#0001282	JCLSysInfo GetWindowsVersion fails on Windows 2003
#0001294	SetVirtualMethod sets method to wrong location
#0001295	DevideByZero Error

